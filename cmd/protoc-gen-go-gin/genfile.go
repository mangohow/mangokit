package main

import (
	"fmt"
	"net/http"
	"os"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)


func generateFile(plugin *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 || !hasHTTPRule(file.Services) {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_http_gin.pb.go"

	g := plugin.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-gin. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-gen-go-gin %s", version))
	g.P("// - protoc             ", protocVersion(plugin))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	generateFileContent(plugin, file, g)

	return nil
}

func generateFileContent(plugin *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	for _, service := range file.Services {
		genService(plugin, file, g, service)
	}
}

func genService(plugin *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	comment := service.Comments.Leading.String() + service.Comments.Trailing.String()
	if comment != "" {
		comment = "// " + service.GoName + "HTTPService" + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
	}

	// http service
	sd := &ServiceDesc{
		ServiceName: service.GoName,
		Comment: comment,
	}

	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule == nil || !ok {
			continue
		}
		sd.Methods = append(sd.Methods, buildHTTPRule(g, service, method, rule))
	}

	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

func buildHTTPRule(g *protogen.GeneratedFile, service *protogen.Service, m *protogen.Method, rule *annotations.HttpRule) *MethodDesc {
	var (
		path         string
		method       string
	)

	// 获取请求方法和路径
	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = http.MethodGet
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = http.MethodPut
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = http.MethodPost
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = http.MethodDelete
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = http.MethodPatch
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	if method == "" {
		method = http.MethodPost
	}

	if path == "" {
		fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s http request path is empty.\n", method, path)
		os.Exit(1)
	}

	md := buildMethodDesc(g, m)
	md.HttpMethod = method
	md.Path = path
	md.ServiceName = service.GoName

	return md
}

func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method) *MethodDesc {
	comment := m.Comments.Leading.String() + m.Comments.Trailing.String()
	if comment != "" {
		comment = "// " + m.GoName + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
	}

	return &MethodDesc{
		Name:        m.GoName,
		Request:     g.QualifiedGoIdent(m.Input.GoIdent),
		Reply:       g.QualifiedGoIdent(m.Output.GoIdent),
		Comment:     comment,
	}
}

func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

const deprecationComment = "// Deprecated: Do not use."