     0  *ast.File {
     1  .  Doc: nil
     2  .  Package: example.go:1:1
     3  .  Name: *ast.Ident {
     4  .  .  NamePos: example.go:1:9
     5  .  .  Name: "examples"
     6  .  .  Obj: nil
     7  .  }
     8  .  Decls: []ast.Decl (len = 38) {
     9  .  .  0: *ast.GenDecl {
    10  .  .  .  Doc: nil
    11  .  .  .  TokPos: example.go:3:1
    12  .  .  .  Tok: import
    13  .  .  .  Lparen: example.go:3:8
    14  .  .  .  Specs: []ast.Spec (len = 5) {
    15  .  .  .  .  0: *ast.ImportSpec {
    16  .  .  .  .  .  Doc: nil
    17  .  .  .  .  .  Name: nil
    18  .  .  .  .  .  Path: *ast.BasicLit {
    19  .  .  .  .  .  .  ValuePos: example.go:4:2
    20  .  .  .  .  .  .  Kind: STRING
    21  .  .  .  .  .  .  Value: "\"fmt\""
    22  .  .  .  .  .  }
    23  .  .  .  .  .  Comment: nil
    24  .  .  .  .  .  EndPos: -
    25  .  .  .  .  }
    26  .  .  .  .  1: *ast.ImportSpec {
    27  .  .  .  .  .  Doc: nil
    28  .  .  .  .  .  Name: nil
    29  .  .  .  .  .  Path: *ast.BasicLit {
    30  .  .  .  .  .  .  ValuePos: example.go:5:2
    31  .  .  .  .  .  .  Kind: STRING
    32  .  .  .  .  .  .  Value: "\"github.com/mangohow/mangokit/cmd/stmapper/examples/model\""
    33  .  .  .  .  .  }
    34  .  .  .  .  .  Comment: nil
    35  .  .  .  .  .  EndPos: -
    36  .  .  .  .  }
    37  .  .  .  .  2: *ast.ImportSpec {
    38  .  .  .  .  .  Doc: nil
    39  .  .  .  .  .  Name: nil
    40  .  .  .  .  .  Path: *ast.BasicLit {
    41  .  .  .  .  .  .  ValuePos: example.go:6:2
    42  .  .  .  .  .  .  Kind: STRING
    43  .  .  .  .  .  .  Value: "\"github.com/mangohow/mangokit/stmapper\""
    44  .  .  .  .  .  }
    45  .  .  .  .  .  Comment: nil
    46  .  .  .  .  .  EndPos: -
    47  .  .  .  .  }
    48  .  .  .  .  3: *ast.ImportSpec {
    49  .  .  .  .  .  Doc: nil
    50  .  .  .  .  .  Name: nil
    51  .  .  .  .  .  Path: *ast.BasicLit {
    52  .  .  .  .  .  .  ValuePos: example.go:7:2
    53  .  .  .  .  .  .  Kind: STRING
    54  .  .  .  .  .  .  Value: "\"strconv\""
    55  .  .  .  .  .  }
    56  .  .  .  .  .  Comment: nil
    57  .  .  .  .  .  EndPos: -
    58  .  .  .  .  }
    59  .  .  .  .  4: *ast.ImportSpec {
    60  .  .  .  .  .  Doc: nil
    61  .  .  .  .  .  Name: nil
    62  .  .  .  .  .  Path: *ast.BasicLit {
    63  .  .  .  .  .  .  ValuePos: example.go:8:2
    64  .  .  .  .  .  .  Kind: STRING
    65  .  .  .  .  .  .  Value: "\"time\""
    66  .  .  .  .  .  }
    67  .  .  .  .  .  Comment: nil
    68  .  .  .  .  .  EndPos: -
    69  .  .  .  .  }
    70  .  .  .  }
    71  .  .  .  Rparen: example.go:9:1
    72  .  .  }
    73  .  .  1: *ast.GenDecl {
    74  .  .  .  Doc: nil
    75  .  .  .  TokPos: example.go:11:1
    76  .  .  .  Tok: type
    77  .  .  .  Lparen: -
    78  .  .  .  Specs: []ast.Spec (len = 1) {
    79  .  .  .  .  0: *ast.TypeSpec {
    80  .  .  .  .  .  Doc: nil
    81  .  .  .  .  .  Name: *ast.Ident {
    82  .  .  .  .  .  .  NamePos: example.go:11:6
    83  .  .  .  .  .  .  Name: "TestType"
    84  .  .  .  .  .  .  Obj: *ast.Object {
    85  .  .  .  .  .  .  .  Kind: type
    86  .  .  .  .  .  .  .  Name: "TestType"
    87  .  .  .  .  .  .  .  Decl: *(obj @ 79)
    88  .  .  .  .  .  .  .  Data: nil
    89  .  .  .  .  .  .  .  Type: nil
    90  .  .  .  .  .  .  }
    91  .  .  .  .  .  }
    92  .  .  .  .  .  TypeParams: nil
    93  .  .  .  .  .  Assign: -
    94  .  .  .  .  .  Type: *ast.Ident {
    95  .  .  .  .  .  .  NamePos: example.go:11:15
    96  .  .  .  .  .  .  Name: "string"
    97  .  .  .  .  .  .  Obj: nil
    98  .  .  .  .  .  }
    99  .  .  .  .  .  Comment: nil
   100  .  .  .  .  }
   101  .  .  .  }
   102  .  .  .  Rparen: -
   103  .  .  }
   104  .  .  2: *ast.GenDecl {
   105  .  .  .  Doc: nil
   106  .  .  .  TokPos: example.go:13:1
   107  .  .  .  Tok: type
   108  .  .  .  Lparen: -
   109  .  .  .  Specs: []ast.Spec (len = 1) {
   110  .  .  .  .  0: *ast.TypeSpec {
   111  .  .  .  .  .  Doc: nil
   112  .  .  .  .  .  Name: *ast.Ident {
   113  .  .  .  .  .  .  NamePos: example.go:13:6
   114  .  .  .  .  .  .  Name: "TypeTestType"
   115  .  .  .  .  .  .  Obj: *ast.Object {
   116  .  .  .  .  .  .  .  Kind: type
   117  .  .  .  .  .  .  .  Name: "TypeTestType"
   118  .  .  .  .  .  .  .  Decl: *(obj @ 110)
   119  .  .  .  .  .  .  .  Data: nil
   120  .  .  .  .  .  .  .  Type: nil
   121  .  .  .  .  .  .  }
   122  .  .  .  .  .  }
   123  .  .  .  .  .  TypeParams: nil
   124  .  .  .  .  .  Assign: -
   125  .  .  .  .  .  Type: *ast.Ident {
   126  .  .  .  .  .  .  NamePos: example.go:13:19
   127  .  .  .  .  .  .  Name: "TestType"
   128  .  .  .  .  .  .  Obj: *(obj @ 84)
   129  .  .  .  .  .  }
   130  .  .  .  .  .  Comment: nil
   131  .  .  .  .  }
   132  .  .  .  }
   133  .  .  .  Rparen: -
   134  .  .  }
   135  .  .  3: *ast.GenDecl {
   136  .  .  .  Doc: nil
   137  .  .  .  TokPos: example.go:15:1
   138  .  .  .  Tok: type
   139  .  .  .  Lparen: -
   140  .  .  .  Specs: []ast.Spec (len = 1) {
   141  .  .  .  .  0: *ast.TypeSpec {
   142  .  .  .  .  .  Doc: nil
   143  .  .  .  .  .  Name: *ast.Ident {
   144  .  .  .  .  .  .  NamePos: example.go:15:6
   145  .  .  .  .  .  .  Name: "MyInteger"
   146  .  .  .  .  .  .  Obj: *ast.Object {
   147  .  .  .  .  .  .  .  Kind: type
   148  .  .  .  .  .  .  .  Name: "MyInteger"
   149  .  .  .  .  .  .  .  Decl: *(obj @ 141)
   150  .  .  .  .  .  .  .  Data: nil
   151  .  .  .  .  .  .  .  Type: nil
   152  .  .  .  .  .  .  }
   153  .  .  .  .  .  }
   154  .  .  .  .  .  TypeParams: nil
   155  .  .  .  .  .  Assign: -
   156  .  .  .  .  .  Type: *ast.SelectorExpr {
   157  .  .  .  .  .  .  X: *ast.Ident {
   158  .  .  .  .  .  .  .  NamePos: example.go:15:16
   159  .  .  .  .  .  .  .  Name: "model"
   160  .  .  .  .  .  .  .  Obj: nil
   161  .  .  .  .  .  .  }
   162  .  .  .  .  .  .  Sel: *ast.Ident {
   163  .  .  .  .  .  .  .  NamePos: example.go:15:22
   164  .  .  .  .  .  .  .  Name: "Integer"
   165  .  .  .  .  .  .  .  Obj: nil
   166  .  .  .  .  .  .  }
   167  .  .  .  .  .  }
   168  .  .  .  .  .  Comment: nil
   169  .  .  .  .  }
   170  .  .  .  }
   171  .  .  .  Rparen: -
   172  .  .  }
   173  .  .  4: *ast.GenDecl {
   174  .  .  .  Doc: nil
   175  .  .  .  TokPos: example.go:17:1
   176  .  .  .  Tok: type
   177  .  .  .  Lparen: -
   178  .  .  .  Specs: []ast.Spec (len = 1) {
   179  .  .  .  .  0: *ast.TypeSpec {
   180  .  .  .  .  .  Doc: nil
   181  .  .  .  .  .  Name: *ast.Ident {
   182  .  .  .  .  .  .  NamePos: example.go:17:6
   183  .  .  .  .  .  .  Name: "MyIntegerPointer"
   184  .  .  .  .  .  .  Obj: *ast.Object {
   185  .  .  .  .  .  .  .  Kind: type
   186  .  .  .  .  .  .  .  Name: "MyIntegerPointer"
   187  .  .  .  .  .  .  .  Decl: *(obj @ 179)
   188  .  .  .  .  .  .  .  Data: nil
   189  .  .  .  .  .  .  .  Type: nil
   190  .  .  .  .  .  .  }
   191  .  .  .  .  .  }
   192  .  .  .  .  .  TypeParams: nil
   193  .  .  .  .  .  Assign: -
   194  .  .  .  .  .  Type: *ast.StarExpr {
   195  .  .  .  .  .  .  Star: example.go:17:23
   196  .  .  .  .  .  .  X: *ast.SelectorExpr {
   197  .  .  .  .  .  .  .  X: *ast.Ident {
   198  .  .  .  .  .  .  .  .  NamePos: example.go:17:24
   199  .  .  .  .  .  .  .  .  Name: "model"
   200  .  .  .  .  .  .  .  .  Obj: nil
   201  .  .  .  .  .  .  .  }
   202  .  .  .  .  .  .  .  Sel: *ast.Ident {
   203  .  .  .  .  .  .  .  .  NamePos: example.go:17:30
   204  .  .  .  .  .  .  .  .  Name: "Integer"
   205  .  .  .  .  .  .  .  .  Obj: nil
   206  .  .  .  .  .  .  .  }
   207  .  .  .  .  .  .  }
   208  .  .  .  .  .  }
   209  .  .  .  .  .  Comment: nil
   210  .  .  .  .  }
   211  .  .  .  }
   212  .  .  .  Rparen: -
   213  .  .  }
   214  .  .  5: *ast.GenDecl {
   215  .  .  .  Doc: nil
   216  .  .  .  TokPos: example.go:19:1
   217  .  .  .  Tok: type
   218  .  .  .  Lparen: -
   219  .  .  .  Specs: []ast.Spec (len = 1) {
   220  .  .  .  .  0: *ast.TypeSpec {
   221  .  .  .  .  .  Doc: nil
   222  .  .  .  .  .  Name: *ast.Ident {
   223  .  .  .  .  .  .  NamePos: example.go:19:6
   224  .  .  .  .  .  .  Name: "OuterStruct"
   225  .  .  .  .  .  .  Obj: *ast.Object {
   226  .  .  .  .  .  .  .  Kind: type
   227  .  .  .  .  .  .  .  Name: "OuterStruct"
   228  .  .  .  .  .  .  .  Decl: *(obj @ 220)
   229  .  .  .  .  .  .  .  Data: nil
   230  .  .  .  .  .  .  .  Type: nil
   231  .  .  .  .  .  .  }
   232  .  .  .  .  .  }
   233  .  .  .  .  .  TypeParams: nil
   234  .  .  .  .  .  Assign: -
   235  .  .  .  .  .  Type: *ast.SelectorExpr {
   236  .  .  .  .  .  .  X: *ast.Ident {
   237  .  .  .  .  .  .  .  NamePos: example.go:19:18
   238  .  .  .  .  .  .  .  Name: "model"
   239  .  .  .  .  .  .  .  Obj: nil
   240  .  .  .  .  .  .  }
   241  .  .  .  .  .  .  Sel: *ast.Ident {
   242  .  .  .  .  .  .  .  NamePos: example.go:19:24
   243  .  .  .  .  .  .  .  Name: "Username"
   244  .  .  .  .  .  .  .  Obj: nil
   245  .  .  .  .  .  .  }
   246  .  .  .  .  .  }
   247  .  .  .  .  .  Comment: nil
   248  .  .  .  .  }
   249  .  .  .  }
   250  .  .  .  Rparen: -
   251  .  .  }
   252  .  .  6: *ast.GenDecl {
   253  .  .  .  Doc: nil
   254  .  .  .  TokPos: example.go:21:1
   255  .  .  .  Tok: type
   256  .  .  .  Lparen: -
   257  .  .  .  Specs: []ast.Spec (len = 1) {
   258  .  .  .  .  0: *ast.TypeSpec {
   259  .  .  .  .  .  Doc: nil
   260  .  .  .  .  .  Name: *ast.Ident {
   261  .  .  .  .  .  .  NamePos: example.go:21:6
   262  .  .  .  .  .  .  Name: "OuterStructPointer"
   263  .  .  .  .  .  .  Obj: *ast.Object {
   264  .  .  .  .  .  .  .  Kind: type
   265  .  .  .  .  .  .  .  Name: "OuterStructPointer"
   266  .  .  .  .  .  .  .  Decl: *(obj @ 258)
   267  .  .  .  .  .  .  .  Data: nil
   268  .  .  .  .  .  .  .  Type: nil
   269  .  .  .  .  .  .  }
   270  .  .  .  .  .  }
   271  .  .  .  .  .  TypeParams: nil
   272  .  .  .  .  .  Assign: -
   273  .  .  .  .  .  Type: *ast.StarExpr {
   274  .  .  .  .  .  .  Star: example.go:21:25
   275  .  .  .  .  .  .  X: *ast.SelectorExpr {
   276  .  .  .  .  .  .  .  X: *ast.Ident {
   277  .  .  .  .  .  .  .  .  NamePos: example.go:21:26
   278  .  .  .  .  .  .  .  .  Name: "model"
   279  .  .  .  .  .  .  .  .  Obj: nil
   280  .  .  .  .  .  .  .  }
   281  .  .  .  .  .  .  .  Sel: *ast.Ident {
   282  .  .  .  .  .  .  .  .  NamePos: example.go:21:32
   283  .  .  .  .  .  .  .  .  Name: "Username"
   284  .  .  .  .  .  .  .  .  Obj: nil
   285  .  .  .  .  .  .  .  }
   286  .  .  .  .  .  .  }
   287  .  .  .  .  .  }
   288  .  .  .  .  .  Comment: nil
   289  .  .  .  .  }
   290  .  .  .  }
   291  .  .  .  Rparen: -
   292  .  .  }
   293  .  .  7: *ast.GenDecl {
   294  .  .  .  Doc: nil
   295  .  .  .  TokPos: example.go:23:1
   296  .  .  .  Tok: type
   297  .  .  .  Lparen: -
   298  .  .  .  Specs: []ast.Spec (len = 1) {
   299  .  .  .  .  0: *ast.TypeSpec {
   300  .  .  .  .  .  Doc: nil
   301  .  .  .  .  .  Name: *ast.Ident {
   302  .  .  .  .  .  .  NamePos: example.go:23:6
   303  .  .  .  .  .  .  Name: "St"
   304  .  .  .  .  .  .  Obj: *ast.Object {
   305  .  .  .  .  .  .  .  Kind: type
   306  .  .  .  .  .  .  .  Name: "St"
   307  .  .  .  .  .  .  .  Decl: *(obj @ 299)
   308  .  .  .  .  .  .  .  Data: nil
   309  .  .  .  .  .  .  .  Type: nil
   310  .  .  .  .  .  .  }
   311  .  .  .  .  .  }
   312  .  .  .  .  .  TypeParams: nil
   313  .  .  .  .  .  Assign: -
   314  .  .  .  .  .  Type: *ast.StructType {
   315  .  .  .  .  .  .  Struct: example.go:23:9
   316  .  .  .  .  .  .  Fields: *ast.FieldList {
   317  .  .  .  .  .  .  .  Opening: example.go:23:16
   318  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) {
   319  .  .  .  .  .  .  .  .  0: *ast.Field {
   320  .  .  .  .  .  .  .  .  .  Doc: nil
   321  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   322  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   323  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:24:2
   324  .  .  .  .  .  .  .  .  .  .  .  Name: "XXX"
   325  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   326  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
   327  .  .  .  .  .  .  .  .  .  .  .  .  Name: "XXX"
   328  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 319)
   329  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
   330  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
   331  .  .  .  .  .  .  .  .  .  .  .  }
   332  .  .  .  .  .  .  .  .  .  .  }
   333  .  .  .  .  .  .  .  .  .  }
   334  .  .  .  .  .  .  .  .  .  Type: *ast.Ident {
   335  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:24:6
   336  .  .  .  .  .  .  .  .  .  .  Name: "string"
   337  .  .  .  .  .  .  .  .  .  .  Obj: nil
   338  .  .  .  .  .  .  .  .  .  }
   339  .  .  .  .  .  .  .  .  .  Tag: nil
   340  .  .  .  .  .  .  .  .  .  Comment: nil
   341  .  .  .  .  .  .  .  .  }
   342  .  .  .  .  .  .  .  }
   343  .  .  .  .  .  .  .  Closing: example.go:25:1
   344  .  .  .  .  .  .  }
   345  .  .  .  .  .  .  Incomplete: false
   346  .  .  .  .  .  }
   347  .  .  .  .  .  Comment: nil
   348  .  .  .  .  }
   349  .  .  .  }
   350  .  .  .  Rparen: -
   351  .  .  }
   352  .  .  8: *ast.GenDecl {
   353  .  .  .  Doc: nil
   354  .  .  .  TokPos: example.go:27:1
   355  .  .  .  Tok: type
   356  .  .  .  Lparen: -
   357  .  .  .  Specs: []ast.Spec (len = 1) {
   358  .  .  .  .  0: *ast.TypeSpec {
   359  .  .  .  .  .  Doc: nil
   360  .  .  .  .  .  Name: *ast.Ident {
   361  .  .  .  .  .  .  NamePos: example.go:27:6
   362  .  .  .  .  .  .  Name: "Interface"
   363  .  .  .  .  .  .  Obj: *ast.Object {
   364  .  .  .  .  .  .  .  Kind: type
   365  .  .  .  .  .  .  .  Name: "Interface"
   366  .  .  .  .  .  .  .  Decl: *(obj @ 358)
   367  .  .  .  .  .  .  .  Data: nil
   368  .  .  .  .  .  .  .  Type: nil
   369  .  .  .  .  .  .  }
   370  .  .  .  .  .  }
   371  .  .  .  .  .  TypeParams: nil
   372  .  .  .  .  .  Assign: -
   373  .  .  .  .  .  Type: *ast.InterfaceType {
   374  .  .  .  .  .  .  Interface: example.go:27:16
   375  .  .  .  .  .  .  Methods: *ast.FieldList {
   376  .  .  .  .  .  .  .  Opening: example.go:27:26
   377  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) {
   378  .  .  .  .  .  .  .  .  0: *ast.Field {
   379  .  .  .  .  .  .  .  .  .  Doc: nil
   380  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   381  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   382  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:28:2
   383  .  .  .  .  .  .  .  .  .  .  .  Name: "AAA"
   384  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   385  .  .  .  .  .  .  .  .  .  .  .  .  Kind: func
   386  .  .  .  .  .  .  .  .  .  .  .  .  Name: "AAA"
   387  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 378)
   388  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
   389  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
   390  .  .  .  .  .  .  .  .  .  .  .  }
   391  .  .  .  .  .  .  .  .  .  .  }
   392  .  .  .  .  .  .  .  .  .  }
   393  .  .  .  .  .  .  .  .  .  Type: *ast.FuncType {
   394  .  .  .  .  .  .  .  .  .  .  Func: -
   395  .  .  .  .  .  .  .  .  .  .  TypeParams: nil
   396  .  .  .  .  .  .  .  .  .  .  Params: *ast.FieldList {
   397  .  .  .  .  .  .  .  .  .  .  .  Opening: example.go:28:5
   398  .  .  .  .  .  .  .  .  .  .  .  List: nil
   399  .  .  .  .  .  .  .  .  .  .  .  Closing: example.go:28:6
   400  .  .  .  .  .  .  .  .  .  .  }
   401  .  .  .  .  .  .  .  .  .  .  Results: nil
   402  .  .  .  .  .  .  .  .  .  }
   403  .  .  .  .  .  .  .  .  .  Tag: nil
   404  .  .  .  .  .  .  .  .  .  Comment: nil
   405  .  .  .  .  .  .  .  .  }
   406  .  .  .  .  .  .  .  }
   407  .  .  .  .  .  .  .  Closing: example.go:29:1
   408  .  .  .  .  .  .  }
   409  .  .  .  .  .  .  Incomplete: false
   410  .  .  .  .  .  }
   411  .  .  .  .  .  Comment: nil
   412  .  .  .  .  }
   413  .  .  .  }
   414  .  .  .  Rparen: -
   415  .  .  }
   416  .  .  9: *ast.GenDecl {
   417  .  .  .  Doc: nil
   418  .  .  .  TokPos: example.go:31:1
   419  .  .  .  Tok: type
   420  .  .  .  Lparen: -
   421  .  .  .  Specs: []ast.Spec (len = 1) {
   422  .  .  .  .  0: *ast.TypeSpec {
   423  .  .  .  .  .  Doc: nil
   424  .  .  .  .  .  Name: *ast.Ident {
   425  .  .  .  .  .  .  NamePos: example.go:31:6
   426  .  .  .  .  .  .  Name: "UserProto"
   427  .  .  .  .  .  .  Obj: *ast.Object {
   428  .  .  .  .  .  .  .  Kind: type
   429  .  .  .  .  .  .  .  Name: "UserProto"
   430  .  .  .  .  .  .  .  Decl: *(obj @ 422)
   431  .  .  .  .  .  .  .  Data: nil
   432  .  .  .  .  .  .  .  Type: nil
   433  .  .  .  .  .  .  }
   434  .  .  .  .  .  }
   435  .  .  .  .  .  TypeParams: nil
   436  .  .  .  .  .  Assign: -
   437  .  .  .  .  .  Type: *ast.StructType {
   438  .  .  .  .  .  .  Struct: example.go:31:16
   439  .  .  .  .  .  .  Fields: *ast.FieldList {
   440  .  .  .  .  .  .  .  Opening: example.go:31:23
   441  .  .  .  .  .  .  .  List: []*ast.Field (len = 2) {
   442  .  .  .  .  .  .  .  .  0: *ast.Field {
   443  .  .  .  .  .  .  .  .  .  Doc: *ast.CommentGroup {
   444  .  .  .  .  .  .  .  .  .  .  List: []*ast.Comment (len = 71) {
   445  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Comment {
   446  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:32:2
   447  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 基本类型"
   448  .  .  .  .  .  .  .  .  .  .  .  }
   449  .  .  .  .  .  .  .  .  .  .  .  1: *ast.Comment {
   450  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:33:2
   451  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tId int `stmapper:\"id\"`"
   452  .  .  .  .  .  .  .  .  .  .  .  }
   453  .  .  .  .  .  .  .  .  .  .  .  2: *ast.Comment {
   454  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:34:2
   455  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 基本类型指针"
   456  .  .  .  .  .  .  .  .  .  .  .  }
   457  .  .  .  .  .  .  .  .  .  .  .  3: *ast.Comment {
   458  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:35:2
   459  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tIdP *int"
   460  .  .  .  .  .  .  .  .  .  .  .  }
   461  .  .  .  .  .  .  .  .  .  .  .  4: *ast.Comment {
   462  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:36:2
   463  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 底层是基本类型的自定义类型"
   464  .  .  .  .  .  .  .  .  .  .  .  }
   465  .  .  .  .  .  .  .  .  .  .  .  5: *ast.Comment {
   466  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:37:2
   467  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tA TestType `stmapper:\"a\"`"
   468  .  .  .  .  .  .  .  .  .  .  .  }
   469  .  .  .  .  .  .  .  .  .  .  .  6: *ast.Comment {
   470  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:38:2
   471  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 底层是基本类型的自定义类型指针"
   472  .  .  .  .  .  .  .  .  .  .  .  }
   473  .  .  .  .  .  .  .  .  .  .  .  7: *ast.Comment {
   474  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:39:2
   475  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tAA *TestType `stmapper:\"aa\"`"
   476  .  .  .  .  .  .  .  .  .  .  .  }
   477  .  .  .  .  .  .  .  .  .  .  .  8: *ast.Comment {
   478  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:40:2
   479  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 切片类型"
   480  .  .  .  .  .  .  .  .  .  .  .  }
   481  .  .  .  .  .  .  .  .  .  .  .  9: *ast.Comment {
   482  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:41:2
   483  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tAAA []TestType `stmapper:\"aaa\"`"
   484  .  .  .  .  .  .  .  .  .  .  .  }
   485  .  .  .  .  .  .  .  .  .  .  .  10: *ast.Comment {
   486  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:42:2
   487  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为指针的切片"
   488  .  .  .  .  .  .  .  .  .  .  .  }
   489  .  .  .  .  .  .  .  .  .  .  .  11: *ast.Comment {
   490  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:43:2
   491  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tAAAA []*TestType `stmapper:\"aaaa\"`"
   492  .  .  .  .  .  .  .  .  .  .  .  }
   493  .  .  .  .  .  .  .  .  .  .  .  12: *ast.Comment {
   494  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:44:2
   495  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为空接口的切片"
   496  .  .  .  .  .  .  .  .  .  .  .  }
   497  .  .  .  .  .  .  .  .  .  .  .  13: *ast.Comment {
   498  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:45:2
   499  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tAAAAA []interface{}"
   500  .  .  .  .  .  .  .  .  .  .  .  }
   501  .  .  .  .  .  .  .  .  .  .  .  14: *ast.Comment {
   502  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:46:2
   503  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为空接口指针的切片"
   504  .  .  .  .  .  .  .  .  .  .  .  }
   505  .  .  .  .  .  .  .  .  .  .  .  15: *ast.Comment {
   506  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:47:2
   507  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tAAAAAA []*interface{}"
   508  .  .  .  .  .  .  .  .  .  .  .  }
   509  .  .  .  .  .  .  .  .  .  .  .  16: *ast.Comment {
   510  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:48:2
   511  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为空接口别名的切片"
   512  .  .  .  .  .  .  .  .  .  .  .  }
   513  .  .  .  .  .  .  .  .  .  .  .  17: *ast.Comment {
   514  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:49:2
   515  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tAAAAAAA []any"
   516  .  .  .  .  .  .  .  .  .  .  .  }
   517  .  .  .  .  .  .  .  .  .  .  .  18: *ast.Comment {
   518  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:50:2
   519  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为空接口别名指针的切片"
   520  .  .  .  .  .  .  .  .  .  .  .  }
   521  .  .  .  .  .  .  .  .  .  .  .  19: *ast.Comment {
   522  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:51:2
   523  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tAAAAAAAA []*any"
   524  .  .  .  .  .  .  .  .  .  .  .  }
   525  .  .  .  .  .  .  .  .  .  .  .  20: *ast.Comment {
   526  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:52:2
   527  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 结构体类型"
   528  .  .  .  .  .  .  .  .  .  .  .  }
   529  .  .  .  .  .  .  .  .  .  .  .  21: *ast.Comment {
   530  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:53:2
   531  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tB St"
   532  .  .  .  .  .  .  .  .  .  .  .  }
   533  .  .  .  .  .  .  .  .  .  .  .  22: *ast.Comment {
   534  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:54:2
   535  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 结构体类型指针"
   536  .  .  .  .  .  .  .  .  .  .  .  }
   537  .  .  .  .  .  .  .  .  .  .  .  23: *ast.Comment {
   538  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:55:2
   539  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tC *St"
   540  .  .  .  .  .  .  .  .  .  .  .  }
   541  .  .  .  .  .  .  .  .  .  .  .  24: *ast.Comment {
   542  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:56:2
   543  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为基本类型的切片"
   544  .  .  .  .  .  .  .  .  .  .  .  }
   545  .  .  .  .  .  .  .  .  .  .  .  25: *ast.Comment {
   546  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:57:2
   547  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tD []string"
   548  .  .  .  .  .  .  .  .  .  .  .  }
   549  .  .  .  .  .  .  .  .  .  .  .  26: *ast.Comment {
   550  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:58:2
   551  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为基本类型指针的切片"
   552  .  .  .  .  .  .  .  .  .  .  .  }
   553  .  .  .  .  .  .  .  .  .  .  .  27: *ast.Comment {
   554  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:59:2
   555  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tE []*string"
   556  .  .  .  .  .  .  .  .  .  .  .  }
   557  .  .  .  .  .  .  .  .  .  .  .  28: *ast.Comment {
   558  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:60:2
   559  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tEE  *[]string"
   560  .  .  .  .  .  .  .  .  .  .  .  }
   561  .  .  .  .  .  .  .  .  .  .  .  29: *ast.Comment {
   562  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:61:2
   563  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tEEE *[]*string"
   564  .  .  .  .  .  .  .  .  .  .  .  }
   565  .  .  .  .  .  .  .  .  .  .  .  30: *ast.Comment {
   566  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:62:2
   567  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 外部结构体类型"
   568  .  .  .  .  .  .  .  .  .  .  .  }
   569  .  .  .  .  .  .  .  .  .  .  .  31: *ast.Comment {
   570  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:63:2
   571  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tF model.Username"
   572  .  .  .  .  .  .  .  .  .  .  .  }
   573  .  .  .  .  .  .  .  .  .  .  .  32: *ast.Comment {
   574  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:64:2
   575  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 外部结构体指针类型"
   576  .  .  .  .  .  .  .  .  .  .  .  }
   577  .  .  .  .  .  .  .  .  .  .  .  33: *ast.Comment {
   578  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:65:2
   579  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tG *model.Username"
   580  .  .  .  .  .  .  .  .  .  .  .  }
   581  .  .  .  .  .  .  .  .  .  .  .  34: *ast.Comment {
   582  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:66:2
   583  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为外部结构体的切片"
   584  .  .  .  .  .  .  .  .  .  .  .  }
   585  .  .  .  .  .  .  .  .  .  .  .  35: *ast.Comment {
   586  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:67:2
   587  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tH []model.Username"
   588  .  .  .  .  .  .  .  .  .  .  .  }
   589  .  .  .  .  .  .  .  .  .  .  .  36: *ast.Comment {
   590  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:68:2
   591  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 元素为外部结构体指针的切片"
   592  .  .  .  .  .  .  .  .  .  .  .  }
   593  .  .  .  .  .  .  .  .  .  .  .  37: *ast.Comment {
   594  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:69:2
   595  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tI []*model.Username"
   596  .  .  .  .  .  .  .  .  .  .  .  }
   597  .  .  .  .  .  .  .  .  .  .  .  38: *ast.Comment {
   598  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:70:2
   599  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 空接口"
   600  .  .  .  .  .  .  .  .  .  .  .  }
   601  .  .  .  .  .  .  .  .  .  .  .  39: *ast.Comment {
   602  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:71:2
   603  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tJ interface{}"
   604  .  .  .  .  .  .  .  .  .  .  .  }
   605  .  .  .  .  .  .  .  .  .  .  .  40: *ast.Comment {
   606  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:72:2
   607  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 空接口指针"
   608  .  .  .  .  .  .  .  .  .  .  .  }
   609  .  .  .  .  .  .  .  .  .  .  .  41: *ast.Comment {
   610  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:73:2
   611  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tK *interface{}"
   612  .  .  .  .  .  .  .  .  .  .  .  }
   613  .  .  .  .  .  .  .  .  .  .  .  42: *ast.Comment {
   614  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:74:2
   615  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 空接口别名"
   616  .  .  .  .  .  .  .  .  .  .  .  }
   617  .  .  .  .  .  .  .  .  .  .  .  43: *ast.Comment {
   618  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:75:2
   619  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tL any"
   620  .  .  .  .  .  .  .  .  .  .  .  }
   621  .  .  .  .  .  .  .  .  .  .  .  44: *ast.Comment {
   622  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:76:2
   623  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 空接口别名指针"
   624  .  .  .  .  .  .  .  .  .  .  .  }
   625  .  .  .  .  .  .  .  .  .  .  .  45: *ast.Comment {
   626  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:77:2
   627  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tM *any"
   628  .  .  .  .  .  .  .  .  .  .  .  }
   629  .  .  .  .  .  .  .  .  .  .  .  46: *ast.Comment {
   630  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:78:2
   631  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 外部接口"
   632  .  .  .  .  .  .  .  .  .  .  .  }
   633  .  .  .  .  .  .  .  .  .  .  .  47: *ast.Comment {
   634  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:79:2
   635  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tN fmt.Stringer"
   636  .  .  .  .  .  .  .  .  .  .  .  }
   637  .  .  .  .  .  .  .  .  .  .  .  48: *ast.Comment {
   638  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:80:2
   639  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 外部接口指针"
   640  .  .  .  .  .  .  .  .  .  .  .  }
   641  .  .  .  .  .  .  .  .  .  .  .  49: *ast.Comment {
   642  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:81:2
   643  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tO *fmt.Stringer"
   644  .  .  .  .  .  .  .  .  .  .  .  }
   645  .  .  .  .  .  .  .  .  .  .  .  50: *ast.Comment {
   646  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:82:2
   647  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 接口"
   648  .  .  .  .  .  .  .  .  .  .  .  }
   649  .  .  .  .  .  .  .  .  .  .  .  51: *ast.Comment {
   650  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:83:2
   651  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tP Interface"
   652  .  .  .  .  .  .  .  .  .  .  .  }
   653  .  .  .  .  .  .  .  .  .  .  .  52: *ast.Comment {
   654  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:84:2
   655  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 接口指针"
   656  .  .  .  .  .  .  .  .  .  .  .  }
   657  .  .  .  .  .  .  .  .  .  .  .  53: *ast.Comment {
   658  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:85:2
   659  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tQ *Interface"
   660  .  .  .  .  .  .  .  .  .  .  .  }
   661  .  .  .  .  .  .  .  .  .  .  .  54: *ast.Comment {
   662  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:86:2
   663  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部类型定义的基本类型"
   664  .  .  .  .  .  .  .  .  .  .  .  }
   665  .  .  .  .  .  .  .  .  .  .  .  55: *ast.Comment {
   666  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:87:2
   667  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tR MyInteger"
   668  .  .  .  .  .  .  .  .  .  .  .  }
   669  .  .  .  .  .  .  .  .  .  .  .  56: *ast.Comment {
   670  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:88:2
   671  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部类型定义的基本类型指针"
   672  .  .  .  .  .  .  .  .  .  .  .  }
   673  .  .  .  .  .  .  .  .  .  .  .  57: *ast.Comment {
   674  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:89:2
   675  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tS *MyInteger"
   676  .  .  .  .  .  .  .  .  .  .  .  }
   677  .  .  .  .  .  .  .  .  .  .  .  58: *ast.Comment {
   678  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:90:2
   679  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部类型定义的指针基本类型"
   680  .  .  .  .  .  .  .  .  .  .  .  }
   681  .  .  .  .  .  .  .  .  .  .  .  59: *ast.Comment {
   682  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:91:2
   683  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tT MyIntegerPointer"
   684  .  .  .  .  .  .  .  .  .  .  .  }
   685  .  .  .  .  .  .  .  .  .  .  .  60: *ast.Comment {
   686  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:92:2
   687  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部类型定义的指针基本类型指针"
   688  .  .  .  .  .  .  .  .  .  .  .  }
   689  .  .  .  .  .  .  .  .  .  .  .  61: *ast.Comment {
   690  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:93:2
   691  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tU *MyIntegerPointer"
   692  .  .  .  .  .  .  .  .  .  .  .  }
   693  .  .  .  .  .  .  .  .  .  .  .  62: *ast.Comment {
   694  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:94:2
   695  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部结构体定义的类型"
   696  .  .  .  .  .  .  .  .  .  .  .  }
   697  .  .  .  .  .  .  .  .  .  .  .  63: *ast.Comment {
   698  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:95:2
   699  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tV OuterStruct"
   700  .  .  .  .  .  .  .  .  .  .  .  }
   701  .  .  .  .  .  .  .  .  .  .  .  64: *ast.Comment {
   702  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:96:2
   703  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部结构体定义的类型指针"
   704  .  .  .  .  .  .  .  .  .  .  .  }
   705  .  .  .  .  .  .  .  .  .  .  .  65: *ast.Comment {
   706  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:97:2
   707  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tW *OuterStruct"
   708  .  .  .  .  .  .  .  .  .  .  .  }
   709  .  .  .  .  .  .  .  .  .  .  .  66: *ast.Comment {
   710  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:98:2
   711  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部结构体定义的指针类型"
   712  .  .  .  .  .  .  .  .  .  .  .  }
   713  .  .  .  .  .  .  .  .  .  .  .  67: *ast.Comment {
   714  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:99:2
   715  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tX OuterStructPointer"
   716  .  .  .  .  .  .  .  .  .  .  .  }
   717  .  .  .  .  .  .  .  .  .  .  .  68: *ast.Comment {
   718  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:100:2
   719  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 从外部结构体定义的指针类型指针"
   720  .  .  .  .  .  .  .  .  .  .  .  }
   721  .  .  .  .  .  .  .  .  .  .  .  69: *ast.Comment {
   722  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:101:2
   723  .  .  .  .  .  .  .  .  .  .  .  .  Text: "//\tY *OuterStructPointer"
   724  .  .  .  .  .  .  .  .  .  .  .  }
   725  .  .  .  .  .  .  .  .  .  .  .  70: *ast.Comment {
   726  .  .  .  .  .  .  .  .  .  .  .  .  Slash: example.go:102:2
   727  .  .  .  .  .  .  .  .  .  .  .  .  Text: "// 时间类型"
   728  .  .  .  .  .  .  .  .  .  .  .  }
   729  .  .  .  .  .  .  .  .  .  .  }
   730  .  .  .  .  .  .  .  .  .  }
   731  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   732  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   733  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:103:2
   734  .  .  .  .  .  .  .  .  .  .  .  Name: "TT"
   735  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   736  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
   737  .  .  .  .  .  .  .  .  .  .  .  .  Name: "TT"
   738  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 442)
   739  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
   740  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
   741  .  .  .  .  .  .  .  .  .  .  .  }
   742  .  .  .  .  .  .  .  .  .  .  }
   743  .  .  .  .  .  .  .  .  .  }
   744  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
   745  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
   746  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:103:6
   747  .  .  .  .  .  .  .  .  .  .  .  Name: "time"
   748  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
   749  .  .  .  .  .  .  .  .  .  .  }
   750  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   751  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:103:11
   752  .  .  .  .  .  .  .  .  .  .  .  Name: "Time"
   753  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
   754  .  .  .  .  .  .  .  .  .  .  }
   755  .  .  .  .  .  .  .  .  .  }
   756  .  .  .  .  .  .  .  .  .  Tag: nil
   757  .  .  .  .  .  .  .  .  .  Comment: nil
   758  .  .  .  .  .  .  .  .  }
   759  .  .  .  .  .  .  .  .  1: *ast.Field {
   760  .  .  .  .  .  .  .  .  .  Doc: nil
   761  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   762  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   763  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:104:2
   764  .  .  .  .  .  .  .  .  .  .  .  Name: "TTT"
   765  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   766  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
   767  .  .  .  .  .  .  .  .  .  .  .  .  Name: "TTT"
   768  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 759)
   769  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
   770  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
   771  .  .  .  .  .  .  .  .  .  .  .  }
   772  .  .  .  .  .  .  .  .  .  .  }
   773  .  .  .  .  .  .  .  .  .  }
   774  .  .  .  .  .  .  .  .  .  Type: *ast.StarExpr {
   775  .  .  .  .  .  .  .  .  .  .  Star: example.go:104:6
   776  .  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
   777  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
   778  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:104:7
   779  .  .  .  .  .  .  .  .  .  .  .  .  Name: "time"
   780  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
   781  .  .  .  .  .  .  .  .  .  .  .  }
   782  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   783  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:104:12
   784  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Time"
   785  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
   786  .  .  .  .  .  .  .  .  .  .  .  }
   787  .  .  .  .  .  .  .  .  .  .  }
   788  .  .  .  .  .  .  .  .  .  }
   789  .  .  .  .  .  .  .  .  .  Tag: nil
   790  .  .  .  .  .  .  .  .  .  Comment: nil
   791  .  .  .  .  .  .  .  .  }
   792  .  .  .  .  .  .  .  }
   793  .  .  .  .  .  .  .  Closing: example.go:105:1
   794  .  .  .  .  .  .  }
   795  .  .  .  .  .  .  Incomplete: false
   796  .  .  .  .  .  }
   797  .  .  .  .  .  Comment: nil
   798  .  .  .  .  }
   799  .  .  .  }
   800  .  .  .  Rparen: -
   801  .  .  }
   802  .  .  10: *ast.GenDecl {
   803  .  .  .  Doc: nil
   804  .  .  .  TokPos: example.go:107:1
   805  .  .  .  Tok: type
   806  .  .  .  Lparen: -
   807  .  .  .  Specs: []ast.Spec (len = 1) {
   808  .  .  .  .  0: *ast.TypeSpec {
   809  .  .  .  .  .  Doc: nil
   810  .  .  .  .  .  Name: *ast.Ident {
   811  .  .  .  .  .  .  NamePos: example.go:107:6
   812  .  .  .  .  .  .  Name: "User"
   813  .  .  .  .  .  .  Obj: *ast.Object {
   814  .  .  .  .  .  .  .  Kind: type
   815  .  .  .  .  .  .  .  Name: "User"
   816  .  .  .  .  .  .  .  Decl: *(obj @ 808)
   817  .  .  .  .  .  .  .  Data: nil
   818  .  .  .  .  .  .  .  Type: nil
   819  .  .  .  .  .  .  }
   820  .  .  .  .  .  }
   821  .  .  .  .  .  TypeParams: nil
   822  .  .  .  .  .  Assign: -
   823  .  .  .  .  .  Type: *ast.StructType {
   824  .  .  .  .  .  .  Struct: example.go:107:11
   825  .  .  .  .  .  .  Fields: *ast.FieldList {
   826  .  .  .  .  .  .  .  Opening: example.go:107:18
   827  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) {
   828  .  .  .  .  .  .  .  .  0: *ast.Field {
   829  .  .  .  .  .  .  .  .  .  Doc: nil
   830  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   831  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   832  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:108:2
   833  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
   834  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   835  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
   836  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
   837  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 828)
   838  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
   839  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
   840  .  .  .  .  .  .  .  .  .  .  .  }
   841  .  .  .  .  .  .  .  .  .  .  }
   842  .  .  .  .  .  .  .  .  .  }
   843  .  .  .  .  .  .  .  .  .  Type: *ast.Ident {
   844  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:108:5
   845  .  .  .  .  .  .  .  .  .  .  Name: "int"
   846  .  .  .  .  .  .  .  .  .  .  Obj: nil
   847  .  .  .  .  .  .  .  .  .  }
   848  .  .  .  .  .  .  .  .  .  Tag: *ast.BasicLit {
   849  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:108:9
   850  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   851  .  .  .  .  .  .  .  .  .  .  Value: "`stmapper:\"id\"`"
   852  .  .  .  .  .  .  .  .  .  }
   853  .  .  .  .  .  .  .  .  .  Comment: nil
   854  .  .  .  .  .  .  .  .  }
   855  .  .  .  .  .  .  .  }
   856  .  .  .  .  .  .  .  Closing: example.go:109:1
   857  .  .  .  .  .  .  }
   858  .  .  .  .  .  .  Incomplete: false
   859  .  .  .  .  .  }
   860  .  .  .  .  .  Comment: nil
   861  .  .  .  .  }
   862  .  .  .  }
   863  .  .  .  Rparen: -
   864  .  .  }
   865  .  .  11: *ast.GenDecl {
   866  .  .  .  Doc: nil
   867  .  .  .  TokPos: example.go:111:1
   868  .  .  .  Tok: type
   869  .  .  .  Lparen: -
   870  .  .  .  Specs: []ast.Spec (len = 1) {
   871  .  .  .  .  0: *ast.TypeSpec {
   872  .  .  .  .  .  Doc: nil
   873  .  .  .  .  .  Name: *ast.Ident {
   874  .  .  .  .  .  .  NamePos: example.go:111:6
   875  .  .  .  .  .  .  Name: "User1"
   876  .  .  .  .  .  .  Obj: *ast.Object {
   877  .  .  .  .  .  .  .  Kind: type
   878  .  .  .  .  .  .  .  Name: "User1"
   879  .  .  .  .  .  .  .  Decl: *(obj @ 871)
   880  .  .  .  .  .  .  .  Data: nil
   881  .  .  .  .  .  .  .  Type: nil
   882  .  .  .  .  .  .  }
   883  .  .  .  .  .  }
   884  .  .  .  .  .  TypeParams: nil
   885  .  .  .  .  .  Assign: -
   886  .  .  .  .  .  Type: *ast.StructType {
   887  .  .  .  .  .  .  Struct: example.go:111:12
   888  .  .  .  .  .  .  Fields: *ast.FieldList {
   889  .  .  .  .  .  .  .  Opening: example.go:111:19
   890  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) {
   891  .  .  .  .  .  .  .  .  0: *ast.Field {
   892  .  .  .  .  .  .  .  .  .  Doc: nil
   893  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   894  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   895  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:112:2
   896  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
   897  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   898  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
   899  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
   900  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 891)
   901  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
   902  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
   903  .  .  .  .  .  .  .  .  .  .  .  }
   904  .  .  .  .  .  .  .  .  .  .  }
   905  .  .  .  .  .  .  .  .  .  }
   906  .  .  .  .  .  .  .  .  .  Type: *ast.StarExpr {
   907  .  .  .  .  .  .  .  .  .  .  Star: example.go:112:5
   908  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
   909  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:112:6
   910  .  .  .  .  .  .  .  .  .  .  .  Name: "int"
   911  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
   912  .  .  .  .  .  .  .  .  .  .  }
   913  .  .  .  .  .  .  .  .  .  }
   914  .  .  .  .  .  .  .  .  .  Tag: *ast.BasicLit {
   915  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:112:10
   916  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   917  .  .  .  .  .  .  .  .  .  .  Value: "`stmapper:\"id\"`"
   918  .  .  .  .  .  .  .  .  .  }
   919  .  .  .  .  .  .  .  .  .  Comment: nil
   920  .  .  .  .  .  .  .  .  }
   921  .  .  .  .  .  .  .  }
   922  .  .  .  .  .  .  .  Closing: example.go:113:1
   923  .  .  .  .  .  .  }
   924  .  .  .  .  .  .  Incomplete: false
   925  .  .  .  .  .  }
   926  .  .  .  .  .  Comment: nil
   927  .  .  .  .  }
   928  .  .  .  }
   929  .  .  .  Rparen: -
   930  .  .  }
   931  .  .  12: *ast.GenDecl {
   932  .  .  .  Doc: nil
   933  .  .  .  TokPos: example.go:115:1
   934  .  .  .  Tok: type
   935  .  .  .  Lparen: -
   936  .  .  .  Specs: []ast.Spec (len = 1) {
   937  .  .  .  .  0: *ast.TypeSpec {
   938  .  .  .  .  .  Doc: nil
   939  .  .  .  .  .  Name: *ast.Ident {
   940  .  .  .  .  .  .  NamePos: example.go:115:6
   941  .  .  .  .  .  .  Name: "User2"
   942  .  .  .  .  .  .  Obj: *ast.Object {
   943  .  .  .  .  .  .  .  Kind: type
   944  .  .  .  .  .  .  .  Name: "User2"
   945  .  .  .  .  .  .  .  Decl: *(obj @ 937)
   946  .  .  .  .  .  .  .  Data: nil
   947  .  .  .  .  .  .  .  Type: nil
   948  .  .  .  .  .  .  }
   949  .  .  .  .  .  }
   950  .  .  .  .  .  TypeParams: nil
   951  .  .  .  .  .  Assign: -
   952  .  .  .  .  .  Type: *ast.StructType {
   953  .  .  .  .  .  .  Struct: example.go:115:12
   954  .  .  .  .  .  .  Fields: *ast.FieldList {
   955  .  .  .  .  .  .  .  Opening: example.go:115:19
   956  .  .  .  .  .  .  .  List: []*ast.Field (len = 1) {
   957  .  .  .  .  .  .  .  .  0: *ast.Field {
   958  .  .  .  .  .  .  .  .  .  Doc: nil
   959  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
   960  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   961  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:116:2
   962  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
   963  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
   964  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
   965  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
   966  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 957)
   967  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
   968  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
   969  .  .  .  .  .  .  .  .  .  .  .  }
   970  .  .  .  .  .  .  .  .  .  .  }
   971  .  .  .  .  .  .  .  .  .  }
   972  .  .  .  .  .  .  .  .  .  Type: *ast.InterfaceType {
   973  .  .  .  .  .  .  .  .  .  .  Interface: example.go:116:5
   974  .  .  .  .  .  .  .  .  .  .  Methods: *ast.FieldList {
   975  .  .  .  .  .  .  .  .  .  .  .  Opening: example.go:116:14
   976  .  .  .  .  .  .  .  .  .  .  .  List: nil
   977  .  .  .  .  .  .  .  .  .  .  .  Closing: example.go:116:15
   978  .  .  .  .  .  .  .  .  .  .  }
   979  .  .  .  .  .  .  .  .  .  .  Incomplete: false
   980  .  .  .  .  .  .  .  .  .  }
   981  .  .  .  .  .  .  .  .  .  Tag: nil
   982  .  .  .  .  .  .  .  .  .  Comment: nil
   983  .  .  .  .  .  .  .  .  }
   984  .  .  .  .  .  .  .  }
   985  .  .  .  .  .  .  .  Closing: example.go:117:1
   986  .  .  .  .  .  .  }
   987  .  .  .  .  .  .  Incomplete: false
   988  .  .  .  .  .  }
   989  .  .  .  .  .  Comment: nil
   990  .  .  .  .  }
   991  .  .  .  }
   992  .  .  .  Rparen: -
   993  .  .  }
   994  .  .  13: *ast.GenDecl {
   995  .  .  .  Doc: nil
   996  .  .  .  TokPos: example.go:119:1
   997  .  .  .  Tok: type
   998  .  .  .  Lparen: -
   999  .  .  .  Specs: []ast.Spec (len = 1) {
  1000  .  .  .  .  0: *ast.TypeSpec {
  1001  .  .  .  .  .  Doc: nil
  1002  .  .  .  .  .  Name: *ast.Ident {
  1003  .  .  .  .  .  .  NamePos: example.go:119:6
  1004  .  .  .  .  .  .  Name: "UserInfo"
  1005  .  .  .  .  .  .  Obj: *ast.Object {
  1006  .  .  .  .  .  .  .  Kind: type
  1007  .  .  .  .  .  .  .  Name: "UserInfo"
  1008  .  .  .  .  .  .  .  Decl: *(obj @ 1000)
  1009  .  .  .  .  .  .  .  Data: nil
  1010  .  .  .  .  .  .  .  Type: nil
  1011  .  .  .  .  .  .  }
  1012  .  .  .  .  .  }
  1013  .  .  .  .  .  TypeParams: nil
  1014  .  .  .  .  .  Assign: -
  1015  .  .  .  .  .  Type: *ast.StructType {
  1016  .  .  .  .  .  .  Struct: example.go:119:15
  1017  .  .  .  .  .  .  Fields: *ast.FieldList {
  1018  .  .  .  .  .  .  .  Opening: example.go:119:22
  1019  .  .  .  .  .  .  .  List: []*ast.Field (len = 2) {
  1020  .  .  .  .  .  .  .  .  0: *ast.Field {
  1021  .  .  .  .  .  .  .  .  .  Doc: nil
  1022  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1023  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1024  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:120:2
  1025  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  1026  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1027  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
  1028  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  1029  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1020)
  1030  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
  1031  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
  1032  .  .  .  .  .  .  .  .  .  .  .  }
  1033  .  .  .  .  .  .  .  .  .  .  }
  1034  .  .  .  .  .  .  .  .  .  }
  1035  .  .  .  .  .  .  .  .  .  Type: *ast.Ident {
  1036  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:120:11
  1037  .  .  .  .  .  .  .  .  .  .  Name: "int"
  1038  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1039  .  .  .  .  .  .  .  .  .  }
  1040  .  .  .  .  .  .  .  .  .  Tag: *ast.BasicLit {
  1041  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:120:18
  1042  .  .  .  .  .  .  .  .  .  .  Kind: STRING
  1043  .  .  .  .  .  .  .  .  .  .  Value: "`convert:\"id\"`"
  1044  .  .  .  .  .  .  .  .  .  }
  1045  .  .  .  .  .  .  .  .  .  Comment: nil
  1046  .  .  .  .  .  .  .  .  }
  1047  .  .  .  .  .  .  .  .  1: *ast.Field {
  1048  .  .  .  .  .  .  .  .  .  Doc: nil
  1049  .  .  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1050  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1051  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:121:2
  1052  .  .  .  .  .  .  .  .  .  .  .  Name: "Username"
  1053  .  .  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1054  .  .  .  .  .  .  .  .  .  .  .  .  Kind: var
  1055  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Username"
  1056  .  .  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1047)
  1057  .  .  .  .  .  .  .  .  .  .  .  .  Data: nil
  1058  .  .  .  .  .  .  .  .  .  .  .  .  Type: nil
  1059  .  .  .  .  .  .  .  .  .  .  .  }
  1060  .  .  .  .  .  .  .  .  .  .  }
  1061  .  .  .  .  .  .  .  .  .  }
  1062  .  .  .  .  .  .  .  .  .  Type: *ast.Ident {
  1063  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:121:11
  1064  .  .  .  .  .  .  .  .  .  .  Name: "string"
  1065  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1066  .  .  .  .  .  .  .  .  .  }
  1067  .  .  .  .  .  .  .  .  .  Tag: *ast.BasicLit {
  1068  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:121:18
  1069  .  .  .  .  .  .  .  .  .  .  Kind: STRING
  1070  .  .  .  .  .  .  .  .  .  .  Value: "`convert:\"username\"`"
  1071  .  .  .  .  .  .  .  .  .  }
  1072  .  .  .  .  .  .  .  .  .  Comment: nil
  1073  .  .  .  .  .  .  .  .  }
  1074  .  .  .  .  .  .  .  }
  1075  .  .  .  .  .  .  .  Closing: example.go:122:1
  1076  .  .  .  .  .  .  }
  1077  .  .  .  .  .  .  Incomplete: false
  1078  .  .  .  .  .  }
  1079  .  .  .  .  .  Comment: nil
  1080  .  .  .  .  }
  1081  .  .  .  }
  1082  .  .  .  Rparen: -
  1083  .  .  }
  1084  .  .  14: *ast.FuncDecl {
  1085  .  .  .  Doc: nil
  1086  .  .  .  Recv: nil
  1087  .  .  .  Name: *ast.Ident {
  1088  .  .  .  .  NamePos: example.go:124:6
  1089  .  .  .  .  Name: "BuildParseInt"
  1090  .  .  .  .  Obj: *ast.Object {
  1091  .  .  .  .  .  Kind: func
  1092  .  .  .  .  .  Name: "BuildParseInt"
  1093  .  .  .  .  .  Decl: *(obj @ 1084)
  1094  .  .  .  .  .  Data: nil
  1095  .  .  .  .  .  Type: nil
  1096  .  .  .  .  }
  1097  .  .  .  }
  1098  .  .  .  Type: *ast.FuncType {
  1099  .  .  .  .  Func: example.go:124:1
  1100  .  .  .  .  TypeParams: nil
  1101  .  .  .  .  Params: *ast.FieldList {
  1102  .  .  .  .  .  Opening: example.go:124:19
  1103  .  .  .  .  .  List: nil
  1104  .  .  .  .  .  Closing: example.go:124:20
  1105  .  .  .  .  }
  1106  .  .  .  .  Results: nil
  1107  .  .  .  }
  1108  .  .  .  Body: *ast.BlockStmt {
  1109  .  .  .  .  Lbrace: example.go:124:22
  1110  .  .  .  .  List: []ast.Stmt (len = 3) {
  1111  .  .  .  .  .  0: *ast.AssignStmt {
  1112  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  1113  .  .  .  .  .  .  .  0: *ast.Ident {
  1114  .  .  .  .  .  .  .  .  NamePos: example.go:125:2
  1115  .  .  .  .  .  .  .  .  Name: "s"
  1116  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1117  .  .  .  .  .  .  .  .  .  Kind: var
  1118  .  .  .  .  .  .  .  .  .  Name: "s"
  1119  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1111)
  1120  .  .  .  .  .  .  .  .  .  Data: nil
  1121  .  .  .  .  .  .  .  .  .  Type: nil
  1122  .  .  .  .  .  .  .  .  }
  1123  .  .  .  .  .  .  .  }
  1124  .  .  .  .  .  .  }
  1125  .  .  .  .  .  .  TokPos: example.go:125:4
  1126  .  .  .  .  .  .  Tok: :=
  1127  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  1128  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1129  .  .  .  .  .  .  .  .  ValuePos: example.go:125:7
  1130  .  .  .  .  .  .  .  .  Kind: STRING
  1131  .  .  .  .  .  .  .  .  Value: "\"123\""
  1132  .  .  .  .  .  .  .  }
  1133  .  .  .  .  .  .  }
  1134  .  .  .  .  .  }
  1135  .  .  .  .  .  1: *ast.AssignStmt {
  1136  .  .  .  .  .  .  Lhs: []ast.Expr (len = 2) {
  1137  .  .  .  .  .  .  .  0: *ast.Ident {
  1138  .  .  .  .  .  .  .  .  NamePos: example.go:126:2
  1139  .  .  .  .  .  .  .  .  Name: "n"
  1140  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1141  .  .  .  .  .  .  .  .  .  Kind: var
  1142  .  .  .  .  .  .  .  .  .  Name: "n"
  1143  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1135)
  1144  .  .  .  .  .  .  .  .  .  Data: nil
  1145  .  .  .  .  .  .  .  .  .  Type: nil
  1146  .  .  .  .  .  .  .  .  }
  1147  .  .  .  .  .  .  .  }
  1148  .  .  .  .  .  .  .  1: *ast.Ident {
  1149  .  .  .  .  .  .  .  .  NamePos: example.go:126:5
  1150  .  .  .  .  .  .  .  .  Name: "_"
  1151  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1152  .  .  .  .  .  .  .  .  .  Kind: var
  1153  .  .  .  .  .  .  .  .  .  Name: "_"
  1154  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1135)
  1155  .  .  .  .  .  .  .  .  .  Data: nil
  1156  .  .  .  .  .  .  .  .  .  Type: nil
  1157  .  .  .  .  .  .  .  .  }
  1158  .  .  .  .  .  .  .  }
  1159  .  .  .  .  .  .  }
  1160  .  .  .  .  .  .  TokPos: example.go:126:7
  1161  .  .  .  .  .  .  Tok: :=
  1162  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  1163  .  .  .  .  .  .  .  0: *ast.CallExpr {
  1164  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1165  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1166  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:126:10
  1167  .  .  .  .  .  .  .  .  .  .  Name: "strconv"
  1168  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1169  .  .  .  .  .  .  .  .  .  }
  1170  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1171  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:126:18
  1172  .  .  .  .  .  .  .  .  .  .  Name: "ParseInt"
  1173  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1174  .  .  .  .  .  .  .  .  .  }
  1175  .  .  .  .  .  .  .  .  }
  1176  .  .  .  .  .  .  .  .  Lparen: example.go:126:26
  1177  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 3) {
  1178  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1179  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:126:27
  1180  .  .  .  .  .  .  .  .  .  .  Name: "s"
  1181  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1116)
  1182  .  .  .  .  .  .  .  .  .  }
  1183  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
  1184  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:126:30
  1185  .  .  .  .  .  .  .  .  .  .  Kind: INT
  1186  .  .  .  .  .  .  .  .  .  .  Value: "10"
  1187  .  .  .  .  .  .  .  .  .  }
  1188  .  .  .  .  .  .  .  .  .  2: *ast.BasicLit {
  1189  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:126:34
  1190  .  .  .  .  .  .  .  .  .  .  Kind: INT
  1191  .  .  .  .  .  .  .  .  .  .  Value: "64"
  1192  .  .  .  .  .  .  .  .  .  }
  1193  .  .  .  .  .  .  .  .  }
  1194  .  .  .  .  .  .  .  .  Ellipsis: -
  1195  .  .  .  .  .  .  .  .  Rparen: example.go:126:36
  1196  .  .  .  .  .  .  .  }
  1197  .  .  .  .  .  .  }
  1198  .  .  .  .  .  }
  1199  .  .  .  .  .  2: *ast.ExprStmt {
  1200  .  .  .  .  .  .  X: *ast.CallExpr {
  1201  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1202  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1203  .  .  .  .  .  .  .  .  .  NamePos: example.go:127:2
  1204  .  .  .  .  .  .  .  .  .  Name: "fmt"
  1205  .  .  .  .  .  .  .  .  .  Obj: nil
  1206  .  .  .  .  .  .  .  .  }
  1207  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1208  .  .  .  .  .  .  .  .  .  NamePos: example.go:127:6
  1209  .  .  .  .  .  .  .  .  .  Name: "Println"
  1210  .  .  .  .  .  .  .  .  .  Obj: nil
  1211  .  .  .  .  .  .  .  .  }
  1212  .  .  .  .  .  .  .  }
  1213  .  .  .  .  .  .  .  Lparen: example.go:127:13
  1214  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1215  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1216  .  .  .  .  .  .  .  .  .  NamePos: example.go:127:14
  1217  .  .  .  .  .  .  .  .  .  Name: "n"
  1218  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1140)
  1219  .  .  .  .  .  .  .  .  }
  1220  .  .  .  .  .  .  .  }
  1221  .  .  .  .  .  .  .  Ellipsis: -
  1222  .  .  .  .  .  .  .  Rparen: example.go:127:15
  1223  .  .  .  .  .  .  }
  1224  .  .  .  .  .  }
  1225  .  .  .  .  }
  1226  .  .  .  .  Rbrace: example.go:128:1
  1227  .  .  .  }
  1228  .  .  }
  1229  .  .  15: *ast.FuncDecl {
  1230  .  .  .  Doc: *ast.CommentGroup {
  1231  .  .  .  .  List: []*ast.Comment (len = 1) {
  1232  .  .  .  .  .  0: *ast.Comment {
  1233  .  .  .  .  .  .  Slash: example.go:130:1
  1234  .  .  .  .  .  .  Text: "// Conv3 将结构体id和username映射到类型为User的结构体，并返回"
  1235  .  .  .  .  .  }
  1236  .  .  .  .  }
  1237  .  .  .  }
  1238  .  .  .  Recv: nil
  1239  .  .  .  Name: *ast.Ident {
  1240  .  .  .  .  NamePos: example.go:131:6
  1241  .  .  .  .  Name: "Conv3"
  1242  .  .  .  .  Obj: *ast.Object {
  1243  .  .  .  .  .  Kind: func
  1244  .  .  .  .  .  Name: "Conv3"
  1245  .  .  .  .  .  Decl: *(obj @ 1229)
  1246  .  .  .  .  .  Data: nil
  1247  .  .  .  .  .  Type: nil
  1248  .  .  .  .  }
  1249  .  .  .  }
  1250  .  .  .  Type: *ast.FuncType {
  1251  .  .  .  .  Func: example.go:131:1
  1252  .  .  .  .  TypeParams: nil
  1253  .  .  .  .  Params: *ast.FieldList {
  1254  .  .  .  .  .  Opening: example.go:131:11
  1255  .  .  .  .  .  List: []*ast.Field (len = 2) {
  1256  .  .  .  .  .  .  0: *ast.Field {
  1257  .  .  .  .  .  .  .  Doc: nil
  1258  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1259  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1260  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:12
  1261  .  .  .  .  .  .  .  .  .  Name: "id"
  1262  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1263  .  .  .  .  .  .  .  .  .  .  Kind: var
  1264  .  .  .  .  .  .  .  .  .  .  Name: "id"
  1265  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1256)
  1266  .  .  .  .  .  .  .  .  .  .  Data: nil
  1267  .  .  .  .  .  .  .  .  .  .  Type: nil
  1268  .  .  .  .  .  .  .  .  .  }
  1269  .  .  .  .  .  .  .  .  }
  1270  .  .  .  .  .  .  .  }
  1271  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  1272  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1273  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:15
  1274  .  .  .  .  .  .  .  .  .  Name: "model"
  1275  .  .  .  .  .  .  .  .  .  Obj: nil
  1276  .  .  .  .  .  .  .  .  }
  1277  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1278  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:21
  1279  .  .  .  .  .  .  .  .  .  Name: "Id"
  1280  .  .  .  .  .  .  .  .  .  Obj: nil
  1281  .  .  .  .  .  .  .  .  }
  1282  .  .  .  .  .  .  .  }
  1283  .  .  .  .  .  .  .  Tag: nil
  1284  .  .  .  .  .  .  .  Comment: nil
  1285  .  .  .  .  .  .  }
  1286  .  .  .  .  .  .  1: *ast.Field {
  1287  .  .  .  .  .  .  .  Doc: nil
  1288  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1289  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1290  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:25
  1291  .  .  .  .  .  .  .  .  .  Name: "username"
  1292  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1293  .  .  .  .  .  .  .  .  .  .  Kind: var
  1294  .  .  .  .  .  .  .  .  .  .  Name: "username"
  1295  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1286)
  1296  .  .  .  .  .  .  .  .  .  .  Data: nil
  1297  .  .  .  .  .  .  .  .  .  .  Type: nil
  1298  .  .  .  .  .  .  .  .  .  }
  1299  .  .  .  .  .  .  .  .  }
  1300  .  .  .  .  .  .  .  }
  1301  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  1302  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1303  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:34
  1304  .  .  .  .  .  .  .  .  .  Name: "model"
  1305  .  .  .  .  .  .  .  .  .  Obj: nil
  1306  .  .  .  .  .  .  .  .  }
  1307  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1308  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:40
  1309  .  .  .  .  .  .  .  .  .  Name: "Username"
  1310  .  .  .  .  .  .  .  .  .  Obj: nil
  1311  .  .  .  .  .  .  .  .  }
  1312  .  .  .  .  .  .  .  }
  1313  .  .  .  .  .  .  .  Tag: nil
  1314  .  .  .  .  .  .  .  Comment: nil
  1315  .  .  .  .  .  .  }
  1316  .  .  .  .  .  }
  1317  .  .  .  .  .  Closing: example.go:131:48
  1318  .  .  .  .  }
  1319  .  .  .  .  Results: *ast.FieldList {
  1320  .  .  .  .  .  Opening: example.go:131:50
  1321  .  .  .  .  .  List: []*ast.Field (len = 1) {
  1322  .  .  .  .  .  .  0: *ast.Field {
  1323  .  .  .  .  .  .  .  Doc: nil
  1324  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1325  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1326  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:51
  1327  .  .  .  .  .  .  .  .  .  Name: "u"
  1328  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1329  .  .  .  .  .  .  .  .  .  .  Kind: var
  1330  .  .  .  .  .  .  .  .  .  .  Name: "u"
  1331  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1322)
  1332  .  .  .  .  .  .  .  .  .  .  Data: nil
  1333  .  .  .  .  .  .  .  .  .  .  Type: nil
  1334  .  .  .  .  .  .  .  .  .  }
  1335  .  .  .  .  .  .  .  .  }
  1336  .  .  .  .  .  .  .  }
  1337  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  1338  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1339  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:53
  1340  .  .  .  .  .  .  .  .  .  Name: "model"
  1341  .  .  .  .  .  .  .  .  .  Obj: nil
  1342  .  .  .  .  .  .  .  .  }
  1343  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1344  .  .  .  .  .  .  .  .  .  NamePos: example.go:131:59
  1345  .  .  .  .  .  .  .  .  .  Name: "User"
  1346  .  .  .  .  .  .  .  .  .  Obj: nil
  1347  .  .  .  .  .  .  .  .  }
  1348  .  .  .  .  .  .  .  }
  1349  .  .  .  .  .  .  .  Tag: nil
  1350  .  .  .  .  .  .  .  Comment: nil
  1351  .  .  .  .  .  .  }
  1352  .  .  .  .  .  }
  1353  .  .  .  .  .  Closing: example.go:131:63
  1354  .  .  .  .  }
  1355  .  .  .  }
  1356  .  .  .  Body: *ast.BlockStmt {
  1357  .  .  .  .  Lbrace: example.go:131:65
  1358  .  .  .  .  List: []ast.Stmt (len = 2) {
  1359  .  .  .  .  .  0: *ast.ExprStmt {
  1360  .  .  .  .  .  .  X: *ast.CallExpr {
  1361  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1362  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1363  .  .  .  .  .  .  .  .  .  NamePos: example.go:132:2
  1364  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  1365  .  .  .  .  .  .  .  .  .  Obj: nil
  1366  .  .  .  .  .  .  .  .  }
  1367  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1368  .  .  .  .  .  .  .  .  .  NamePos: example.go:132:11
  1369  .  .  .  .  .  .  .  .  .  Name: "ByName"
  1370  .  .  .  .  .  .  .  .  .  Obj: nil
  1371  .  .  .  .  .  .  .  .  }
  1372  .  .  .  .  .  .  .  }
  1373  .  .  .  .  .  .  .  Lparen: example.go:132:17
  1374  .  .  .  .  .  .  .  Args: nil
  1375  .  .  .  .  .  .  .  Ellipsis: -
  1376  .  .  .  .  .  .  .  Rparen: example.go:132:18
  1377  .  .  .  .  .  .  }
  1378  .  .  .  .  .  }
  1379  .  .  .  .  .  1: *ast.ExprStmt {
  1380  .  .  .  .  .  .  X: *ast.CallExpr {
  1381  .  .  .  .  .  .  .  Fun: *ast.Ident {
  1382  .  .  .  .  .  .  .  .  NamePos: example.go:133:2
  1383  .  .  .  .  .  .  .  .  Name: "panic"
  1384  .  .  .  .  .  .  .  .  Obj: nil
  1385  .  .  .  .  .  .  .  }
  1386  .  .  .  .  .  .  .  Lparen: example.go:133:7
  1387  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1388  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  1389  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1390  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1391  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:133:8
  1392  .  .  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  1393  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1394  .  .  .  .  .  .  .  .  .  .  }
  1395  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1396  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:133:17
  1397  .  .  .  .  .  .  .  .  .  .  .  Name: "BuildMappingFrom"
  1398  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1399  .  .  .  .  .  .  .  .  .  .  }
  1400  .  .  .  .  .  .  .  .  .  }
  1401  .  .  .  .  .  .  .  .  .  Lparen: example.go:133:33
  1402  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  1403  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1404  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:133:34
  1405  .  .  .  .  .  .  .  .  .  .  .  Name: "id"
  1406  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1262)
  1407  .  .  .  .  .  .  .  .  .  .  }
  1408  .  .  .  .  .  .  .  .  .  .  1: *ast.Ident {
  1409  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:133:38
  1410  .  .  .  .  .  .  .  .  .  .  .  Name: "username"
  1411  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1292)
  1412  .  .  .  .  .  .  .  .  .  .  }
  1413  .  .  .  .  .  .  .  .  .  }
  1414  .  .  .  .  .  .  .  .  .  Ellipsis: -
  1415  .  .  .  .  .  .  .  .  .  Rparen: example.go:133:46
  1416  .  .  .  .  .  .  .  .  }
  1417  .  .  .  .  .  .  .  }
  1418  .  .  .  .  .  .  .  Ellipsis: -
  1419  .  .  .  .  .  .  .  Rparen: example.go:133:47
  1420  .  .  .  .  .  .  }
  1421  .  .  .  .  .  }
  1422  .  .  .  .  }
  1423  .  .  .  .  Rbrace: example.go:134:1
  1424  .  .  .  }
  1425  .  .  }
  1426  .  .  16: *ast.FuncDecl {
  1427  .  .  .  Doc: nil
  1428  .  .  .  Recv: *ast.FieldList {
  1429  .  .  .  .  Opening: example.go:136:6
  1430  .  .  .  .  List: []*ast.Field (len = 1) {
  1431  .  .  .  .  .  0: *ast.Field {
  1432  .  .  .  .  .  .  Doc: nil
  1433  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1434  .  .  .  .  .  .  .  0: *ast.Ident {
  1435  .  .  .  .  .  .  .  .  NamePos: example.go:136:7
  1436  .  .  .  .  .  .  .  .  Name: "u"
  1437  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1438  .  .  .  .  .  .  .  .  .  Kind: var
  1439  .  .  .  .  .  .  .  .  .  Name: "u"
  1440  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1431)
  1441  .  .  .  .  .  .  .  .  .  Data: nil
  1442  .  .  .  .  .  .  .  .  .  Type: nil
  1443  .  .  .  .  .  .  .  .  }
  1444  .  .  .  .  .  .  .  }
  1445  .  .  .  .  .  .  }
  1446  .  .  .  .  .  .  Type: *ast.StarExpr {
  1447  .  .  .  .  .  .  .  Star: example.go:136:9
  1448  .  .  .  .  .  .  .  X: *ast.Ident {
  1449  .  .  .  .  .  .  .  .  NamePos: example.go:136:10
  1450  .  .  .  .  .  .  .  .  Name: "UserInfo"
  1451  .  .  .  .  .  .  .  .  Obj: *(obj @ 1005)
  1452  .  .  .  .  .  .  .  }
  1453  .  .  .  .  .  .  }
  1454  .  .  .  .  .  .  Tag: nil
  1455  .  .  .  .  .  .  Comment: nil
  1456  .  .  .  .  .  }
  1457  .  .  .  .  }
  1458  .  .  .  .  Closing: example.go:136:18
  1459  .  .  .  }
  1460  .  .  .  Name: *ast.Ident {
  1461  .  .  .  .  NamePos: example.go:136:20
  1462  .  .  .  .  Name: "ToUser"
  1463  .  .  .  .  Obj: nil
  1464  .  .  .  }
  1465  .  .  .  Type: *ast.FuncType {
  1466  .  .  .  .  Func: example.go:136:1
  1467  .  .  .  .  TypeParams: nil
  1468  .  .  .  .  Params: *ast.FieldList {
  1469  .  .  .  .  .  Opening: example.go:136:26
  1470  .  .  .  .  .  List: nil
  1471  .  .  .  .  .  Closing: example.go:136:27
  1472  .  .  .  .  }
  1473  .  .  .  .  Results: *ast.FieldList {
  1474  .  .  .  .  .  Opening: -
  1475  .  .  .  .  .  List: []*ast.Field (len = 1) {
  1476  .  .  .  .  .  .  0: *ast.Field {
  1477  .  .  .  .  .  .  .  Doc: nil
  1478  .  .  .  .  .  .  .  Names: nil
  1479  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  1480  .  .  .  .  .  .  .  .  Star: example.go:136:29
  1481  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1482  .  .  .  .  .  .  .  .  .  NamePos: example.go:136:30
  1483  .  .  .  .  .  .  .  .  .  Name: "User"
  1484  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 813)
  1485  .  .  .  .  .  .  .  .  }
  1486  .  .  .  .  .  .  .  }
  1487  .  .  .  .  .  .  .  Tag: nil
  1488  .  .  .  .  .  .  .  Comment: nil
  1489  .  .  .  .  .  .  }
  1490  .  .  .  .  .  }
  1491  .  .  .  .  .  Closing: -
  1492  .  .  .  .  }
  1493  .  .  .  }
  1494  .  .  .  Body: *ast.BlockStmt {
  1495  .  .  .  .  Lbrace: example.go:136:35
  1496  .  .  .  .  List: []ast.Stmt (len = 2) {
  1497  .  .  .  .  .  0: *ast.ExprStmt {
  1498  .  .  .  .  .  .  X: *ast.CallExpr {
  1499  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1500  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1501  .  .  .  .  .  .  .  .  .  NamePos: example.go:137:2
  1502  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  1503  .  .  .  .  .  .  .  .  .  Obj: nil
  1504  .  .  .  .  .  .  .  .  }
  1505  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1506  .  .  .  .  .  .  .  .  .  NamePos: example.go:137:11
  1507  .  .  .  .  .  .  .  .  .  Name: "ByTag"
  1508  .  .  .  .  .  .  .  .  .  Obj: nil
  1509  .  .  .  .  .  .  .  .  }
  1510  .  .  .  .  .  .  .  }
  1511  .  .  .  .  .  .  .  Lparen: example.go:137:16
  1512  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1513  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
  1514  .  .  .  .  .  .  .  .  .  ValuePos: example.go:137:17
  1515  .  .  .  .  .  .  .  .  .  Kind: STRING
  1516  .  .  .  .  .  .  .  .  .  Value: "\"convert\""
  1517  .  .  .  .  .  .  .  .  }
  1518  .  .  .  .  .  .  .  }
  1519  .  .  .  .  .  .  .  Ellipsis: -
  1520  .  .  .  .  .  .  .  Rparen: example.go:137:26
  1521  .  .  .  .  .  .  }
  1522  .  .  .  .  .  }
  1523  .  .  .  .  .  1: *ast.ExprStmt {
  1524  .  .  .  .  .  .  X: *ast.CallExpr {
  1525  .  .  .  .  .  .  .  Fun: *ast.Ident {
  1526  .  .  .  .  .  .  .  .  NamePos: example.go:138:2
  1527  .  .  .  .  .  .  .  .  Name: "panic"
  1528  .  .  .  .  .  .  .  .  Obj: nil
  1529  .  .  .  .  .  .  .  }
  1530  .  .  .  .  .  .  .  Lparen: example.go:138:7
  1531  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1532  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  1533  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1534  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1535  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:138:8
  1536  .  .  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  1537  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1538  .  .  .  .  .  .  .  .  .  .  }
  1539  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1540  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:138:17
  1541  .  .  .  .  .  .  .  .  .  .  .  Name: "BuildMappingFrom"
  1542  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1543  .  .  .  .  .  .  .  .  .  .  }
  1544  .  .  .  .  .  .  .  .  .  }
  1545  .  .  .  .  .  .  .  .  .  Lparen: example.go:138:33
  1546  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1547  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1548  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:138:34
  1549  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  1550  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1437)
  1551  .  .  .  .  .  .  .  .  .  .  }
  1552  .  .  .  .  .  .  .  .  .  }
  1553  .  .  .  .  .  .  .  .  .  Ellipsis: -
  1554  .  .  .  .  .  .  .  .  .  Rparen: example.go:138:35
  1555  .  .  .  .  .  .  .  .  }
  1556  .  .  .  .  .  .  .  }
  1557  .  .  .  .  .  .  .  Ellipsis: -
  1558  .  .  .  .  .  .  .  Rparen: example.go:138:36
  1559  .  .  .  .  .  .  }
  1560  .  .  .  .  .  }
  1561  .  .  .  .  }
  1562  .  .  .  .  Rbrace: example.go:139:1
  1563  .  .  .  }
  1564  .  .  }
  1565  .  .  17: *ast.FuncDecl {
  1566  .  .  .  Doc: *ast.CommentGroup {
  1567  .  .  .  .  List: []*ast.Comment (len = 1) {
  1568  .  .  .  .  .  0: *ast.Comment {
  1569  .  .  .  .  .  .  Slash: example.go:141:1
  1570  .  .  .  .  .  .  Text: "// Conv4 将结构体id和username映射到类型为User的结构体"
  1571  .  .  .  .  .  }
  1572  .  .  .  .  }
  1573  .  .  .  }
  1574  .  .  .  Recv: nil
  1575  .  .  .  Name: *ast.Ident {
  1576  .  .  .  .  NamePos: example.go:142:6
  1577  .  .  .  .  Name: "Conv4"
  1578  .  .  .  .  Obj: *ast.Object {
  1579  .  .  .  .  .  Kind: func
  1580  .  .  .  .  .  Name: "Conv4"
  1581  .  .  .  .  .  Decl: *(obj @ 1565)
  1582  .  .  .  .  .  Data: nil
  1583  .  .  .  .  .  Type: nil
  1584  .  .  .  .  }
  1585  .  .  .  }
  1586  .  .  .  Type: *ast.FuncType {
  1587  .  .  .  .  Func: example.go:142:1
  1588  .  .  .  .  TypeParams: nil
  1589  .  .  .  .  Params: *ast.FieldList {
  1590  .  .  .  .  .  Opening: example.go:142:11
  1591  .  .  .  .  .  List: []*ast.Field (len = 2) {
  1592  .  .  .  .  .  .  0: *ast.Field {
  1593  .  .  .  .  .  .  .  Doc: nil
  1594  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1595  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1596  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:12
  1597  .  .  .  .  .  .  .  .  .  Name: "id"
  1598  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1599  .  .  .  .  .  .  .  .  .  .  Kind: var
  1600  .  .  .  .  .  .  .  .  .  .  Name: "id"
  1601  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1592)
  1602  .  .  .  .  .  .  .  .  .  .  Data: nil
  1603  .  .  .  .  .  .  .  .  .  .  Type: nil
  1604  .  .  .  .  .  .  .  .  .  }
  1605  .  .  .  .  .  .  .  .  }
  1606  .  .  .  .  .  .  .  }
  1607  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  1608  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1609  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:15
  1610  .  .  .  .  .  .  .  .  .  Name: "model"
  1611  .  .  .  .  .  .  .  .  .  Obj: nil
  1612  .  .  .  .  .  .  .  .  }
  1613  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1614  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:21
  1615  .  .  .  .  .  .  .  .  .  Name: "Id"
  1616  .  .  .  .  .  .  .  .  .  Obj: nil
  1617  .  .  .  .  .  .  .  .  }
  1618  .  .  .  .  .  .  .  }
  1619  .  .  .  .  .  .  .  Tag: nil
  1620  .  .  .  .  .  .  .  Comment: nil
  1621  .  .  .  .  .  .  }
  1622  .  .  .  .  .  .  1: *ast.Field {
  1623  .  .  .  .  .  .  .  Doc: nil
  1624  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1625  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1626  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:25
  1627  .  .  .  .  .  .  .  .  .  Name: "username"
  1628  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1629  .  .  .  .  .  .  .  .  .  .  Kind: var
  1630  .  .  .  .  .  .  .  .  .  .  Name: "username"
  1631  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1622)
  1632  .  .  .  .  .  .  .  .  .  .  Data: nil
  1633  .  .  .  .  .  .  .  .  .  .  Type: nil
  1634  .  .  .  .  .  .  .  .  .  }
  1635  .  .  .  .  .  .  .  .  }
  1636  .  .  .  .  .  .  .  }
  1637  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  1638  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1639  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:34
  1640  .  .  .  .  .  .  .  .  .  Name: "model"
  1641  .  .  .  .  .  .  .  .  .  Obj: nil
  1642  .  .  .  .  .  .  .  .  }
  1643  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1644  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:40
  1645  .  .  .  .  .  .  .  .  .  Name: "Username"
  1646  .  .  .  .  .  .  .  .  .  Obj: nil
  1647  .  .  .  .  .  .  .  .  }
  1648  .  .  .  .  .  .  .  }
  1649  .  .  .  .  .  .  .  Tag: nil
  1650  .  .  .  .  .  .  .  Comment: nil
  1651  .  .  .  .  .  .  }
  1652  .  .  .  .  .  }
  1653  .  .  .  .  .  Closing: example.go:142:48
  1654  .  .  .  .  }
  1655  .  .  .  .  Results: *ast.FieldList {
  1656  .  .  .  .  .  Opening: example.go:142:50
  1657  .  .  .  .  .  List: []*ast.Field (len = 1) {
  1658  .  .  .  .  .  .  0: *ast.Field {
  1659  .  .  .  .  .  .  .  Doc: nil
  1660  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1661  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1662  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:51
  1663  .  .  .  .  .  .  .  .  .  Name: "u"
  1664  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1665  .  .  .  .  .  .  .  .  .  .  Kind: var
  1666  .  .  .  .  .  .  .  .  .  .  Name: "u"
  1667  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1658)
  1668  .  .  .  .  .  .  .  .  .  .  Data: nil
  1669  .  .  .  .  .  .  .  .  .  .  Type: nil
  1670  .  .  .  .  .  .  .  .  .  }
  1671  .  .  .  .  .  .  .  .  }
  1672  .  .  .  .  .  .  .  }
  1673  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  1674  .  .  .  .  .  .  .  .  Star: example.go:142:53
  1675  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  1676  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1677  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:54
  1678  .  .  .  .  .  .  .  .  .  .  Name: "model"
  1679  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1680  .  .  .  .  .  .  .  .  .  }
  1681  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1682  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:142:60
  1683  .  .  .  .  .  .  .  .  .  .  Name: "User"
  1684  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1685  .  .  .  .  .  .  .  .  .  }
  1686  .  .  .  .  .  .  .  .  }
  1687  .  .  .  .  .  .  .  }
  1688  .  .  .  .  .  .  .  Tag: nil
  1689  .  .  .  .  .  .  .  Comment: nil
  1690  .  .  .  .  .  .  }
  1691  .  .  .  .  .  }
  1692  .  .  .  .  .  Closing: example.go:142:64
  1693  .  .  .  .  }
  1694  .  .  .  }
  1695  .  .  .  Body: *ast.BlockStmt {
  1696  .  .  .  .  Lbrace: example.go:142:66
  1697  .  .  .  .  List: []ast.Stmt (len = 1) {
  1698  .  .  .  .  .  0: *ast.ExprStmt {
  1699  .  .  .  .  .  .  X: *ast.CallExpr {
  1700  .  .  .  .  .  .  .  Fun: *ast.Ident {
  1701  .  .  .  .  .  .  .  .  NamePos: example.go:143:2
  1702  .  .  .  .  .  .  .  .  Name: "panic"
  1703  .  .  .  .  .  .  .  .  Obj: nil
  1704  .  .  .  .  .  .  .  }
  1705  .  .  .  .  .  .  .  Lparen: example.go:143:7
  1706  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1707  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  1708  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1709  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1710  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:143:8
  1711  .  .  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  1712  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1713  .  .  .  .  .  .  .  .  .  .  }
  1714  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1715  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:143:17
  1716  .  .  .  .  .  .  .  .  .  .  .  Name: "BuildMappingFrom"
  1717  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1718  .  .  .  .  .  .  .  .  .  .  }
  1719  .  .  .  .  .  .  .  .  .  }
  1720  .  .  .  .  .  .  .  .  .  Lparen: example.go:143:33
  1721  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  1722  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1723  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:143:34
  1724  .  .  .  .  .  .  .  .  .  .  .  Name: "id"
  1725  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1598)
  1726  .  .  .  .  .  .  .  .  .  .  }
  1727  .  .  .  .  .  .  .  .  .  .  1: *ast.Ident {
  1728  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:143:38
  1729  .  .  .  .  .  .  .  .  .  .  .  Name: "username"
  1730  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1628)
  1731  .  .  .  .  .  .  .  .  .  .  }
  1732  .  .  .  .  .  .  .  .  .  }
  1733  .  .  .  .  .  .  .  .  .  Ellipsis: -
  1734  .  .  .  .  .  .  .  .  .  Rparen: example.go:143:46
  1735  .  .  .  .  .  .  .  .  }
  1736  .  .  .  .  .  .  .  }
  1737  .  .  .  .  .  .  .  Ellipsis: -
  1738  .  .  .  .  .  .  .  Rparen: example.go:143:47
  1739  .  .  .  .  .  .  }
  1740  .  .  .  .  .  }
  1741  .  .  .  .  }
  1742  .  .  .  .  Rbrace: example.go:144:1
  1743  .  .  .  }
  1744  .  .  }
  1745  .  .  18: *ast.FuncDecl {
  1746  .  .  .  Doc: nil
  1747  .  .  .  Recv: nil
  1748  .  .  .  Name: *ast.Ident {
  1749  .  .  .  .  NamePos: example.go:146:6
  1750  .  .  .  .  Name: "Conv"
  1751  .  .  .  .  Obj: *ast.Object {
  1752  .  .  .  .  .  Kind: func
  1753  .  .  .  .  .  Name: "Conv"
  1754  .  .  .  .  .  Decl: *(obj @ 1745)
  1755  .  .  .  .  .  Data: nil
  1756  .  .  .  .  .  Type: nil
  1757  .  .  .  .  }
  1758  .  .  .  }
  1759  .  .  .  Type: *ast.FuncType {
  1760  .  .  .  .  Func: example.go:146:1
  1761  .  .  .  .  TypeParams: nil
  1762  .  .  .  .  Params: *ast.FieldList {
  1763  .  .  .  .  .  Opening: example.go:146:10
  1764  .  .  .  .  .  List: []*ast.Field (len = 2) {
  1765  .  .  .  .  .  .  0: *ast.Field {
  1766  .  .  .  .  .  .  .  Doc: nil
  1767  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1768  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1769  .  .  .  .  .  .  .  .  .  NamePos: example.go:146:11
  1770  .  .  .  .  .  .  .  .  .  Name: "up"
  1771  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1772  .  .  .  .  .  .  .  .  .  .  Kind: var
  1773  .  .  .  .  .  .  .  .  .  .  Name: "up"
  1774  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1765)
  1775  .  .  .  .  .  .  .  .  .  .  Data: nil
  1776  .  .  .  .  .  .  .  .  .  .  Type: nil
  1777  .  .  .  .  .  .  .  .  .  }
  1778  .  .  .  .  .  .  .  .  }
  1779  .  .  .  .  .  .  .  }
  1780  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  1781  .  .  .  .  .  .  .  .  Star: example.go:146:14
  1782  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1783  .  .  .  .  .  .  .  .  .  NamePos: example.go:146:15
  1784  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  1785  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 427)
  1786  .  .  .  .  .  .  .  .  }
  1787  .  .  .  .  .  .  .  }
  1788  .  .  .  .  .  .  .  Tag: nil
  1789  .  .  .  .  .  .  .  Comment: nil
  1790  .  .  .  .  .  .  }
  1791  .  .  .  .  .  .  1: *ast.Field {
  1792  .  .  .  .  .  .  .  Doc: nil
  1793  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1794  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1795  .  .  .  .  .  .  .  .  .  NamePos: example.go:146:26
  1796  .  .  .  .  .  .  .  .  .  Name: "u"
  1797  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1798  .  .  .  .  .  .  .  .  .  .  Kind: var
  1799  .  .  .  .  .  .  .  .  .  .  Name: "u"
  1800  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1791)
  1801  .  .  .  .  .  .  .  .  .  .  Data: nil
  1802  .  .  .  .  .  .  .  .  .  .  Type: nil
  1803  .  .  .  .  .  .  .  .  .  }
  1804  .  .  .  .  .  .  .  .  }
  1805  .  .  .  .  .  .  .  }
  1806  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  1807  .  .  .  .  .  .  .  .  Star: example.go:146:28
  1808  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1809  .  .  .  .  .  .  .  .  .  NamePos: example.go:146:29
  1810  .  .  .  .  .  .  .  .  .  Name: "User"
  1811  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 813)
  1812  .  .  .  .  .  .  .  .  }
  1813  .  .  .  .  .  .  .  }
  1814  .  .  .  .  .  .  .  Tag: nil
  1815  .  .  .  .  .  .  .  Comment: nil
  1816  .  .  .  .  .  .  }
  1817  .  .  .  .  .  }
  1818  .  .  .  .  .  Closing: example.go:146:33
  1819  .  .  .  .  }
  1820  .  .  .  .  Results: nil
  1821  .  .  .  }
  1822  .  .  .  Body: *ast.BlockStmt {
  1823  .  .  .  .  Lbrace: example.go:146:35
  1824  .  .  .  .  List: []ast.Stmt (len = 1) {
  1825  .  .  .  .  .  0: *ast.ExprStmt {
  1826  .  .  .  .  .  .  X: *ast.CallExpr {
  1827  .  .  .  .  .  .  .  Fun: *ast.Ident {
  1828  .  .  .  .  .  .  .  .  NamePos: example.go:147:2
  1829  .  .  .  .  .  .  .  .  Name: "panic"
  1830  .  .  .  .  .  .  .  .  Obj: nil
  1831  .  .  .  .  .  .  .  }
  1832  .  .  .  .  .  .  .  Lparen: example.go:147:7
  1833  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1834  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  1835  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1836  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1837  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:147:8
  1838  .  .  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  1839  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1840  .  .  .  .  .  .  .  .  .  .  }
  1841  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1842  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:147:17
  1843  .  .  .  .  .  .  .  .  .  .  .  Name: "BuildMapping"
  1844  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1845  .  .  .  .  .  .  .  .  .  .  }
  1846  .  .  .  .  .  .  .  .  .  }
  1847  .  .  .  .  .  .  .  .  .  Lparen: example.go:147:29
  1848  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  1849  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1850  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:147:30
  1851  .  .  .  .  .  .  .  .  .  .  .  Name: "up"
  1852  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1771)
  1853  .  .  .  .  .  .  .  .  .  .  }
  1854  .  .  .  .  .  .  .  .  .  .  1: *ast.Ident {
  1855  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:147:34
  1856  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  1857  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1797)
  1858  .  .  .  .  .  .  .  .  .  .  }
  1859  .  .  .  .  .  .  .  .  .  }
  1860  .  .  .  .  .  .  .  .  .  Ellipsis: -
  1861  .  .  .  .  .  .  .  .  .  Rparen: example.go:147:35
  1862  .  .  .  .  .  .  .  .  }
  1863  .  .  .  .  .  .  .  }
  1864  .  .  .  .  .  .  .  Ellipsis: -
  1865  .  .  .  .  .  .  .  Rparen: example.go:147:36
  1866  .  .  .  .  .  .  }
  1867  .  .  .  .  .  }
  1868  .  .  .  .  }
  1869  .  .  .  .  Rbrace: example.go:148:1
  1870  .  .  .  }
  1871  .  .  }
  1872  .  .  19: *ast.FuncDecl {
  1873  .  .  .  Doc: *ast.CommentGroup {
  1874  .  .  .  .  List: []*ast.Comment (len = 1) {
  1875  .  .  .  .  .  0: *ast.Comment {
  1876  .  .  .  .  .  .  Slash: example.go:150:1
  1877  .  .  .  .  .  .  Text: "// Conv1 将up结构体字段映射到u"
  1878  .  .  .  .  .  }
  1879  .  .  .  .  }
  1880  .  .  .  }
  1881  .  .  .  Recv: nil
  1882  .  .  .  Name: *ast.Ident {
  1883  .  .  .  .  NamePos: example.go:151:6
  1884  .  .  .  .  Name: "Conv1"
  1885  .  .  .  .  Obj: *ast.Object {
  1886  .  .  .  .  .  Kind: func
  1887  .  .  .  .  .  Name: "Conv1"
  1888  .  .  .  .  .  Decl: *(obj @ 1872)
  1889  .  .  .  .  .  Data: nil
  1890  .  .  .  .  .  Type: nil
  1891  .  .  .  .  }
  1892  .  .  .  }
  1893  .  .  .  Type: *ast.FuncType {
  1894  .  .  .  .  Func: example.go:151:1
  1895  .  .  .  .  TypeParams: nil
  1896  .  .  .  .  Params: *ast.FieldList {
  1897  .  .  .  .  .  Opening: example.go:151:11
  1898  .  .  .  .  .  List: []*ast.Field (len = 2) {
  1899  .  .  .  .  .  .  0: *ast.Field {
  1900  .  .  .  .  .  .  .  Doc: nil
  1901  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1902  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1903  .  .  .  .  .  .  .  .  .  NamePos: example.go:151:12
  1904  .  .  .  .  .  .  .  .  .  Name: "up"
  1905  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1906  .  .  .  .  .  .  .  .  .  .  Kind: var
  1907  .  .  .  .  .  .  .  .  .  .  Name: "up"
  1908  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1899)
  1909  .  .  .  .  .  .  .  .  .  .  Data: nil
  1910  .  .  .  .  .  .  .  .  .  .  Type: nil
  1911  .  .  .  .  .  .  .  .  .  }
  1912  .  .  .  .  .  .  .  .  }
  1913  .  .  .  .  .  .  .  }
  1914  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  1915  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1916  .  .  .  .  .  .  .  .  .  NamePos: example.go:151:15
  1917  .  .  .  .  .  .  .  .  .  Name: "model"
  1918  .  .  .  .  .  .  .  .  .  Obj: nil
  1919  .  .  .  .  .  .  .  .  }
  1920  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1921  .  .  .  .  .  .  .  .  .  NamePos: example.go:151:21
  1922  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  1923  .  .  .  .  .  .  .  .  .  Obj: nil
  1924  .  .  .  .  .  .  .  .  }
  1925  .  .  .  .  .  .  .  }
  1926  .  .  .  .  .  .  .  Tag: nil
  1927  .  .  .  .  .  .  .  Comment: nil
  1928  .  .  .  .  .  .  }
  1929  .  .  .  .  .  .  1: *ast.Field {
  1930  .  .  .  .  .  .  .  Doc: nil
  1931  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  1932  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1933  .  .  .  .  .  .  .  .  .  NamePos: example.go:151:32
  1934  .  .  .  .  .  .  .  .  .  Name: "u"
  1935  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  1936  .  .  .  .  .  .  .  .  .  .  Kind: var
  1937  .  .  .  .  .  .  .  .  .  .  Name: "u"
  1938  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 1929)
  1939  .  .  .  .  .  .  .  .  .  .  Data: nil
  1940  .  .  .  .  .  .  .  .  .  .  Type: nil
  1941  .  .  .  .  .  .  .  .  .  }
  1942  .  .  .  .  .  .  .  .  }
  1943  .  .  .  .  .  .  .  }
  1944  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  1945  .  .  .  .  .  .  .  .  Star: example.go:151:34
  1946  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  1947  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1948  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:151:35
  1949  .  .  .  .  .  .  .  .  .  .  Name: "model"
  1950  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1951  .  .  .  .  .  .  .  .  .  }
  1952  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1953  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:151:41
  1954  .  .  .  .  .  .  .  .  .  .  Name: "User"
  1955  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1956  .  .  .  .  .  .  .  .  .  }
  1957  .  .  .  .  .  .  .  .  }
  1958  .  .  .  .  .  .  .  }
  1959  .  .  .  .  .  .  .  Tag: nil
  1960  .  .  .  .  .  .  .  Comment: nil
  1961  .  .  .  .  .  .  }
  1962  .  .  .  .  .  }
  1963  .  .  .  .  .  Closing: example.go:151:45
  1964  .  .  .  .  }
  1965  .  .  .  .  Results: nil
  1966  .  .  .  }
  1967  .  .  .  Body: *ast.BlockStmt {
  1968  .  .  .  .  Lbrace: example.go:151:47
  1969  .  .  .  .  List: []ast.Stmt (len = 1) {
  1970  .  .  .  .  .  0: *ast.ExprStmt {
  1971  .  .  .  .  .  .  X: *ast.CallExpr {
  1972  .  .  .  .  .  .  .  Fun: *ast.Ident {
  1973  .  .  .  .  .  .  .  .  NamePos: example.go:152:2
  1974  .  .  .  .  .  .  .  .  Name: "panic"
  1975  .  .  .  .  .  .  .  .  Obj: nil
  1976  .  .  .  .  .  .  .  }
  1977  .  .  .  .  .  .  .  Lparen: example.go:152:7
  1978  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  1979  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  1980  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  1981  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  1982  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:152:8
  1983  .  .  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  1984  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1985  .  .  .  .  .  .  .  .  .  .  }
  1986  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  1987  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:152:17
  1988  .  .  .  .  .  .  .  .  .  .  .  Name: "BuildMapping"
  1989  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  1990  .  .  .  .  .  .  .  .  .  .  }
  1991  .  .  .  .  .  .  .  .  .  }
  1992  .  .  .  .  .  .  .  .  .  Lparen: example.go:152:29
  1993  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  1994  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  1995  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:152:30
  1996  .  .  .  .  .  .  .  .  .  .  .  Name: "up"
  1997  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1905)
  1998  .  .  .  .  .  .  .  .  .  .  }
  1999  .  .  .  .  .  .  .  .  .  .  1: *ast.Ident {
  2000  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:152:34
  2001  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  2002  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 1935)
  2003  .  .  .  .  .  .  .  .  .  .  }
  2004  .  .  .  .  .  .  .  .  .  }
  2005  .  .  .  .  .  .  .  .  .  Ellipsis: -
  2006  .  .  .  .  .  .  .  .  .  Rparen: example.go:152:35
  2007  .  .  .  .  .  .  .  .  }
  2008  .  .  .  .  .  .  .  }
  2009  .  .  .  .  .  .  .  Ellipsis: -
  2010  .  .  .  .  .  .  .  Rparen: example.go:152:36
  2011  .  .  .  .  .  .  }
  2012  .  .  .  .  .  }
  2013  .  .  .  .  }
  2014  .  .  .  .  Rbrace: example.go:153:1
  2015  .  .  .  }
  2016  .  .  }
  2017  .  .  20: *ast.FuncDecl {
  2018  .  .  .  Doc: *ast.CommentGroup {
  2019  .  .  .  .  List: []*ast.Comment (len = 1) {
  2020  .  .  .  .  .  0: *ast.Comment {
  2021  .  .  .  .  .  .  Slash: example.go:155:1
  2022  .  .  .  .  .  .  Text: "// Conv2 将up结构体映射到类型为User的结构体，并返回"
  2023  .  .  .  .  .  }
  2024  .  .  .  .  }
  2025  .  .  .  }
  2026  .  .  .  Recv: nil
  2027  .  .  .  Name: *ast.Ident {
  2028  .  .  .  .  NamePos: example.go:156:6
  2029  .  .  .  .  Name: "Conv2"
  2030  .  .  .  .  Obj: *ast.Object {
  2031  .  .  .  .  .  Kind: func
  2032  .  .  .  .  .  Name: "Conv2"
  2033  .  .  .  .  .  Decl: *(obj @ 2017)
  2034  .  .  .  .  .  Data: nil
  2035  .  .  .  .  .  Type: nil
  2036  .  .  .  .  }
  2037  .  .  .  }
  2038  .  .  .  Type: *ast.FuncType {
  2039  .  .  .  .  Func: example.go:156:1
  2040  .  .  .  .  TypeParams: nil
  2041  .  .  .  .  Params: *ast.FieldList {
  2042  .  .  .  .  .  Opening: example.go:156:11
  2043  .  .  .  .  .  List: []*ast.Field (len = 1) {
  2044  .  .  .  .  .  .  0: *ast.Field {
  2045  .  .  .  .  .  .  .  Doc: nil
  2046  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  2047  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2048  .  .  .  .  .  .  .  .  .  NamePos: example.go:156:12
  2049  .  .  .  .  .  .  .  .  .  Name: "up"
  2050  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2051  .  .  .  .  .  .  .  .  .  .  Kind: var
  2052  .  .  .  .  .  .  .  .  .  .  Name: "up"
  2053  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2044)
  2054  .  .  .  .  .  .  .  .  .  .  Data: nil
  2055  .  .  .  .  .  .  .  .  .  .  Type: nil
  2056  .  .  .  .  .  .  .  .  .  }
  2057  .  .  .  .  .  .  .  .  }
  2058  .  .  .  .  .  .  .  }
  2059  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  2060  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2061  .  .  .  .  .  .  .  .  .  NamePos: example.go:156:15
  2062  .  .  .  .  .  .  .  .  .  Name: "model"
  2063  .  .  .  .  .  .  .  .  .  Obj: nil
  2064  .  .  .  .  .  .  .  .  }
  2065  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2066  .  .  .  .  .  .  .  .  .  NamePos: example.go:156:21
  2067  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  2068  .  .  .  .  .  .  .  .  .  Obj: nil
  2069  .  .  .  .  .  .  .  .  }
  2070  .  .  .  .  .  .  .  }
  2071  .  .  .  .  .  .  .  Tag: nil
  2072  .  .  .  .  .  .  .  Comment: nil
  2073  .  .  .  .  .  .  }
  2074  .  .  .  .  .  }
  2075  .  .  .  .  .  Closing: example.go:156:30
  2076  .  .  .  .  }
  2077  .  .  .  .  Results: *ast.FieldList {
  2078  .  .  .  .  .  Opening: -
  2079  .  .  .  .  .  List: []*ast.Field (len = 1) {
  2080  .  .  .  .  .  .  0: *ast.Field {
  2081  .  .  .  .  .  .  .  Doc: nil
  2082  .  .  .  .  .  .  .  Names: nil
  2083  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  2084  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2085  .  .  .  .  .  .  .  .  .  NamePos: example.go:156:32
  2086  .  .  .  .  .  .  .  .  .  Name: "model"
  2087  .  .  .  .  .  .  .  .  .  Obj: nil
  2088  .  .  .  .  .  .  .  .  }
  2089  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2090  .  .  .  .  .  .  .  .  .  NamePos: example.go:156:38
  2091  .  .  .  .  .  .  .  .  .  Name: "User"
  2092  .  .  .  .  .  .  .  .  .  Obj: nil
  2093  .  .  .  .  .  .  .  .  }
  2094  .  .  .  .  .  .  .  }
  2095  .  .  .  .  .  .  .  Tag: nil
  2096  .  .  .  .  .  .  .  Comment: nil
  2097  .  .  .  .  .  .  }
  2098  .  .  .  .  .  }
  2099  .  .  .  .  .  Closing: -
  2100  .  .  .  .  }
  2101  .  .  .  }
  2102  .  .  .  Body: *ast.BlockStmt {
  2103  .  .  .  .  Lbrace: example.go:156:43
  2104  .  .  .  .  List: []ast.Stmt (len = 1) {
  2105  .  .  .  .  .  0: *ast.ExprStmt {
  2106  .  .  .  .  .  .  X: *ast.CallExpr {
  2107  .  .  .  .  .  .  .  Fun: *ast.Ident {
  2108  .  .  .  .  .  .  .  .  NamePos: example.go:157:2
  2109  .  .  .  .  .  .  .  .  Name: "panic"
  2110  .  .  .  .  .  .  .  .  Obj: nil
  2111  .  .  .  .  .  .  .  }
  2112  .  .  .  .  .  .  .  Lparen: example.go:157:7
  2113  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2114  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  2115  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2116  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2117  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:157:8
  2118  .  .  .  .  .  .  .  .  .  .  .  Name: "stmapper"
  2119  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2120  .  .  .  .  .  .  .  .  .  .  }
  2121  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2122  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:157:17
  2123  .  .  .  .  .  .  .  .  .  .  .  Name: "BuildMappingFrom"
  2124  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2125  .  .  .  .  .  .  .  .  .  .  }
  2126  .  .  .  .  .  .  .  .  .  }
  2127  .  .  .  .  .  .  .  .  .  Lparen: example.go:157:33
  2128  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2129  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2130  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:157:34
  2131  .  .  .  .  .  .  .  .  .  .  .  Name: "up"
  2132  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2050)
  2133  .  .  .  .  .  .  .  .  .  .  }
  2134  .  .  .  .  .  .  .  .  .  }
  2135  .  .  .  .  .  .  .  .  .  Ellipsis: -
  2136  .  .  .  .  .  .  .  .  .  Rparen: example.go:157:36
  2137  .  .  .  .  .  .  .  .  }
  2138  .  .  .  .  .  .  .  }
  2139  .  .  .  .  .  .  .  Ellipsis: -
  2140  .  .  .  .  .  .  .  Rparen: example.go:157:37
  2141  .  .  .  .  .  .  }
  2142  .  .  .  .  .  }
  2143  .  .  .  .  }
  2144  .  .  .  .  Rbrace: example.go:158:1
  2145  .  .  .  }
  2146  .  .  }
  2147  .  .  21: *ast.FuncDecl {
  2148  .  .  .  Doc: nil
  2149  .  .  .  Recv: nil
  2150  .  .  .  Name: *ast.Ident {
  2151  .  .  .  .  NamePos: example.go:160:6
  2152  .  .  .  .  Name: "NumToString"
  2153  .  .  .  .  Obj: *ast.Object {
  2154  .  .  .  .  .  Kind: func
  2155  .  .  .  .  .  Name: "NumToString"
  2156  .  .  .  .  .  Decl: *(obj @ 2147)
  2157  .  .  .  .  .  Data: nil
  2158  .  .  .  .  .  Type: nil
  2159  .  .  .  .  }
  2160  .  .  .  }
  2161  .  .  .  Type: *ast.FuncType {
  2162  .  .  .  .  Func: example.go:160:1
  2163  .  .  .  .  TypeParams: nil
  2164  .  .  .  .  Params: *ast.FieldList {
  2165  .  .  .  .  .  Opening: example.go:160:17
  2166  .  .  .  .  .  List: nil
  2167  .  .  .  .  .  Closing: example.go:160:18
  2168  .  .  .  .  }
  2169  .  .  .  .  Results: nil
  2170  .  .  .  }
  2171  .  .  .  Body: *ast.BlockStmt {
  2172  .  .  .  .  Lbrace: example.go:160:20
  2173  .  .  .  .  List: []ast.Stmt (len = 5) {
  2174  .  .  .  .  .  0: *ast.AssignStmt {
  2175  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2176  .  .  .  .  .  .  .  0: *ast.Ident {
  2177  .  .  .  .  .  .  .  .  NamePos: example.go:161:2
  2178  .  .  .  .  .  .  .  .  Name: "a"
  2179  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2180  .  .  .  .  .  .  .  .  .  Kind: var
  2181  .  .  .  .  .  .  .  .  .  Name: "a"
  2182  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2174)
  2183  .  .  .  .  .  .  .  .  .  Data: nil
  2184  .  .  .  .  .  .  .  .  .  Type: nil
  2185  .  .  .  .  .  .  .  .  }
  2186  .  .  .  .  .  .  .  }
  2187  .  .  .  .  .  .  }
  2188  .  .  .  .  .  .  TokPos: example.go:161:4
  2189  .  .  .  .  .  .  Tok: :=
  2190  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2191  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2192  .  .  .  .  .  .  .  .  ValuePos: example.go:161:7
  2193  .  .  .  .  .  .  .  .  Kind: INT
  2194  .  .  .  .  .  .  .  .  Value: "10"
  2195  .  .  .  .  .  .  .  }
  2196  .  .  .  .  .  .  }
  2197  .  .  .  .  .  }
  2198  .  .  .  .  .  1: *ast.AssignStmt {
  2199  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2200  .  .  .  .  .  .  .  0: *ast.Ident {
  2201  .  .  .  .  .  .  .  .  NamePos: example.go:162:2
  2202  .  .  .  .  .  .  .  .  Name: "s"
  2203  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2204  .  .  .  .  .  .  .  .  .  Kind: var
  2205  .  .  .  .  .  .  .  .  .  Name: "s"
  2206  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2198)
  2207  .  .  .  .  .  .  .  .  .  Data: nil
  2208  .  .  .  .  .  .  .  .  .  Type: nil
  2209  .  .  .  .  .  .  .  .  }
  2210  .  .  .  .  .  .  .  }
  2211  .  .  .  .  .  .  }
  2212  .  .  .  .  .  .  TokPos: example.go:162:4
  2213  .  .  .  .  .  .  Tok: :=
  2214  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2215  .  .  .  .  .  .  .  0: *ast.CallExpr {
  2216  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2217  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2218  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:162:7
  2219  .  .  .  .  .  .  .  .  .  .  Name: "strconv"
  2220  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2221  .  .  .  .  .  .  .  .  .  }
  2222  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2223  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:162:15
  2224  .  .  .  .  .  .  .  .  .  .  Name: "FormatInt"
  2225  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2226  .  .  .  .  .  .  .  .  .  }
  2227  .  .  .  .  .  .  .  .  }
  2228  .  .  .  .  .  .  .  .  Lparen: example.go:162:24
  2229  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  2230  .  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  2231  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  2232  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:162:25
  2233  .  .  .  .  .  .  .  .  .  .  .  Name: "int64"
  2234  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2235  .  .  .  .  .  .  .  .  .  .  }
  2236  .  .  .  .  .  .  .  .  .  .  Lparen: example.go:162:30
  2237  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2238  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2239  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:162:31
  2240  .  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
  2241  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2179)
  2242  .  .  .  .  .  .  .  .  .  .  .  }
  2243  .  .  .  .  .  .  .  .  .  .  }
  2244  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
  2245  .  .  .  .  .  .  .  .  .  .  Rparen: example.go:162:32
  2246  .  .  .  .  .  .  .  .  .  }
  2247  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
  2248  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:162:35
  2249  .  .  .  .  .  .  .  .  .  .  Kind: INT
  2250  .  .  .  .  .  .  .  .  .  .  Value: "10"
  2251  .  .  .  .  .  .  .  .  .  }
  2252  .  .  .  .  .  .  .  .  }
  2253  .  .  .  .  .  .  .  .  Ellipsis: -
  2254  .  .  .  .  .  .  .  .  Rparen: example.go:162:37
  2255  .  .  .  .  .  .  .  }
  2256  .  .  .  .  .  .  }
  2257  .  .  .  .  .  }
  2258  .  .  .  .  .  2: *ast.ExprStmt {
  2259  .  .  .  .  .  .  X: *ast.CallExpr {
  2260  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2261  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2262  .  .  .  .  .  .  .  .  .  NamePos: example.go:163:2
  2263  .  .  .  .  .  .  .  .  .  Name: "strconv"
  2264  .  .  .  .  .  .  .  .  .  Obj: nil
  2265  .  .  .  .  .  .  .  .  }
  2266  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2267  .  .  .  .  .  .  .  .  .  NamePos: example.go:163:10
  2268  .  .  .  .  .  .  .  .  .  Name: "FormatUint"
  2269  .  .  .  .  .  .  .  .  .  Obj: nil
  2270  .  .  .  .  .  .  .  .  }
  2271  .  .  .  .  .  .  .  }
  2272  .  .  .  .  .  .  .  Lparen: example.go:163:20
  2273  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  2274  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  2275  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  2276  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:163:21
  2277  .  .  .  .  .  .  .  .  .  .  Name: "uint64"
  2278  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2279  .  .  .  .  .  .  .  .  .  }
  2280  .  .  .  .  .  .  .  .  .  Lparen: example.go:163:27
  2281  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2282  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2283  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:163:28
  2284  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
  2285  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2179)
  2286  .  .  .  .  .  .  .  .  .  .  }
  2287  .  .  .  .  .  .  .  .  .  }
  2288  .  .  .  .  .  .  .  .  .  Ellipsis: -
  2289  .  .  .  .  .  .  .  .  .  Rparen: example.go:163:29
  2290  .  .  .  .  .  .  .  .  }
  2291  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
  2292  .  .  .  .  .  .  .  .  .  ValuePos: example.go:163:32
  2293  .  .  .  .  .  .  .  .  .  Kind: INT
  2294  .  .  .  .  .  .  .  .  .  Value: "10"
  2295  .  .  .  .  .  .  .  .  }
  2296  .  .  .  .  .  .  .  }
  2297  .  .  .  .  .  .  .  Ellipsis: -
  2298  .  .  .  .  .  .  .  Rparen: example.go:163:34
  2299  .  .  .  .  .  .  }
  2300  .  .  .  .  .  }
  2301  .  .  .  .  .  3: *ast.ExprStmt {
  2302  .  .  .  .  .  .  X: *ast.CallExpr {
  2303  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2304  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2305  .  .  .  .  .  .  .  .  .  NamePos: example.go:164:2
  2306  .  .  .  .  .  .  .  .  .  Name: "strconv"
  2307  .  .  .  .  .  .  .  .  .  Obj: nil
  2308  .  .  .  .  .  .  .  .  }
  2309  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2310  .  .  .  .  .  .  .  .  .  NamePos: example.go:164:10
  2311  .  .  .  .  .  .  .  .  .  Name: "FormatFloat"
  2312  .  .  .  .  .  .  .  .  .  Obj: nil
  2313  .  .  .  .  .  .  .  .  }
  2314  .  .  .  .  .  .  .  }
  2315  .  .  .  .  .  .  .  Lparen: example.go:164:21
  2316  .  .  .  .  .  .  .  Args: []ast.Expr (len = 4) {
  2317  .  .  .  .  .  .  .  .  0: *ast.CallExpr {
  2318  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  2319  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:164:22
  2320  .  .  .  .  .  .  .  .  .  .  Name: "float64"
  2321  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2322  .  .  .  .  .  .  .  .  .  }
  2323  .  .  .  .  .  .  .  .  .  Lparen: example.go:164:29
  2324  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2325  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2326  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:164:30
  2327  .  .  .  .  .  .  .  .  .  .  .  Name: "a"
  2328  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2179)
  2329  .  .  .  .  .  .  .  .  .  .  }
  2330  .  .  .  .  .  .  .  .  .  }
  2331  .  .  .  .  .  .  .  .  .  Ellipsis: -
  2332  .  .  .  .  .  .  .  .  .  Rparen: example.go:164:31
  2333  .  .  .  .  .  .  .  .  }
  2334  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
  2335  .  .  .  .  .  .  .  .  .  ValuePos: example.go:164:34
  2336  .  .  .  .  .  .  .  .  .  Kind: CHAR
  2337  .  .  .  .  .  .  .  .  .  Value: "'g'"
  2338  .  .  .  .  .  .  .  .  }
  2339  .  .  .  .  .  .  .  .  2: *ast.UnaryExpr {
  2340  .  .  .  .  .  .  .  .  .  OpPos: example.go:164:39
  2341  .  .  .  .  .  .  .  .  .  Op: -
  2342  .  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
  2343  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:164:40
  2344  .  .  .  .  .  .  .  .  .  .  Kind: INT
  2345  .  .  .  .  .  .  .  .  .  .  Value: "1"
  2346  .  .  .  .  .  .  .  .  .  }
  2347  .  .  .  .  .  .  .  .  }
  2348  .  .  .  .  .  .  .  .  3: *ast.BasicLit {
  2349  .  .  .  .  .  .  .  .  .  ValuePos: example.go:164:43
  2350  .  .  .  .  .  .  .  .  .  Kind: INT
  2351  .  .  .  .  .  .  .  .  .  Value: "64"
  2352  .  .  .  .  .  .  .  .  }
  2353  .  .  .  .  .  .  .  }
  2354  .  .  .  .  .  .  .  Ellipsis: -
  2355  .  .  .  .  .  .  .  Rparen: example.go:164:45
  2356  .  .  .  .  .  .  }
  2357  .  .  .  .  .  }
  2358  .  .  .  .  .  4: *ast.ExprStmt {
  2359  .  .  .  .  .  .  X: *ast.CallExpr {
  2360  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2361  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2362  .  .  .  .  .  .  .  .  .  NamePos: example.go:165:2
  2363  .  .  .  .  .  .  .  .  .  Name: "fmt"
  2364  .  .  .  .  .  .  .  .  .  Obj: nil
  2365  .  .  .  .  .  .  .  .  }
  2366  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2367  .  .  .  .  .  .  .  .  .  NamePos: example.go:165:6
  2368  .  .  .  .  .  .  .  .  .  Name: "Println"
  2369  .  .  .  .  .  .  .  .  .  Obj: nil
  2370  .  .  .  .  .  .  .  .  }
  2371  .  .  .  .  .  .  .  }
  2372  .  .  .  .  .  .  .  Lparen: example.go:165:13
  2373  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2374  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2375  .  .  .  .  .  .  .  .  .  NamePos: example.go:165:14
  2376  .  .  .  .  .  .  .  .  .  Name: "s"
  2377  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2203)
  2378  .  .  .  .  .  .  .  .  }
  2379  .  .  .  .  .  .  .  }
  2380  .  .  .  .  .  .  .  Ellipsis: -
  2381  .  .  .  .  .  .  .  Rparen: example.go:165:15
  2382  .  .  .  .  .  .  }
  2383  .  .  .  .  .  }
  2384  .  .  .  .  }
  2385  .  .  .  .  Rbrace: example.go:166:1
  2386  .  .  .  }
  2387  .  .  }
  2388  .  .  22: *ast.FuncDecl {
  2389  .  .  .  Doc: nil
  2390  .  .  .  Recv: nil
  2391  .  .  .  Name: *ast.Ident {
  2392  .  .  .  .  NamePos: example.go:168:6
  2393  .  .  .  .  Name: "NumToNum"
  2394  .  .  .  .  Obj: *ast.Object {
  2395  .  .  .  .  .  Kind: func
  2396  .  .  .  .  .  Name: "NumToNum"
  2397  .  .  .  .  .  Decl: *(obj @ 2388)
  2398  .  .  .  .  .  Data: nil
  2399  .  .  .  .  .  Type: nil
  2400  .  .  .  .  }
  2401  .  .  .  }
  2402  .  .  .  Type: *ast.FuncType {
  2403  .  .  .  .  Func: example.go:168:1
  2404  .  .  .  .  TypeParams: nil
  2405  .  .  .  .  Params: *ast.FieldList {
  2406  .  .  .  .  .  Opening: example.go:168:14
  2407  .  .  .  .  .  List: nil
  2408  .  .  .  .  .  Closing: example.go:168:15
  2409  .  .  .  .  }
  2410  .  .  .  .  Results: nil
  2411  .  .  .  }
  2412  .  .  .  Body: *ast.BlockStmt {
  2413  .  .  .  .  Lbrace: example.go:168:17
  2414  .  .  .  .  List: []ast.Stmt (len = 5) {
  2415  .  .  .  .  .  0: *ast.AssignStmt {
  2416  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2417  .  .  .  .  .  .  .  0: *ast.Ident {
  2418  .  .  .  .  .  .  .  .  NamePos: example.go:169:2
  2419  .  .  .  .  .  .  .  .  Name: "a"
  2420  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2421  .  .  .  .  .  .  .  .  .  Kind: var
  2422  .  .  .  .  .  .  .  .  .  Name: "a"
  2423  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2415)
  2424  .  .  .  .  .  .  .  .  .  Data: nil
  2425  .  .  .  .  .  .  .  .  .  Type: nil
  2426  .  .  .  .  .  .  .  .  }
  2427  .  .  .  .  .  .  .  }
  2428  .  .  .  .  .  .  }
  2429  .  .  .  .  .  .  TokPos: example.go:169:4
  2430  .  .  .  .  .  .  Tok: :=
  2431  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2432  .  .  .  .  .  .  .  0: *ast.BasicLit {
  2433  .  .  .  .  .  .  .  .  ValuePos: example.go:169:7
  2434  .  .  .  .  .  .  .  .  Kind: INT
  2435  .  .  .  .  .  .  .  .  Value: "6"
  2436  .  .  .  .  .  .  .  }
  2437  .  .  .  .  .  .  }
  2438  .  .  .  .  .  }
  2439  .  .  .  .  .  1: *ast.AssignStmt {
  2440  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2441  .  .  .  .  .  .  .  0: *ast.Ident {
  2442  .  .  .  .  .  .  .  .  NamePos: example.go:170:2
  2443  .  .  .  .  .  .  .  .  Name: "u"
  2444  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2445  .  .  .  .  .  .  .  .  .  Kind: var
  2446  .  .  .  .  .  .  .  .  .  Name: "u"
  2447  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2439)
  2448  .  .  .  .  .  .  .  .  .  Data: nil
  2449  .  .  .  .  .  .  .  .  .  Type: nil
  2450  .  .  .  .  .  .  .  .  }
  2451  .  .  .  .  .  .  .  }
  2452  .  .  .  .  .  .  }
  2453  .  .  .  .  .  .  TokPos: example.go:170:4
  2454  .  .  .  .  .  .  Tok: :=
  2455  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2456  .  .  .  .  .  .  .  0: *ast.CompositeLit {
  2457  .  .  .  .  .  .  .  .  Type: *ast.Ident {
  2458  .  .  .  .  .  .  .  .  .  NamePos: example.go:170:7
  2459  .  .  .  .  .  .  .  .  .  Name: "User"
  2460  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 813)
  2461  .  .  .  .  .  .  .  .  }
  2462  .  .  .  .  .  .  .  .  Lbrace: example.go:170:11
  2463  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  2464  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  2465  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  2466  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:170:12
  2467  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  2468  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2469  .  .  .  .  .  .  .  .  .  .  }
  2470  .  .  .  .  .  .  .  .  .  .  Colon: example.go:170:14
  2471  .  .  .  .  .  .  .  .  .  .  Value: *ast.BasicLit {
  2472  .  .  .  .  .  .  .  .  .  .  .  ValuePos: example.go:170:16
  2473  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
  2474  .  .  .  .  .  .  .  .  .  .  .  Value: "8"
  2475  .  .  .  .  .  .  .  .  .  .  }
  2476  .  .  .  .  .  .  .  .  .  }
  2477  .  .  .  .  .  .  .  .  }
  2478  .  .  .  .  .  .  .  .  Rbrace: example.go:170:17
  2479  .  .  .  .  .  .  .  .  Incomplete: false
  2480  .  .  .  .  .  .  .  }
  2481  .  .  .  .  .  .  }
  2482  .  .  .  .  .  }
  2483  .  .  .  .  .  2: *ast.AssignStmt {
  2484  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2485  .  .  .  .  .  .  .  0: *ast.Ident {
  2486  .  .  .  .  .  .  .  .  NamePos: example.go:171:2
  2487  .  .  .  .  .  .  .  .  Name: "b"
  2488  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2489  .  .  .  .  .  .  .  .  .  Kind: var
  2490  .  .  .  .  .  .  .  .  .  Name: "b"
  2491  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2483)
  2492  .  .  .  .  .  .  .  .  .  Data: nil
  2493  .  .  .  .  .  .  .  .  .  Type: nil
  2494  .  .  .  .  .  .  .  .  }
  2495  .  .  .  .  .  .  .  }
  2496  .  .  .  .  .  .  }
  2497  .  .  .  .  .  .  TokPos: example.go:171:4
  2498  .  .  .  .  .  .  Tok: :=
  2499  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2500  .  .  .  .  .  .  .  0: *ast.CallExpr {
  2501  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  2502  .  .  .  .  .  .  .  .  .  NamePos: example.go:171:7
  2503  .  .  .  .  .  .  .  .  .  Name: "int64"
  2504  .  .  .  .  .  .  .  .  .  Obj: nil
  2505  .  .  .  .  .  .  .  .  }
  2506  .  .  .  .  .  .  .  .  Lparen: example.go:171:12
  2507  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2508  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2509  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:171:13
  2510  .  .  .  .  .  .  .  .  .  .  Name: "a"
  2511  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2420)
  2512  .  .  .  .  .  .  .  .  .  }
  2513  .  .  .  .  .  .  .  .  }
  2514  .  .  .  .  .  .  .  .  Ellipsis: -
  2515  .  .  .  .  .  .  .  .  Rparen: example.go:171:14
  2516  .  .  .  .  .  .  .  }
  2517  .  .  .  .  .  .  }
  2518  .  .  .  .  .  }
  2519  .  .  .  .  .  3: *ast.AssignStmt {
  2520  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2521  .  .  .  .  .  .  .  0: *ast.Ident {
  2522  .  .  .  .  .  .  .  .  NamePos: example.go:172:2
  2523  .  .  .  .  .  .  .  .  Name: "c"
  2524  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2525  .  .  .  .  .  .  .  .  .  Kind: var
  2526  .  .  .  .  .  .  .  .  .  Name: "c"
  2527  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2519)
  2528  .  .  .  .  .  .  .  .  .  Data: nil
  2529  .  .  .  .  .  .  .  .  .  Type: nil
  2530  .  .  .  .  .  .  .  .  }
  2531  .  .  .  .  .  .  .  }
  2532  .  .  .  .  .  .  }
  2533  .  .  .  .  .  .  TokPos: example.go:172:4
  2534  .  .  .  .  .  .  Tok: :=
  2535  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2536  .  .  .  .  .  .  .  0: *ast.CallExpr {
  2537  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  2538  .  .  .  .  .  .  .  .  .  NamePos: example.go:172:7
  2539  .  .  .  .  .  .  .  .  .  Name: "int32"
  2540  .  .  .  .  .  .  .  .  .  Obj: nil
  2541  .  .  .  .  .  .  .  .  }
  2542  .  .  .  .  .  .  .  .  Lparen: example.go:172:12
  2543  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  2544  .  .  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  2545  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2546  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:172:13
  2547  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  2548  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2444)
  2549  .  .  .  .  .  .  .  .  .  .  }
  2550  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2551  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:172:15
  2552  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  2553  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2554  .  .  .  .  .  .  .  .  .  .  }
  2555  .  .  .  .  .  .  .  .  .  }
  2556  .  .  .  .  .  .  .  .  }
  2557  .  .  .  .  .  .  .  .  Ellipsis: -
  2558  .  .  .  .  .  .  .  .  Rparen: example.go:172:17
  2559  .  .  .  .  .  .  .  }
  2560  .  .  .  .  .  .  }
  2561  .  .  .  .  .  }
  2562  .  .  .  .  .  4: *ast.ExprStmt {
  2563  .  .  .  .  .  .  X: *ast.CallExpr {
  2564  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
  2565  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2566  .  .  .  .  .  .  .  .  .  NamePos: example.go:173:2
  2567  .  .  .  .  .  .  .  .  .  Name: "fmt"
  2568  .  .  .  .  .  .  .  .  .  Obj: nil
  2569  .  .  .  .  .  .  .  .  }
  2570  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2571  .  .  .  .  .  .  .  .  .  NamePos: example.go:173:6
  2572  .  .  .  .  .  .  .  .  .  Name: "Println"
  2573  .  .  .  .  .  .  .  .  .  Obj: nil
  2574  .  .  .  .  .  .  .  .  }
  2575  .  .  .  .  .  .  .  }
  2576  .  .  .  .  .  .  .  Lparen: example.go:173:13
  2577  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  2578  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2579  .  .  .  .  .  .  .  .  .  NamePos: example.go:173:14
  2580  .  .  .  .  .  .  .  .  .  Name: "b"
  2581  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2488)
  2582  .  .  .  .  .  .  .  .  }
  2583  .  .  .  .  .  .  .  .  1: *ast.Ident {
  2584  .  .  .  .  .  .  .  .  .  NamePos: example.go:173:17
  2585  .  .  .  .  .  .  .  .  .  Name: "c"
  2586  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2524)
  2587  .  .  .  .  .  .  .  .  }
  2588  .  .  .  .  .  .  .  }
  2589  .  .  .  .  .  .  .  Ellipsis: -
  2590  .  .  .  .  .  .  .  Rparen: example.go:173:18
  2591  .  .  .  .  .  .  }
  2592  .  .  .  .  .  }
  2593  .  .  .  .  }
  2594  .  .  .  .  Rbrace: example.go:174:1
  2595  .  .  .  }
  2596  .  .  }
  2597  .  .  23: *ast.FuncDecl {
  2598  .  .  .  Doc: nil
  2599  .  .  .  Recv: nil
  2600  .  .  .  Name: *ast.Ident {
  2601  .  .  .  .  NamePos: example.go:176:6
  2602  .  .  .  .  Name: "ConvUser"
  2603  .  .  .  .  Obj: *ast.Object {
  2604  .  .  .  .  .  Kind: func
  2605  .  .  .  .  .  Name: "ConvUser"
  2606  .  .  .  .  .  Decl: *(obj @ 2597)
  2607  .  .  .  .  .  Data: nil
  2608  .  .  .  .  .  Type: nil
  2609  .  .  .  .  }
  2610  .  .  .  }
  2611  .  .  .  Type: *ast.FuncType {
  2612  .  .  .  .  Func: example.go:176:1
  2613  .  .  .  .  TypeParams: nil
  2614  .  .  .  .  Params: *ast.FieldList {
  2615  .  .  .  .  .  Opening: example.go:176:14
  2616  .  .  .  .  .  List: []*ast.Field (len = 2) {
  2617  .  .  .  .  .  .  0: *ast.Field {
  2618  .  .  .  .  .  .  .  Doc: nil
  2619  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  2620  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2621  .  .  .  .  .  .  .  .  .  NamePos: example.go:176:15
  2622  .  .  .  .  .  .  .  .  .  Name: "u1"
  2623  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2624  .  .  .  .  .  .  .  .  .  .  Kind: var
  2625  .  .  .  .  .  .  .  .  .  .  Name: "u1"
  2626  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2617)
  2627  .  .  .  .  .  .  .  .  .  .  Data: nil
  2628  .  .  .  .  .  .  .  .  .  .  Type: nil
  2629  .  .  .  .  .  .  .  .  .  }
  2630  .  .  .  .  .  .  .  .  }
  2631  .  .  .  .  .  .  .  }
  2632  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  2633  .  .  .  .  .  .  .  .  Star: example.go:176:18
  2634  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2635  .  .  .  .  .  .  .  .  .  NamePos: example.go:176:19
  2636  .  .  .  .  .  .  .  .  .  Name: "User"
  2637  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 813)
  2638  .  .  .  .  .  .  .  .  }
  2639  .  .  .  .  .  .  .  }
  2640  .  .  .  .  .  .  .  Tag: nil
  2641  .  .  .  .  .  .  .  Comment: nil
  2642  .  .  .  .  .  .  }
  2643  .  .  .  .  .  .  1: *ast.Field {
  2644  .  .  .  .  .  .  .  Doc: nil
  2645  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  2646  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2647  .  .  .  .  .  .  .  .  .  NamePos: example.go:176:25
  2648  .  .  .  .  .  .  .  .  .  Name: "u2"
  2649  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2650  .  .  .  .  .  .  .  .  .  .  Kind: var
  2651  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  2652  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2643)
  2653  .  .  .  .  .  .  .  .  .  .  Data: nil
  2654  .  .  .  .  .  .  .  .  .  .  Type: nil
  2655  .  .  .  .  .  .  .  .  .  }
  2656  .  .  .  .  .  .  .  .  }
  2657  .  .  .  .  .  .  .  }
  2658  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  2659  .  .  .  .  .  .  .  .  Star: example.go:176:28
  2660  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2661  .  .  .  .  .  .  .  .  .  NamePos: example.go:176:29
  2662  .  .  .  .  .  .  .  .  .  Name: "User1"
  2663  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 876)
  2664  .  .  .  .  .  .  .  .  }
  2665  .  .  .  .  .  .  .  }
  2666  .  .  .  .  .  .  .  Tag: nil
  2667  .  .  .  .  .  .  .  Comment: nil
  2668  .  .  .  .  .  .  }
  2669  .  .  .  .  .  }
  2670  .  .  .  .  .  Closing: example.go:176:34
  2671  .  .  .  .  }
  2672  .  .  .  .  Results: nil
  2673  .  .  .  }
  2674  .  .  .  Body: *ast.BlockStmt {
  2675  .  .  .  .  Lbrace: example.go:176:36
  2676  .  .  .  .  List: []ast.Stmt (len = 2) {
  2677  .  .  .  .  .  0: *ast.AssignStmt {
  2678  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2679  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  2680  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2681  .  .  .  .  .  .  .  .  .  NamePos: example.go:177:2
  2682  .  .  .  .  .  .  .  .  .  Name: "u2"
  2683  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2649)
  2684  .  .  .  .  .  .  .  .  }
  2685  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2686  .  .  .  .  .  .  .  .  .  NamePos: example.go:177:5
  2687  .  .  .  .  .  .  .  .  .  Name: "Id"
  2688  .  .  .  .  .  .  .  .  .  Obj: nil
  2689  .  .  .  .  .  .  .  .  }
  2690  .  .  .  .  .  .  .  }
  2691  .  .  .  .  .  .  }
  2692  .  .  .  .  .  .  TokPos: example.go:177:8
  2693  .  .  .  .  .  .  Tok: =
  2694  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2695  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  2696  .  .  .  .  .  .  .  .  OpPos: example.go:177:10
  2697  .  .  .  .  .  .  .  .  Op: &
  2698  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  2699  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2700  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:177:11
  2701  .  .  .  .  .  .  .  .  .  .  Name: "u1"
  2702  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2623)
  2703  .  .  .  .  .  .  .  .  .  }
  2704  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2705  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:177:14
  2706  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  2707  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2708  .  .  .  .  .  .  .  .  .  }
  2709  .  .  .  .  .  .  .  .  }
  2710  .  .  .  .  .  .  .  }
  2711  .  .  .  .  .  .  }
  2712  .  .  .  .  .  }
  2713  .  .  .  .  .  1: *ast.AssignStmt {
  2714  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2715  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  2716  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2717  .  .  .  .  .  .  .  .  .  NamePos: example.go:178:2
  2718  .  .  .  .  .  .  .  .  .  Name: "u1"
  2719  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2623)
  2720  .  .  .  .  .  .  .  .  }
  2721  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2722  .  .  .  .  .  .  .  .  .  NamePos: example.go:178:5
  2723  .  .  .  .  .  .  .  .  .  Name: "Id"
  2724  .  .  .  .  .  .  .  .  .  Obj: nil
  2725  .  .  .  .  .  .  .  .  }
  2726  .  .  .  .  .  .  .  }
  2727  .  .  .  .  .  .  }
  2728  .  .  .  .  .  .  TokPos: example.go:178:8
  2729  .  .  .  .  .  .  Tok: =
  2730  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2731  .  .  .  .  .  .  .  0: *ast.StarExpr {
  2732  .  .  .  .  .  .  .  .  Star: example.go:178:10
  2733  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  2734  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2735  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:178:11
  2736  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  2737  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2649)
  2738  .  .  .  .  .  .  .  .  .  }
  2739  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2740  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:178:14
  2741  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  2742  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2743  .  .  .  .  .  .  .  .  .  }
  2744  .  .  .  .  .  .  .  .  }
  2745  .  .  .  .  .  .  .  }
  2746  .  .  .  .  .  .  }
  2747  .  .  .  .  .  }
  2748  .  .  .  .  }
  2749  .  .  .  .  Rbrace: example.go:179:1
  2750  .  .  .  }
  2751  .  .  }
  2752  .  .  24: *ast.FuncDecl {
  2753  .  .  .  Doc: nil
  2754  .  .  .  Recv: nil
  2755  .  .  .  Name: *ast.Ident {
  2756  .  .  .  .  NamePos: example.go:181:6
  2757  .  .  .  .  Name: "ConvUserInterface"
  2758  .  .  .  .  Obj: *ast.Object {
  2759  .  .  .  .  .  Kind: func
  2760  .  .  .  .  .  Name: "ConvUserInterface"
  2761  .  .  .  .  .  Decl: *(obj @ 2752)
  2762  .  .  .  .  .  Data: nil
  2763  .  .  .  .  .  Type: nil
  2764  .  .  .  .  }
  2765  .  .  .  }
  2766  .  .  .  Type: *ast.FuncType {
  2767  .  .  .  .  Func: example.go:181:1
  2768  .  .  .  .  TypeParams: nil
  2769  .  .  .  .  Params: *ast.FieldList {
  2770  .  .  .  .  .  Opening: example.go:181:23
  2771  .  .  .  .  .  List: []*ast.Field (len = 3) {
  2772  .  .  .  .  .  .  0: *ast.Field {
  2773  .  .  .  .  .  .  .  Doc: nil
  2774  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  2775  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2776  .  .  .  .  .  .  .  .  .  NamePos: example.go:181:24
  2777  .  .  .  .  .  .  .  .  .  Name: "u1"
  2778  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2779  .  .  .  .  .  .  .  .  .  .  Kind: var
  2780  .  .  .  .  .  .  .  .  .  .  Name: "u1"
  2781  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2772)
  2782  .  .  .  .  .  .  .  .  .  .  Data: nil
  2783  .  .  .  .  .  .  .  .  .  .  Type: nil
  2784  .  .  .  .  .  .  .  .  .  }
  2785  .  .  .  .  .  .  .  .  }
  2786  .  .  .  .  .  .  .  }
  2787  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  2788  .  .  .  .  .  .  .  .  Star: example.go:181:27
  2789  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2790  .  .  .  .  .  .  .  .  .  NamePos: example.go:181:28
  2791  .  .  .  .  .  .  .  .  .  Name: "User"
  2792  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 813)
  2793  .  .  .  .  .  .  .  .  }
  2794  .  .  .  .  .  .  .  }
  2795  .  .  .  .  .  .  .  Tag: nil
  2796  .  .  .  .  .  .  .  Comment: nil
  2797  .  .  .  .  .  .  }
  2798  .  .  .  .  .  .  1: *ast.Field {
  2799  .  .  .  .  .  .  .  Doc: nil
  2800  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  2801  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2802  .  .  .  .  .  .  .  .  .  NamePos: example.go:181:34
  2803  .  .  .  .  .  .  .  .  .  Name: "u2"
  2804  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2805  .  .  .  .  .  .  .  .  .  .  Kind: var
  2806  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  2807  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2798)
  2808  .  .  .  .  .  .  .  .  .  .  Data: nil
  2809  .  .  .  .  .  .  .  .  .  .  Type: nil
  2810  .  .  .  .  .  .  .  .  .  }
  2811  .  .  .  .  .  .  .  .  }
  2812  .  .  .  .  .  .  .  }
  2813  .  .  .  .  .  .  .  Type: *ast.Ident {
  2814  .  .  .  .  .  .  .  .  NamePos: example.go:181:37
  2815  .  .  .  .  .  .  .  .  Name: "User1"
  2816  .  .  .  .  .  .  .  .  Obj: *(obj @ 876)
  2817  .  .  .  .  .  .  .  }
  2818  .  .  .  .  .  .  .  Tag: nil
  2819  .  .  .  .  .  .  .  Comment: nil
  2820  .  .  .  .  .  .  }
  2821  .  .  .  .  .  .  2: *ast.Field {
  2822  .  .  .  .  .  .  .  Doc: nil
  2823  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  2824  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2825  .  .  .  .  .  .  .  .  .  NamePos: example.go:181:44
  2826  .  .  .  .  .  .  .  .  .  Name: "u3"
  2827  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2828  .  .  .  .  .  .  .  .  .  .  Kind: var
  2829  .  .  .  .  .  .  .  .  .  .  Name: "u3"
  2830  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2821)
  2831  .  .  .  .  .  .  .  .  .  .  Data: nil
  2832  .  .  .  .  .  .  .  .  .  .  Type: nil
  2833  .  .  .  .  .  .  .  .  .  }
  2834  .  .  .  .  .  .  .  .  }
  2835  .  .  .  .  .  .  .  }
  2836  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  2837  .  .  .  .  .  .  .  .  Star: example.go:181:47
  2838  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2839  .  .  .  .  .  .  .  .  .  NamePos: example.go:181:48
  2840  .  .  .  .  .  .  .  .  .  Name: "User2"
  2841  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 942)
  2842  .  .  .  .  .  .  .  .  }
  2843  .  .  .  .  .  .  .  }
  2844  .  .  .  .  .  .  .  Tag: nil
  2845  .  .  .  .  .  .  .  Comment: nil
  2846  .  .  .  .  .  .  }
  2847  .  .  .  .  .  }
  2848  .  .  .  .  .  Closing: example.go:181:53
  2849  .  .  .  .  }
  2850  .  .  .  .  Results: nil
  2851  .  .  .  }
  2852  .  .  .  Body: *ast.BlockStmt {
  2853  .  .  .  .  Lbrace: example.go:181:55
  2854  .  .  .  .  List: []ast.Stmt (len = 2) {
  2855  .  .  .  .  .  0: *ast.AssignStmt {
  2856  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2857  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  2858  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2859  .  .  .  .  .  .  .  .  .  NamePos: example.go:182:2
  2860  .  .  .  .  .  .  .  .  .  Name: "u1"
  2861  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2778)
  2862  .  .  .  .  .  .  .  .  }
  2863  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2864  .  .  .  .  .  .  .  .  .  NamePos: example.go:182:5
  2865  .  .  .  .  .  .  .  .  .  Name: "Id"
  2866  .  .  .  .  .  .  .  .  .  Obj: nil
  2867  .  .  .  .  .  .  .  .  }
  2868  .  .  .  .  .  .  .  }
  2869  .  .  .  .  .  .  }
  2870  .  .  .  .  .  .  TokPos: example.go:182:8
  2871  .  .  .  .  .  .  Tok: =
  2872  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2873  .  .  .  .  .  .  .  0: *ast.TypeAssertExpr {
  2874  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  2875  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2876  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:182:10
  2877  .  .  .  .  .  .  .  .  .  .  Name: "u3"
  2878  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2827)
  2879  .  .  .  .  .  .  .  .  .  }
  2880  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2881  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:182:13
  2882  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  2883  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2884  .  .  .  .  .  .  .  .  .  }
  2885  .  .  .  .  .  .  .  .  }
  2886  .  .  .  .  .  .  .  .  Lparen: example.go:182:16
  2887  .  .  .  .  .  .  .  .  Type: *ast.Ident {
  2888  .  .  .  .  .  .  .  .  .  NamePos: example.go:182:17
  2889  .  .  .  .  .  .  .  .  .  Name: "int"
  2890  .  .  .  .  .  .  .  .  .  Obj: nil
  2891  .  .  .  .  .  .  .  .  }
  2892  .  .  .  .  .  .  .  .  Rparen: example.go:182:20
  2893  .  .  .  .  .  .  .  }
  2894  .  .  .  .  .  .  }
  2895  .  .  .  .  .  }
  2896  .  .  .  .  .  1: *ast.AssignStmt {
  2897  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  2898  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  2899  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2900  .  .  .  .  .  .  .  .  .  NamePos: example.go:183:2
  2901  .  .  .  .  .  .  .  .  .  Name: "u2"
  2902  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2804)
  2903  .  .  .  .  .  .  .  .  }
  2904  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2905  .  .  .  .  .  .  .  .  .  NamePos: example.go:183:5
  2906  .  .  .  .  .  .  .  .  .  Name: "Id"
  2907  .  .  .  .  .  .  .  .  .  Obj: nil
  2908  .  .  .  .  .  .  .  .  }
  2909  .  .  .  .  .  .  .  }
  2910  .  .  .  .  .  .  }
  2911  .  .  .  .  .  .  TokPos: example.go:183:8
  2912  .  .  .  .  .  .  Tok: =
  2913  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  2914  .  .  .  .  .  .  .  0: *ast.TypeAssertExpr {
  2915  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  2916  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2917  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:183:10
  2918  .  .  .  .  .  .  .  .  .  .  Name: "u3"
  2919  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 2827)
  2920  .  .  .  .  .  .  .  .  .  }
  2921  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2922  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:183:13
  2923  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  2924  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2925  .  .  .  .  .  .  .  .  .  }
  2926  .  .  .  .  .  .  .  .  }
  2927  .  .  .  .  .  .  .  .  Lparen: example.go:183:16
  2928  .  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  2929  .  .  .  .  .  .  .  .  .  Star: example.go:183:17
  2930  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2931  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:183:18
  2932  .  .  .  .  .  .  .  .  .  .  Name: "int"
  2933  .  .  .  .  .  .  .  .  .  .  Obj: nil
  2934  .  .  .  .  .  .  .  .  .  }
  2935  .  .  .  .  .  .  .  .  }
  2936  .  .  .  .  .  .  .  .  Rparen: example.go:183:21
  2937  .  .  .  .  .  .  .  }
  2938  .  .  .  .  .  .  }
  2939  .  .  .  .  .  }
  2940  .  .  .  .  }
  2941  .  .  .  .  Rbrace: example.go:184:1
  2942  .  .  .  }
  2943  .  .  }
  2944  .  .  25: *ast.FuncDecl {
  2945  .  .  .  Doc: *ast.CommentGroup {
  2946  .  .  .  .  List: []*ast.Comment (len = 1) {
  2947  .  .  .  .  .  0: *ast.Comment {
  2948  .  .  .  .  .  .  Slash: example.go:186:1
  2949  .  .  .  .  .  .  Text: "// UserProtoToUser1 赋值是无用的"
  2950  .  .  .  .  .  }
  2951  .  .  .  .  }
  2952  .  .  .  }
  2953  .  .  .  Recv: nil
  2954  .  .  .  Name: *ast.Ident {
  2955  .  .  .  .  NamePos: example.go:187:6
  2956  .  .  .  .  Name: "UserProtoToUser1"
  2957  .  .  .  .  Obj: *ast.Object {
  2958  .  .  .  .  .  Kind: func
  2959  .  .  .  .  .  Name: "UserProtoToUser1"
  2960  .  .  .  .  .  Decl: *(obj @ 2944)
  2961  .  .  .  .  .  Data: nil
  2962  .  .  .  .  .  Type: nil
  2963  .  .  .  .  }
  2964  .  .  .  }
  2965  .  .  .  Type: *ast.FuncType {
  2966  .  .  .  .  Func: example.go:187:1
  2967  .  .  .  .  TypeParams: nil
  2968  .  .  .  .  Params: *ast.FieldList {
  2969  .  .  .  .  .  Opening: example.go:187:22
  2970  .  .  .  .  .  List: []*ast.Field (len = 2) {
  2971  .  .  .  .  .  .  0: *ast.Field {
  2972  .  .  .  .  .  .  .  Doc: nil
  2973  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  2974  .  .  .  .  .  .  .  .  0: *ast.Ident {
  2975  .  .  .  .  .  .  .  .  .  NamePos: example.go:187:23
  2976  .  .  .  .  .  .  .  .  .  Name: "u1"
  2977  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  2978  .  .  .  .  .  .  .  .  .  .  Kind: var
  2979  .  .  .  .  .  .  .  .  .  .  Name: "u1"
  2980  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 2971)
  2981  .  .  .  .  .  .  .  .  .  .  Data: nil
  2982  .  .  .  .  .  .  .  .  .  .  Type: nil
  2983  .  .  .  .  .  .  .  .  .  }
  2984  .  .  .  .  .  .  .  .  }
  2985  .  .  .  .  .  .  .  }
  2986  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  2987  .  .  .  .  .  .  .  .  X: *ast.Ident {
  2988  .  .  .  .  .  .  .  .  .  NamePos: example.go:187:26
  2989  .  .  .  .  .  .  .  .  .  Name: "model"
  2990  .  .  .  .  .  .  .  .  .  Obj: nil
  2991  .  .  .  .  .  .  .  .  }
  2992  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  2993  .  .  .  .  .  .  .  .  .  NamePos: example.go:187:32
  2994  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  2995  .  .  .  .  .  .  .  .  .  Obj: nil
  2996  .  .  .  .  .  .  .  .  }
  2997  .  .  .  .  .  .  .  }
  2998  .  .  .  .  .  .  .  Tag: nil
  2999  .  .  .  .  .  .  .  Comment: nil
  3000  .  .  .  .  .  .  }
  3001  .  .  .  .  .  .  1: *ast.Field {
  3002  .  .  .  .  .  .  .  Doc: nil
  3003  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3004  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3005  .  .  .  .  .  .  .  .  .  NamePos: example.go:187:43
  3006  .  .  .  .  .  .  .  .  .  Name: "u2"
  3007  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3008  .  .  .  .  .  .  .  .  .  .  Kind: var
  3009  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  3010  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3001)
  3011  .  .  .  .  .  .  .  .  .  .  Data: nil
  3012  .  .  .  .  .  .  .  .  .  .  Type: nil
  3013  .  .  .  .  .  .  .  .  .  }
  3014  .  .  .  .  .  .  .  .  }
  3015  .  .  .  .  .  .  .  }
  3016  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3017  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3018  .  .  .  .  .  .  .  .  .  NamePos: example.go:187:46
  3019  .  .  .  .  .  .  .  .  .  Name: "model"
  3020  .  .  .  .  .  .  .  .  .  Obj: nil
  3021  .  .  .  .  .  .  .  .  }
  3022  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3023  .  .  .  .  .  .  .  .  .  NamePos: example.go:187:52
  3024  .  .  .  .  .  .  .  .  .  Name: "UserInfo"
  3025  .  .  .  .  .  .  .  .  .  Obj: nil
  3026  .  .  .  .  .  .  .  .  }
  3027  .  .  .  .  .  .  .  }
  3028  .  .  .  .  .  .  .  Tag: nil
  3029  .  .  .  .  .  .  .  Comment: nil
  3030  .  .  .  .  .  .  }
  3031  .  .  .  .  .  }
  3032  .  .  .  .  .  Closing: example.go:187:60
  3033  .  .  .  .  }
  3034  .  .  .  .  Results: nil
  3035  .  .  .  }
  3036  .  .  .  Body: *ast.BlockStmt {
  3037  .  .  .  .  Lbrace: example.go:187:62
  3038  .  .  .  .  List: []ast.Stmt (len = 1) {
  3039  .  .  .  .  .  0: *ast.AssignStmt {
  3040  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  3041  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  3042  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3043  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3044  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3045  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:188:2
  3046  .  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  3047  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3007)
  3048  .  .  .  .  .  .  .  .  .  .  }
  3049  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3050  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:188:5
  3051  .  .  .  .  .  .  .  .  .  .  .  Name: "U"
  3052  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3053  .  .  .  .  .  .  .  .  .  .  }
  3054  .  .  .  .  .  .  .  .  .  }
  3055  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3056  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:188:7
  3057  .  .  .  .  .  .  .  .  .  .  Name: "U"
  3058  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3059  .  .  .  .  .  .  .  .  .  }
  3060  .  .  .  .  .  .  .  .  }
  3061  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3062  .  .  .  .  .  .  .  .  .  NamePos: example.go:188:9
  3063  .  .  .  .  .  .  .  .  .  Name: "Username"
  3064  .  .  .  .  .  .  .  .  .  Obj: nil
  3065  .  .  .  .  .  .  .  .  }
  3066  .  .  .  .  .  .  .  }
  3067  .  .  .  .  .  .  }
  3068  .  .  .  .  .  .  TokPos: example.go:188:18
  3069  .  .  .  .  .  .  Tok: =
  3070  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  3071  .  .  .  .  .  .  .  0: *ast.BasicLit {
  3072  .  .  .  .  .  .  .  .  ValuePos: example.go:188:20
  3073  .  .  .  .  .  .  .  .  Kind: STRING
  3074  .  .  .  .  .  .  .  .  Value: "\"\""
  3075  .  .  .  .  .  .  .  }
  3076  .  .  .  .  .  .  }
  3077  .  .  .  .  .  }
  3078  .  .  .  .  }
  3079  .  .  .  .  Rbrace: example.go:189:1
  3080  .  .  .  }
  3081  .  .  }
  3082  .  .  26: *ast.FuncDecl {
  3083  .  .  .  Doc: *ast.CommentGroup {
  3084  .  .  .  .  List: []*ast.Comment (len = 1) {
  3085  .  .  .  .  .  0: *ast.Comment {
  3086  .  .  .  .  .  .  Slash: example.go:191:1
  3087  .  .  .  .  .  .  Text: "// UserProtoToUser2 赋值是无用的"
  3088  .  .  .  .  .  }
  3089  .  .  .  .  }
  3090  .  .  .  }
  3091  .  .  .  Recv: nil
  3092  .  .  .  Name: *ast.Ident {
  3093  .  .  .  .  NamePos: example.go:192:6
  3094  .  .  .  .  Name: "UserProtoToUser2"
  3095  .  .  .  .  Obj: *ast.Object {
  3096  .  .  .  .  .  Kind: func
  3097  .  .  .  .  .  Name: "UserProtoToUser2"
  3098  .  .  .  .  .  Decl: *(obj @ 3082)
  3099  .  .  .  .  .  Data: nil
  3100  .  .  .  .  .  Type: nil
  3101  .  .  .  .  }
  3102  .  .  .  }
  3103  .  .  .  Type: *ast.FuncType {
  3104  .  .  .  .  Func: example.go:192:1
  3105  .  .  .  .  TypeParams: nil
  3106  .  .  .  .  Params: *ast.FieldList {
  3107  .  .  .  .  .  Opening: example.go:192:22
  3108  .  .  .  .  .  List: []*ast.Field (len = 2) {
  3109  .  .  .  .  .  .  0: *ast.Field {
  3110  .  .  .  .  .  .  .  Doc: nil
  3111  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3112  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3113  .  .  .  .  .  .  .  .  .  NamePos: example.go:192:23
  3114  .  .  .  .  .  .  .  .  .  Name: "u1"
  3115  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3116  .  .  .  .  .  .  .  .  .  .  Kind: var
  3117  .  .  .  .  .  .  .  .  .  .  Name: "u1"
  3118  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3109)
  3119  .  .  .  .  .  .  .  .  .  .  Data: nil
  3120  .  .  .  .  .  .  .  .  .  .  Type: nil
  3121  .  .  .  .  .  .  .  .  .  }
  3122  .  .  .  .  .  .  .  .  }
  3123  .  .  .  .  .  .  .  }
  3124  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3125  .  .  .  .  .  .  .  .  Star: example.go:192:26
  3126  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3127  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3128  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:192:27
  3129  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3130  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3131  .  .  .  .  .  .  .  .  .  }
  3132  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3133  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:192:33
  3134  .  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  3135  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3136  .  .  .  .  .  .  .  .  .  }
  3137  .  .  .  .  .  .  .  .  }
  3138  .  .  .  .  .  .  .  }
  3139  .  .  .  .  .  .  .  Tag: nil
  3140  .  .  .  .  .  .  .  Comment: nil
  3141  .  .  .  .  .  .  }
  3142  .  .  .  .  .  .  1: *ast.Field {
  3143  .  .  .  .  .  .  .  Doc: nil
  3144  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3145  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3146  .  .  .  .  .  .  .  .  .  NamePos: example.go:192:44
  3147  .  .  .  .  .  .  .  .  .  Name: "u2"
  3148  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3149  .  .  .  .  .  .  .  .  .  .  Kind: var
  3150  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  3151  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3142)
  3152  .  .  .  .  .  .  .  .  .  .  Data: nil
  3153  .  .  .  .  .  .  .  .  .  .  Type: nil
  3154  .  .  .  .  .  .  .  .  .  }
  3155  .  .  .  .  .  .  .  .  }
  3156  .  .  .  .  .  .  .  }
  3157  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3158  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3159  .  .  .  .  .  .  .  .  .  NamePos: example.go:192:47
  3160  .  .  .  .  .  .  .  .  .  Name: "model"
  3161  .  .  .  .  .  .  .  .  .  Obj: nil
  3162  .  .  .  .  .  .  .  .  }
  3163  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3164  .  .  .  .  .  .  .  .  .  NamePos: example.go:192:53
  3165  .  .  .  .  .  .  .  .  .  Name: "User"
  3166  .  .  .  .  .  .  .  .  .  Obj: nil
  3167  .  .  .  .  .  .  .  .  }
  3168  .  .  .  .  .  .  .  }
  3169  .  .  .  .  .  .  .  Tag: nil
  3170  .  .  .  .  .  .  .  Comment: nil
  3171  .  .  .  .  .  .  }
  3172  .  .  .  .  .  }
  3173  .  .  .  .  .  Closing: example.go:192:57
  3174  .  .  .  .  }
  3175  .  .  .  .  Results: nil
  3176  .  .  .  }
  3177  .  .  .  Body: *ast.BlockStmt {
  3178  .  .  .  .  Lbrace: example.go:192:59
  3179  .  .  .  .  List: []ast.Stmt (len = 1) {
  3180  .  .  .  .  .  0: *ast.AssignStmt {
  3181  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  3182  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  3183  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3184  .  .  .  .  .  .  .  .  .  NamePos: example.go:193:2
  3185  .  .  .  .  .  .  .  .  .  Name: "u2"
  3186  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3148)
  3187  .  .  .  .  .  .  .  .  }
  3188  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3189  .  .  .  .  .  .  .  .  .  NamePos: example.go:193:5
  3190  .  .  .  .  .  .  .  .  .  Name: "Id"
  3191  .  .  .  .  .  .  .  .  .  Obj: nil
  3192  .  .  .  .  .  .  .  .  }
  3193  .  .  .  .  .  .  .  }
  3194  .  .  .  .  .  .  }
  3195  .  .  .  .  .  .  TokPos: example.go:193:8
  3196  .  .  .  .  .  .  Tok: =
  3197  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  3198  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  3199  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3200  .  .  .  .  .  .  .  .  .  NamePos: example.go:193:10
  3201  .  .  .  .  .  .  .  .  .  Name: "u1"
  3202  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3115)
  3203  .  .  .  .  .  .  .  .  }
  3204  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3205  .  .  .  .  .  .  .  .  .  NamePos: example.go:193:13
  3206  .  .  .  .  .  .  .  .  .  Name: "Id"
  3207  .  .  .  .  .  .  .  .  .  Obj: nil
  3208  .  .  .  .  .  .  .  .  }
  3209  .  .  .  .  .  .  .  }
  3210  .  .  .  .  .  .  }
  3211  .  .  .  .  .  }
  3212  .  .  .  .  }
  3213  .  .  .  .  Rbrace: example.go:194:1
  3214  .  .  .  }
  3215  .  .  }
  3216  .  .  27: *ast.FuncDecl {
  3217  .  .  .  Doc: nil
  3218  .  .  .  Recv: nil
  3219  .  .  .  Name: *ast.Ident {
  3220  .  .  .  .  NamePos: example.go:196:6
  3221  .  .  .  .  Name: "UserProtoToUser3"
  3222  .  .  .  .  Obj: *ast.Object {
  3223  .  .  .  .  .  Kind: func
  3224  .  .  .  .  .  Name: "UserProtoToUser3"
  3225  .  .  .  .  .  Decl: *(obj @ 3216)
  3226  .  .  .  .  .  Data: nil
  3227  .  .  .  .  .  Type: nil
  3228  .  .  .  .  }
  3229  .  .  .  }
  3230  .  .  .  Type: *ast.FuncType {
  3231  .  .  .  .  Func: example.go:196:1
  3232  .  .  .  .  TypeParams: nil
  3233  .  .  .  .  Params: *ast.FieldList {
  3234  .  .  .  .  .  Opening: example.go:196:22
  3235  .  .  .  .  .  List: []*ast.Field (len = 2) {
  3236  .  .  .  .  .  .  0: *ast.Field {
  3237  .  .  .  .  .  .  .  Doc: nil
  3238  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3239  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3240  .  .  .  .  .  .  .  .  .  NamePos: example.go:196:23
  3241  .  .  .  .  .  .  .  .  .  Name: "u1"
  3242  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3243  .  .  .  .  .  .  .  .  .  .  Kind: var
  3244  .  .  .  .  .  .  .  .  .  .  Name: "u1"
  3245  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3236)
  3246  .  .  .  .  .  .  .  .  .  .  Data: nil
  3247  .  .  .  .  .  .  .  .  .  .  Type: nil
  3248  .  .  .  .  .  .  .  .  .  }
  3249  .  .  .  .  .  .  .  .  }
  3250  .  .  .  .  .  .  .  }
  3251  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3252  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3253  .  .  .  .  .  .  .  .  .  NamePos: example.go:196:26
  3254  .  .  .  .  .  .  .  .  .  Name: "model"
  3255  .  .  .  .  .  .  .  .  .  Obj: nil
  3256  .  .  .  .  .  .  .  .  }
  3257  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3258  .  .  .  .  .  .  .  .  .  NamePos: example.go:196:32
  3259  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  3260  .  .  .  .  .  .  .  .  .  Obj: nil
  3261  .  .  .  .  .  .  .  .  }
  3262  .  .  .  .  .  .  .  }
  3263  .  .  .  .  .  .  .  Tag: nil
  3264  .  .  .  .  .  .  .  Comment: nil
  3265  .  .  .  .  .  .  }
  3266  .  .  .  .  .  .  1: *ast.Field {
  3267  .  .  .  .  .  .  .  Doc: nil
  3268  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3269  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3270  .  .  .  .  .  .  .  .  .  NamePos: example.go:196:43
  3271  .  .  .  .  .  .  .  .  .  Name: "u2"
  3272  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3273  .  .  .  .  .  .  .  .  .  .  Kind: var
  3274  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  3275  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3266)
  3276  .  .  .  .  .  .  .  .  .  .  Data: nil
  3277  .  .  .  .  .  .  .  .  .  .  Type: nil
  3278  .  .  .  .  .  .  .  .  .  }
  3279  .  .  .  .  .  .  .  .  }
  3280  .  .  .  .  .  .  .  }
  3281  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3282  .  .  .  .  .  .  .  .  Star: example.go:196:46
  3283  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3284  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3285  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:196:47
  3286  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3287  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3288  .  .  .  .  .  .  .  .  .  }
  3289  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3290  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:196:53
  3291  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3292  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3293  .  .  .  .  .  .  .  .  .  }
  3294  .  .  .  .  .  .  .  .  }
  3295  .  .  .  .  .  .  .  }
  3296  .  .  .  .  .  .  .  Tag: nil
  3297  .  .  .  .  .  .  .  Comment: nil
  3298  .  .  .  .  .  .  }
  3299  .  .  .  .  .  }
  3300  .  .  .  .  .  Closing: example.go:196:57
  3301  .  .  .  .  }
  3302  .  .  .  .  Results: nil
  3303  .  .  .  }
  3304  .  .  .  Body: *ast.BlockStmt {
  3305  .  .  .  .  Lbrace: example.go:196:59
  3306  .  .  .  .  List: []ast.Stmt (len = 1) {
  3307  .  .  .  .  .  0: *ast.AssignStmt {
  3308  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  3309  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  3310  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3311  .  .  .  .  .  .  .  .  .  NamePos: example.go:197:2
  3312  .  .  .  .  .  .  .  .  .  Name: "u2"
  3313  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3272)
  3314  .  .  .  .  .  .  .  .  }
  3315  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3316  .  .  .  .  .  .  .  .  .  NamePos: example.go:197:5
  3317  .  .  .  .  .  .  .  .  .  Name: "Id"
  3318  .  .  .  .  .  .  .  .  .  Obj: nil
  3319  .  .  .  .  .  .  .  .  }
  3320  .  .  .  .  .  .  .  }
  3321  .  .  .  .  .  .  }
  3322  .  .  .  .  .  .  TokPos: example.go:197:8
  3323  .  .  .  .  .  .  Tok: =
  3324  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  3325  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  3326  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3327  .  .  .  .  .  .  .  .  .  NamePos: example.go:197:10
  3328  .  .  .  .  .  .  .  .  .  Name: "u1"
  3329  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3242)
  3330  .  .  .  .  .  .  .  .  }
  3331  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3332  .  .  .  .  .  .  .  .  .  NamePos: example.go:197:13
  3333  .  .  .  .  .  .  .  .  .  Name: "Id"
  3334  .  .  .  .  .  .  .  .  .  Obj: nil
  3335  .  .  .  .  .  .  .  .  }
  3336  .  .  .  .  .  .  .  }
  3337  .  .  .  .  .  .  }
  3338  .  .  .  .  .  }
  3339  .  .  .  .  }
  3340  .  .  .  .  Rbrace: example.go:198:1
  3341  .  .  .  }
  3342  .  .  }
  3343  .  .  28: *ast.FuncDecl {
  3344  .  .  .  Doc: nil
  3345  .  .  .  Recv: nil
  3346  .  .  .  Name: *ast.Ident {
  3347  .  .  .  .  NamePos: example.go:200:6
  3348  .  .  .  .  Name: "UserProtoToUser4"
  3349  .  .  .  .  Obj: *ast.Object {
  3350  .  .  .  .  .  Kind: func
  3351  .  .  .  .  .  Name: "UserProtoToUser4"
  3352  .  .  .  .  .  Decl: *(obj @ 3343)
  3353  .  .  .  .  .  Data: nil
  3354  .  .  .  .  .  Type: nil
  3355  .  .  .  .  }
  3356  .  .  .  }
  3357  .  .  .  Type: *ast.FuncType {
  3358  .  .  .  .  Func: example.go:200:1
  3359  .  .  .  .  TypeParams: nil
  3360  .  .  .  .  Params: *ast.FieldList {
  3361  .  .  .  .  .  Opening: example.go:200:22
  3362  .  .  .  .  .  List: []*ast.Field (len = 2) {
  3363  .  .  .  .  .  .  0: *ast.Field {
  3364  .  .  .  .  .  .  .  Doc: nil
  3365  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3366  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3367  .  .  .  .  .  .  .  .  .  NamePos: example.go:200:23
  3368  .  .  .  .  .  .  .  .  .  Name: "u1"
  3369  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3370  .  .  .  .  .  .  .  .  .  .  Kind: var
  3371  .  .  .  .  .  .  .  .  .  .  Name: "u1"
  3372  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3363)
  3373  .  .  .  .  .  .  .  .  .  .  Data: nil
  3374  .  .  .  .  .  .  .  .  .  .  Type: nil
  3375  .  .  .  .  .  .  .  .  .  }
  3376  .  .  .  .  .  .  .  .  }
  3377  .  .  .  .  .  .  .  }
  3378  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3379  .  .  .  .  .  .  .  .  Star: example.go:200:26
  3380  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3381  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3382  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:200:27
  3383  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3384  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3385  .  .  .  .  .  .  .  .  .  }
  3386  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3387  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:200:33
  3388  .  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  3389  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3390  .  .  .  .  .  .  .  .  .  }
  3391  .  .  .  .  .  .  .  .  }
  3392  .  .  .  .  .  .  .  }
  3393  .  .  .  .  .  .  .  Tag: nil
  3394  .  .  .  .  .  .  .  Comment: nil
  3395  .  .  .  .  .  .  }
  3396  .  .  .  .  .  .  1: *ast.Field {
  3397  .  .  .  .  .  .  .  Doc: nil
  3398  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3399  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3400  .  .  .  .  .  .  .  .  .  NamePos: example.go:200:44
  3401  .  .  .  .  .  .  .  .  .  Name: "u2"
  3402  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3403  .  .  .  .  .  .  .  .  .  .  Kind: var
  3404  .  .  .  .  .  .  .  .  .  .  Name: "u2"
  3405  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3396)
  3406  .  .  .  .  .  .  .  .  .  .  Data: nil
  3407  .  .  .  .  .  .  .  .  .  .  Type: nil
  3408  .  .  .  .  .  .  .  .  .  }
  3409  .  .  .  .  .  .  .  .  }
  3410  .  .  .  .  .  .  .  }
  3411  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3412  .  .  .  .  .  .  .  .  Star: example.go:200:47
  3413  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3414  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3415  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:200:48
  3416  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3417  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3418  .  .  .  .  .  .  .  .  .  }
  3419  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3420  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:200:54
  3421  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3422  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3423  .  .  .  .  .  .  .  .  .  }
  3424  .  .  .  .  .  .  .  .  }
  3425  .  .  .  .  .  .  .  }
  3426  .  .  .  .  .  .  .  Tag: nil
  3427  .  .  .  .  .  .  .  Comment: nil
  3428  .  .  .  .  .  .  }
  3429  .  .  .  .  .  }
  3430  .  .  .  .  .  Closing: example.go:200:58
  3431  .  .  .  .  }
  3432  .  .  .  .  Results: nil
  3433  .  .  .  }
  3434  .  .  .  Body: *ast.BlockStmt {
  3435  .  .  .  .  Lbrace: example.go:200:60
  3436  .  .  .  .  List: []ast.Stmt (len = 1) {
  3437  .  .  .  .  .  0: *ast.AssignStmt {
  3438  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  3439  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  3440  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3441  .  .  .  .  .  .  .  .  .  NamePos: example.go:201:2
  3442  .  .  .  .  .  .  .  .  .  Name: "u2"
  3443  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3402)
  3444  .  .  .  .  .  .  .  .  }
  3445  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3446  .  .  .  .  .  .  .  .  .  NamePos: example.go:201:5
  3447  .  .  .  .  .  .  .  .  .  Name: "Id"
  3448  .  .  .  .  .  .  .  .  .  Obj: nil
  3449  .  .  .  .  .  .  .  .  }
  3450  .  .  .  .  .  .  .  }
  3451  .  .  .  .  .  .  }
  3452  .  .  .  .  .  .  TokPos: example.go:201:8
  3453  .  .  .  .  .  .  Tok: =
  3454  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  3455  .  .  .  .  .  .  .  0: *ast.SelectorExpr {
  3456  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3457  .  .  .  .  .  .  .  .  .  NamePos: example.go:201:10
  3458  .  .  .  .  .  .  .  .  .  Name: "u1"
  3459  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3369)
  3460  .  .  .  .  .  .  .  .  }
  3461  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3462  .  .  .  .  .  .  .  .  .  NamePos: example.go:201:13
  3463  .  .  .  .  .  .  .  .  .  Name: "Id"
  3464  .  .  .  .  .  .  .  .  .  Obj: nil
  3465  .  .  .  .  .  .  .  .  }
  3466  .  .  .  .  .  .  .  }
  3467  .  .  .  .  .  .  }
  3468  .  .  .  .  .  }
  3469  .  .  .  .  }
  3470  .  .  .  .  Rbrace: example.go:202:1
  3471  .  .  .  }
  3472  .  .  }
  3473  .  .  29: *ast.FuncDecl {
  3474  .  .  .  Doc: nil
  3475  .  .  .  Recv: nil
  3476  .  .  .  Name: *ast.Ident {
  3477  .  .  .  .  NamePos: example.go:204:6
  3478  .  .  .  .  Name: "ToUser1"
  3479  .  .  .  .  Obj: *ast.Object {
  3480  .  .  .  .  .  Kind: func
  3481  .  .  .  .  .  Name: "ToUser1"
  3482  .  .  .  .  .  Decl: *(obj @ 3473)
  3483  .  .  .  .  .  Data: nil
  3484  .  .  .  .  .  Type: nil
  3485  .  .  .  .  }
  3486  .  .  .  }
  3487  .  .  .  Type: *ast.FuncType {
  3488  .  .  .  .  Func: example.go:204:1
  3489  .  .  .  .  TypeParams: nil
  3490  .  .  .  .  Params: *ast.FieldList {
  3491  .  .  .  .  .  Opening: example.go:204:13
  3492  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3493  .  .  .  .  .  .  0: *ast.Field {
  3494  .  .  .  .  .  .  .  Doc: nil
  3495  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3496  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3497  .  .  .  .  .  .  .  .  .  NamePos: example.go:204:14
  3498  .  .  .  .  .  .  .  .  .  Name: "u"
  3499  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3500  .  .  .  .  .  .  .  .  .  .  Kind: var
  3501  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3502  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3493)
  3503  .  .  .  .  .  .  .  .  .  .  Data: nil
  3504  .  .  .  .  .  .  .  .  .  .  Type: nil
  3505  .  .  .  .  .  .  .  .  .  }
  3506  .  .  .  .  .  .  .  .  }
  3507  .  .  .  .  .  .  .  }
  3508  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3509  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3510  .  .  .  .  .  .  .  .  .  NamePos: example.go:204:16
  3511  .  .  .  .  .  .  .  .  .  Name: "model"
  3512  .  .  .  .  .  .  .  .  .  Obj: nil
  3513  .  .  .  .  .  .  .  .  }
  3514  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3515  .  .  .  .  .  .  .  .  .  NamePos: example.go:204:22
  3516  .  .  .  .  .  .  .  .  .  Name: "User"
  3517  .  .  .  .  .  .  .  .  .  Obj: nil
  3518  .  .  .  .  .  .  .  .  }
  3519  .  .  .  .  .  .  .  }
  3520  .  .  .  .  .  .  .  Tag: nil
  3521  .  .  .  .  .  .  .  Comment: nil
  3522  .  .  .  .  .  .  }
  3523  .  .  .  .  .  }
  3524  .  .  .  .  .  Closing: example.go:204:26
  3525  .  .  .  .  }
  3526  .  .  .  .  Results: *ast.FieldList {
  3527  .  .  .  .  .  Opening: -
  3528  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3529  .  .  .  .  .  .  0: *ast.Field {
  3530  .  .  .  .  .  .  .  Doc: nil
  3531  .  .  .  .  .  .  .  Names: nil
  3532  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3533  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3534  .  .  .  .  .  .  .  .  .  NamePos: example.go:204:28
  3535  .  .  .  .  .  .  .  .  .  Name: "model"
  3536  .  .  .  .  .  .  .  .  .  Obj: nil
  3537  .  .  .  .  .  .  .  .  }
  3538  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3539  .  .  .  .  .  .  .  .  .  NamePos: example.go:204:34
  3540  .  .  .  .  .  .  .  .  .  Name: "User"
  3541  .  .  .  .  .  .  .  .  .  Obj: nil
  3542  .  .  .  .  .  .  .  .  }
  3543  .  .  .  .  .  .  .  }
  3544  .  .  .  .  .  .  .  Tag: nil
  3545  .  .  .  .  .  .  .  Comment: nil
  3546  .  .  .  .  .  .  }
  3547  .  .  .  .  .  }
  3548  .  .  .  .  .  Closing: -
  3549  .  .  .  .  }
  3550  .  .  .  }
  3551  .  .  .  Body: *ast.BlockStmt {
  3552  .  .  .  .  Lbrace: example.go:204:39
  3553  .  .  .  .  List: []ast.Stmt (len = 1) {
  3554  .  .  .  .  .  0: *ast.ReturnStmt {
  3555  .  .  .  .  .  .  Return: example.go:205:2
  3556  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  3557  .  .  .  .  .  .  .  0: *ast.CompositeLit {
  3558  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3559  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3560  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:205:9
  3561  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3562  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3563  .  .  .  .  .  .  .  .  .  }
  3564  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3565  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:205:15
  3566  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3567  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3568  .  .  .  .  .  .  .  .  .  }
  3569  .  .  .  .  .  .  .  .  }
  3570  .  .  .  .  .  .  .  .  Lbrace: example.go:205:19
  3571  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  3572  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  3573  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  3574  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:206:3
  3575  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3576  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3577  .  .  .  .  .  .  .  .  .  .  }
  3578  .  .  .  .  .  .  .  .  .  .  Colon: example.go:206:5
  3579  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  3580  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3581  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:206:7
  3582  .  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3583  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3499)
  3584  .  .  .  .  .  .  .  .  .  .  .  }
  3585  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3586  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:206:9
  3587  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3588  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3589  .  .  .  .  .  .  .  .  .  .  .  }
  3590  .  .  .  .  .  .  .  .  .  .  }
  3591  .  .  .  .  .  .  .  .  .  }
  3592  .  .  .  .  .  .  .  .  }
  3593  .  .  .  .  .  .  .  .  Rbrace: example.go:207:2
  3594  .  .  .  .  .  .  .  .  Incomplete: false
  3595  .  .  .  .  .  .  .  }
  3596  .  .  .  .  .  .  }
  3597  .  .  .  .  .  }
  3598  .  .  .  .  }
  3599  .  .  .  .  Rbrace: example.go:208:1
  3600  .  .  .  }
  3601  .  .  }
  3602  .  .  30: *ast.FuncDecl {
  3603  .  .  .  Doc: nil
  3604  .  .  .  Recv: nil
  3605  .  .  .  Name: *ast.Ident {
  3606  .  .  .  .  NamePos: example.go:210:6
  3607  .  .  .  .  Name: "ToUser2"
  3608  .  .  .  .  Obj: *ast.Object {
  3609  .  .  .  .  .  Kind: func
  3610  .  .  .  .  .  Name: "ToUser2"
  3611  .  .  .  .  .  Decl: *(obj @ 3602)
  3612  .  .  .  .  .  Data: nil
  3613  .  .  .  .  .  Type: nil
  3614  .  .  .  .  }
  3615  .  .  .  }
  3616  .  .  .  Type: *ast.FuncType {
  3617  .  .  .  .  Func: example.go:210:1
  3618  .  .  .  .  TypeParams: nil
  3619  .  .  .  .  Params: *ast.FieldList {
  3620  .  .  .  .  .  Opening: example.go:210:13
  3621  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3622  .  .  .  .  .  .  0: *ast.Field {
  3623  .  .  .  .  .  .  .  Doc: nil
  3624  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3625  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3626  .  .  .  .  .  .  .  .  .  NamePos: example.go:210:14
  3627  .  .  .  .  .  .  .  .  .  Name: "u"
  3628  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3629  .  .  .  .  .  .  .  .  .  .  Kind: var
  3630  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3631  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3622)
  3632  .  .  .  .  .  .  .  .  .  .  Data: nil
  3633  .  .  .  .  .  .  .  .  .  .  Type: nil
  3634  .  .  .  .  .  .  .  .  .  }
  3635  .  .  .  .  .  .  .  .  }
  3636  .  .  .  .  .  .  .  }
  3637  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3638  .  .  .  .  .  .  .  .  Star: example.go:210:16
  3639  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3640  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3641  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:210:17
  3642  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3643  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3644  .  .  .  .  .  .  .  .  .  }
  3645  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3646  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:210:23
  3647  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3648  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3649  .  .  .  .  .  .  .  .  .  }
  3650  .  .  .  .  .  .  .  .  }
  3651  .  .  .  .  .  .  .  }
  3652  .  .  .  .  .  .  .  Tag: nil
  3653  .  .  .  .  .  .  .  Comment: nil
  3654  .  .  .  .  .  .  }
  3655  .  .  .  .  .  }
  3656  .  .  .  .  .  Closing: example.go:210:27
  3657  .  .  .  .  }
  3658  .  .  .  .  Results: *ast.FieldList {
  3659  .  .  .  .  .  Opening: -
  3660  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3661  .  .  .  .  .  .  0: *ast.Field {
  3662  .  .  .  .  .  .  .  Doc: nil
  3663  .  .  .  .  .  .  .  Names: nil
  3664  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3665  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3666  .  .  .  .  .  .  .  .  .  NamePos: example.go:210:29
  3667  .  .  .  .  .  .  .  .  .  Name: "model"
  3668  .  .  .  .  .  .  .  .  .  Obj: nil
  3669  .  .  .  .  .  .  .  .  }
  3670  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3671  .  .  .  .  .  .  .  .  .  NamePos: example.go:210:35
  3672  .  .  .  .  .  .  .  .  .  Name: "User"
  3673  .  .  .  .  .  .  .  .  .  Obj: nil
  3674  .  .  .  .  .  .  .  .  }
  3675  .  .  .  .  .  .  .  }
  3676  .  .  .  .  .  .  .  Tag: nil
  3677  .  .  .  .  .  .  .  Comment: nil
  3678  .  .  .  .  .  .  }
  3679  .  .  .  .  .  }
  3680  .  .  .  .  .  Closing: -
  3681  .  .  .  .  }
  3682  .  .  .  }
  3683  .  .  .  Body: *ast.BlockStmt {
  3684  .  .  .  .  Lbrace: example.go:210:40
  3685  .  .  .  .  List: []ast.Stmt (len = 1) {
  3686  .  .  .  .  .  0: *ast.ReturnStmt {
  3687  .  .  .  .  .  .  Return: example.go:211:2
  3688  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  3689  .  .  .  .  .  .  .  0: *ast.CompositeLit {
  3690  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3691  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3692  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:211:9
  3693  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3694  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3695  .  .  .  .  .  .  .  .  .  }
  3696  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3697  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:211:15
  3698  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3699  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3700  .  .  .  .  .  .  .  .  .  }
  3701  .  .  .  .  .  .  .  .  }
  3702  .  .  .  .  .  .  .  .  Lbrace: example.go:211:19
  3703  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  3704  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  3705  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  3706  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:212:3
  3707  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3708  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3709  .  .  .  .  .  .  .  .  .  .  }
  3710  .  .  .  .  .  .  .  .  .  .  Colon: example.go:212:5
  3711  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  3712  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3713  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:212:7
  3714  .  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3715  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3628)
  3716  .  .  .  .  .  .  .  .  .  .  .  }
  3717  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3718  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:212:9
  3719  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3720  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3721  .  .  .  .  .  .  .  .  .  .  .  }
  3722  .  .  .  .  .  .  .  .  .  .  }
  3723  .  .  .  .  .  .  .  .  .  }
  3724  .  .  .  .  .  .  .  .  }
  3725  .  .  .  .  .  .  .  .  Rbrace: example.go:213:2
  3726  .  .  .  .  .  .  .  .  Incomplete: false
  3727  .  .  .  .  .  .  .  }
  3728  .  .  .  .  .  .  }
  3729  .  .  .  .  .  }
  3730  .  .  .  .  }
  3731  .  .  .  .  Rbrace: example.go:214:1
  3732  .  .  .  }
  3733  .  .  }
  3734  .  .  31: *ast.FuncDecl {
  3735  .  .  .  Doc: nil
  3736  .  .  .  Recv: nil
  3737  .  .  .  Name: *ast.Ident {
  3738  .  .  .  .  NamePos: example.go:216:6
  3739  .  .  .  .  Name: "ToUser3"
  3740  .  .  .  .  Obj: *ast.Object {
  3741  .  .  .  .  .  Kind: func
  3742  .  .  .  .  .  Name: "ToUser3"
  3743  .  .  .  .  .  Decl: *(obj @ 3734)
  3744  .  .  .  .  .  Data: nil
  3745  .  .  .  .  .  Type: nil
  3746  .  .  .  .  }
  3747  .  .  .  }
  3748  .  .  .  Type: *ast.FuncType {
  3749  .  .  .  .  Func: example.go:216:1
  3750  .  .  .  .  TypeParams: nil
  3751  .  .  .  .  Params: *ast.FieldList {
  3752  .  .  .  .  .  Opening: example.go:216:13
  3753  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3754  .  .  .  .  .  .  0: *ast.Field {
  3755  .  .  .  .  .  .  .  Doc: nil
  3756  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3757  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3758  .  .  .  .  .  .  .  .  .  NamePos: example.go:216:14
  3759  .  .  .  .  .  .  .  .  .  Name: "u"
  3760  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3761  .  .  .  .  .  .  .  .  .  .  Kind: var
  3762  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3763  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3754)
  3764  .  .  .  .  .  .  .  .  .  .  Data: nil
  3765  .  .  .  .  .  .  .  .  .  .  Type: nil
  3766  .  .  .  .  .  .  .  .  .  }
  3767  .  .  .  .  .  .  .  .  }
  3768  .  .  .  .  .  .  .  }
  3769  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3770  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3771  .  .  .  .  .  .  .  .  .  NamePos: example.go:216:16
  3772  .  .  .  .  .  .  .  .  .  Name: "model"
  3773  .  .  .  .  .  .  .  .  .  Obj: nil
  3774  .  .  .  .  .  .  .  .  }
  3775  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3776  .  .  .  .  .  .  .  .  .  NamePos: example.go:216:22
  3777  .  .  .  .  .  .  .  .  .  Name: "User"
  3778  .  .  .  .  .  .  .  .  .  Obj: nil
  3779  .  .  .  .  .  .  .  .  }
  3780  .  .  .  .  .  .  .  }
  3781  .  .  .  .  .  .  .  Tag: nil
  3782  .  .  .  .  .  .  .  Comment: nil
  3783  .  .  .  .  .  .  }
  3784  .  .  .  .  .  }
  3785  .  .  .  .  .  Closing: example.go:216:26
  3786  .  .  .  .  }
  3787  .  .  .  .  Results: *ast.FieldList {
  3788  .  .  .  .  .  Opening: -
  3789  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3790  .  .  .  .  .  .  0: *ast.Field {
  3791  .  .  .  .  .  .  .  Doc: nil
  3792  .  .  .  .  .  .  .  Names: nil
  3793  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3794  .  .  .  .  .  .  .  .  Star: example.go:216:28
  3795  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3796  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3797  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:216:29
  3798  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3799  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3800  .  .  .  .  .  .  .  .  .  }
  3801  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3802  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:216:35
  3803  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3804  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3805  .  .  .  .  .  .  .  .  .  }
  3806  .  .  .  .  .  .  .  .  }
  3807  .  .  .  .  .  .  .  }
  3808  .  .  .  .  .  .  .  Tag: nil
  3809  .  .  .  .  .  .  .  Comment: nil
  3810  .  .  .  .  .  .  }
  3811  .  .  .  .  .  }
  3812  .  .  .  .  .  Closing: -
  3813  .  .  .  .  }
  3814  .  .  .  }
  3815  .  .  .  Body: *ast.BlockStmt {
  3816  .  .  .  .  Lbrace: example.go:216:40
  3817  .  .  .  .  List: []ast.Stmt (len = 1) {
  3818  .  .  .  .  .  0: *ast.ReturnStmt {
  3819  .  .  .  .  .  .  Return: example.go:217:2
  3820  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  3821  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  3822  .  .  .  .  .  .  .  .  OpPos: example.go:217:9
  3823  .  .  .  .  .  .  .  .  Op: &
  3824  .  .  .  .  .  .  .  .  X: *ast.CompositeLit {
  3825  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3826  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3827  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:217:10
  3828  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3829  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3830  .  .  .  .  .  .  .  .  .  .  }
  3831  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3832  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:217:16
  3833  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3834  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3835  .  .  .  .  .  .  .  .  .  .  }
  3836  .  .  .  .  .  .  .  .  .  }
  3837  .  .  .  .  .  .  .  .  .  Lbrace: example.go:217:20
  3838  .  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  3839  .  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  3840  .  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  3841  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:218:3
  3842  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3843  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3844  .  .  .  .  .  .  .  .  .  .  .  }
  3845  .  .  .  .  .  .  .  .  .  .  .  Colon: example.go:218:5
  3846  .  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  3847  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3848  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:218:7
  3849  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3850  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3760)
  3851  .  .  .  .  .  .  .  .  .  .  .  .  }
  3852  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3853  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:218:9
  3854  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3855  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3856  .  .  .  .  .  .  .  .  .  .  .  .  }
  3857  .  .  .  .  .  .  .  .  .  .  .  }
  3858  .  .  .  .  .  .  .  .  .  .  }
  3859  .  .  .  .  .  .  .  .  .  }
  3860  .  .  .  .  .  .  .  .  .  Rbrace: example.go:219:2
  3861  .  .  .  .  .  .  .  .  .  Incomplete: false
  3862  .  .  .  .  .  .  .  .  }
  3863  .  .  .  .  .  .  .  }
  3864  .  .  .  .  .  .  }
  3865  .  .  .  .  .  }
  3866  .  .  .  .  }
  3867  .  .  .  .  Rbrace: example.go:220:1
  3868  .  .  .  }
  3869  .  .  }
  3870  .  .  32: *ast.FuncDecl {
  3871  .  .  .  Doc: nil
  3872  .  .  .  Recv: nil
  3873  .  .  .  Name: *ast.Ident {
  3874  .  .  .  .  NamePos: example.go:222:6
  3875  .  .  .  .  Name: "ToUser4"
  3876  .  .  .  .  Obj: *ast.Object {
  3877  .  .  .  .  .  Kind: func
  3878  .  .  .  .  .  Name: "ToUser4"
  3879  .  .  .  .  .  Decl: *(obj @ 3870)
  3880  .  .  .  .  .  Data: nil
  3881  .  .  .  .  .  Type: nil
  3882  .  .  .  .  }
  3883  .  .  .  }
  3884  .  .  .  Type: *ast.FuncType {
  3885  .  .  .  .  Func: example.go:222:1
  3886  .  .  .  .  TypeParams: nil
  3887  .  .  .  .  Params: *ast.FieldList {
  3888  .  .  .  .  .  Opening: example.go:222:13
  3889  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3890  .  .  .  .  .  .  0: *ast.Field {
  3891  .  .  .  .  .  .  .  Doc: nil
  3892  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  3893  .  .  .  .  .  .  .  .  0: *ast.Ident {
  3894  .  .  .  .  .  .  .  .  .  NamePos: example.go:222:14
  3895  .  .  .  .  .  .  .  .  .  Name: "u"
  3896  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  3897  .  .  .  .  .  .  .  .  .  .  Kind: var
  3898  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3899  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 3890)
  3900  .  .  .  .  .  .  .  .  .  .  Data: nil
  3901  .  .  .  .  .  .  .  .  .  .  Type: nil
  3902  .  .  .  .  .  .  .  .  .  }
  3903  .  .  .  .  .  .  .  .  }
  3904  .  .  .  .  .  .  .  }
  3905  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3906  .  .  .  .  .  .  .  .  Star: example.go:222:16
  3907  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3908  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3909  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:222:17
  3910  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3911  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3912  .  .  .  .  .  .  .  .  .  }
  3913  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3914  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:222:23
  3915  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3916  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3917  .  .  .  .  .  .  .  .  .  }
  3918  .  .  .  .  .  .  .  .  }
  3919  .  .  .  .  .  .  .  }
  3920  .  .  .  .  .  .  .  Tag: nil
  3921  .  .  .  .  .  .  .  Comment: nil
  3922  .  .  .  .  .  .  }
  3923  .  .  .  .  .  }
  3924  .  .  .  .  .  Closing: example.go:222:27
  3925  .  .  .  .  }
  3926  .  .  .  .  Results: *ast.FieldList {
  3927  .  .  .  .  .  Opening: -
  3928  .  .  .  .  .  List: []*ast.Field (len = 1) {
  3929  .  .  .  .  .  .  0: *ast.Field {
  3930  .  .  .  .  .  .  .  Doc: nil
  3931  .  .  .  .  .  .  .  Names: nil
  3932  .  .  .  .  .  .  .  Type: *ast.StarExpr {
  3933  .  .  .  .  .  .  .  .  Star: example.go:222:29
  3934  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  3935  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3936  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:222:30
  3937  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3938  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3939  .  .  .  .  .  .  .  .  .  }
  3940  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3941  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:222:36
  3942  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3943  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3944  .  .  .  .  .  .  .  .  .  }
  3945  .  .  .  .  .  .  .  .  }
  3946  .  .  .  .  .  .  .  }
  3947  .  .  .  .  .  .  .  Tag: nil
  3948  .  .  .  .  .  .  .  Comment: nil
  3949  .  .  .  .  .  .  }
  3950  .  .  .  .  .  }
  3951  .  .  .  .  .  Closing: -
  3952  .  .  .  .  }
  3953  .  .  .  }
  3954  .  .  .  Body: *ast.BlockStmt {
  3955  .  .  .  .  Lbrace: example.go:222:41
  3956  .  .  .  .  List: []ast.Stmt (len = 1) {
  3957  .  .  .  .  .  0: *ast.ReturnStmt {
  3958  .  .  .  .  .  .  Return: example.go:223:2
  3959  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  3960  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  3961  .  .  .  .  .  .  .  .  OpPos: example.go:223:9
  3962  .  .  .  .  .  .  .  .  Op: &
  3963  .  .  .  .  .  .  .  .  X: *ast.CompositeLit {
  3964  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  3965  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3966  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:223:10
  3967  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  3968  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3969  .  .  .  .  .  .  .  .  .  .  }
  3970  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3971  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:223:16
  3972  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  3973  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3974  .  .  .  .  .  .  .  .  .  .  }
  3975  .  .  .  .  .  .  .  .  .  }
  3976  .  .  .  .  .  .  .  .  .  Lbrace: example.go:223:20
  3977  .  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  3978  .  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  3979  .  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  3980  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:224:3
  3981  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3982  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3983  .  .  .  .  .  .  .  .  .  .  .  }
  3984  .  .  .  .  .  .  .  .  .  .  .  Colon: example.go:224:5
  3985  .  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  3986  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  3987  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:224:7
  3988  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  3989  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 3896)
  3990  .  .  .  .  .  .  .  .  .  .  .  .  }
  3991  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  3992  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:224:9
  3993  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  3994  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  3995  .  .  .  .  .  .  .  .  .  .  .  .  }
  3996  .  .  .  .  .  .  .  .  .  .  .  }
  3997  .  .  .  .  .  .  .  .  .  .  }
  3998  .  .  .  .  .  .  .  .  .  }
  3999  .  .  .  .  .  .  .  .  .  Rbrace: example.go:225:2
  4000  .  .  .  .  .  .  .  .  .  Incomplete: false
  4001  .  .  .  .  .  .  .  .  }
  4002  .  .  .  .  .  .  .  }
  4003  .  .  .  .  .  .  }
  4004  .  .  .  .  .  }
  4005  .  .  .  .  }
  4006  .  .  .  .  Rbrace: example.go:226:1
  4007  .  .  .  }
  4008  .  .  }
  4009  .  .  33: *ast.FuncDecl {
  4010  .  .  .  Doc: nil
  4011  .  .  .  Recv: nil
  4012  .  .  .  Name: *ast.Ident {
  4013  .  .  .  .  NamePos: example.go:228:6
  4014  .  .  .  .  Name: "ToUserSlice1"
  4015  .  .  .  .  Obj: *ast.Object {
  4016  .  .  .  .  .  Kind: func
  4017  .  .  .  .  .  Name: "ToUserSlice1"
  4018  .  .  .  .  .  Decl: *(obj @ 4009)
  4019  .  .  .  .  .  Data: nil
  4020  .  .  .  .  .  Type: nil
  4021  .  .  .  .  }
  4022  .  .  .  }
  4023  .  .  .  Type: *ast.FuncType {
  4024  .  .  .  .  Func: example.go:228:1
  4025  .  .  .  .  TypeParams: nil
  4026  .  .  .  .  Params: *ast.FieldList {
  4027  .  .  .  .  .  Opening: example.go:228:18
  4028  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4029  .  .  .  .  .  .  0: *ast.Field {
  4030  .  .  .  .  .  .  .  Doc: nil
  4031  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  4032  .  .  .  .  .  .  .  .  0: *ast.Ident {
  4033  .  .  .  .  .  .  .  .  .  NamePos: example.go:228:19
  4034  .  .  .  .  .  .  .  .  .  Name: "us"
  4035  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4036  .  .  .  .  .  .  .  .  .  .  Kind: var
  4037  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4038  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4029)
  4039  .  .  .  .  .  .  .  .  .  .  Data: nil
  4040  .  .  .  .  .  .  .  .  .  .  Type: nil
  4041  .  .  .  .  .  .  .  .  .  }
  4042  .  .  .  .  .  .  .  .  }
  4043  .  .  .  .  .  .  .  }
  4044  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4045  .  .  .  .  .  .  .  .  Lbrack: example.go:228:22
  4046  .  .  .  .  .  .  .  .  Len: nil
  4047  .  .  .  .  .  .  .  .  Elt: *ast.SelectorExpr {
  4048  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4049  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:228:24
  4050  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4051  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4052  .  .  .  .  .  .  .  .  .  }
  4053  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4054  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:228:30
  4055  .  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  4056  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4057  .  .  .  .  .  .  .  .  .  }
  4058  .  .  .  .  .  .  .  .  }
  4059  .  .  .  .  .  .  .  }
  4060  .  .  .  .  .  .  .  Tag: nil
  4061  .  .  .  .  .  .  .  Comment: nil
  4062  .  .  .  .  .  .  }
  4063  .  .  .  .  .  }
  4064  .  .  .  .  .  Closing: example.go:228:39
  4065  .  .  .  .  }
  4066  .  .  .  .  Results: *ast.FieldList {
  4067  .  .  .  .  .  Opening: -
  4068  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4069  .  .  .  .  .  .  0: *ast.Field {
  4070  .  .  .  .  .  .  .  Doc: nil
  4071  .  .  .  .  .  .  .  Names: nil
  4072  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4073  .  .  .  .  .  .  .  .  Lbrack: example.go:228:41
  4074  .  .  .  .  .  .  .  .  Len: nil
  4075  .  .  .  .  .  .  .  .  Elt: *ast.SelectorExpr {
  4076  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4077  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:228:43
  4078  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4079  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4080  .  .  .  .  .  .  .  .  .  }
  4081  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4082  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:228:49
  4083  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4084  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4085  .  .  .  .  .  .  .  .  .  }
  4086  .  .  .  .  .  .  .  .  }
  4087  .  .  .  .  .  .  .  }
  4088  .  .  .  .  .  .  .  Tag: nil
  4089  .  .  .  .  .  .  .  Comment: nil
  4090  .  .  .  .  .  .  }
  4091  .  .  .  .  .  }
  4092  .  .  .  .  .  Closing: -
  4093  .  .  .  .  }
  4094  .  .  .  }
  4095  .  .  .  Body: *ast.BlockStmt {
  4096  .  .  .  .  Lbrace: example.go:228:54
  4097  .  .  .  .  List: []ast.Stmt (len = 3) {
  4098  .  .  .  .  .  0: *ast.AssignStmt {
  4099  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4100  .  .  .  .  .  .  .  0: *ast.Ident {
  4101  .  .  .  .  .  .  .  .  NamePos: example.go:229:2
  4102  .  .  .  .  .  .  .  .  Name: "res"
  4103  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4104  .  .  .  .  .  .  .  .  .  Kind: var
  4105  .  .  .  .  .  .  .  .  .  Name: "res"
  4106  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4098)
  4107  .  .  .  .  .  .  .  .  .  Data: nil
  4108  .  .  .  .  .  .  .  .  .  Type: nil
  4109  .  .  .  .  .  .  .  .  }
  4110  .  .  .  .  .  .  .  }
  4111  .  .  .  .  .  .  }
  4112  .  .  .  .  .  .  TokPos: example.go:229:6
  4113  .  .  .  .  .  .  Tok: :=
  4114  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4115  .  .  .  .  .  .  .  0: *ast.CallExpr {
  4116  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  4117  .  .  .  .  .  .  .  .  .  NamePos: example.go:229:9
  4118  .  .  .  .  .  .  .  .  .  Name: "make"
  4119  .  .  .  .  .  .  .  .  .  Obj: nil
  4120  .  .  .  .  .  .  .  .  }
  4121  .  .  .  .  .  .  .  .  Lparen: example.go:229:13
  4122  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  4123  .  .  .  .  .  .  .  .  .  0: *ast.ArrayType {
  4124  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:229:14
  4125  .  .  .  .  .  .  .  .  .  .  Len: nil
  4126  .  .  .  .  .  .  .  .  .  .  Elt: *ast.SelectorExpr {
  4127  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4128  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:229:16
  4129  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4130  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4131  .  .  .  .  .  .  .  .  .  .  .  }
  4132  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4133  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:229:22
  4134  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4135  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4136  .  .  .  .  .  .  .  .  .  .  .  }
  4137  .  .  .  .  .  .  .  .  .  .  }
  4138  .  .  .  .  .  .  .  .  .  }
  4139  .  .  .  .  .  .  .  .  .  1: *ast.CallExpr {
  4140  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  4141  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:229:28
  4142  .  .  .  .  .  .  .  .  .  .  .  Name: "len"
  4143  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4144  .  .  .  .  .  .  .  .  .  .  }
  4145  .  .  .  .  .  .  .  .  .  .  Lparen: example.go:229:31
  4146  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  4147  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  4148  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:229:32
  4149  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4150  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4035)
  4151  .  .  .  .  .  .  .  .  .  .  .  }
  4152  .  .  .  .  .  .  .  .  .  .  }
  4153  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
  4154  .  .  .  .  .  .  .  .  .  .  Rparen: example.go:229:34
  4155  .  .  .  .  .  .  .  .  .  }
  4156  .  .  .  .  .  .  .  .  }
  4157  .  .  .  .  .  .  .  .  Ellipsis: -
  4158  .  .  .  .  .  .  .  .  Rparen: example.go:229:35
  4159  .  .  .  .  .  .  .  }
  4160  .  .  .  .  .  .  }
  4161  .  .  .  .  .  }
  4162  .  .  .  .  .  1: *ast.RangeStmt {
  4163  .  .  .  .  .  .  For: example.go:230:2
  4164  .  .  .  .  .  .  Key: *ast.Ident {
  4165  .  .  .  .  .  .  .  NamePos: example.go:230:6
  4166  .  .  .  .  .  .  .  Name: "i"
  4167  .  .  .  .  .  .  .  Obj: *ast.Object {
  4168  .  .  .  .  .  .  .  .  Kind: var
  4169  .  .  .  .  .  .  .  .  Name: "i"
  4170  .  .  .  .  .  .  .  .  Decl: *ast.AssignStmt {
  4171  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4172  .  .  .  .  .  .  .  .  .  .  0: *(obj @ 4164)
  4173  .  .  .  .  .  .  .  .  .  }
  4174  .  .  .  .  .  .  .  .  .  TokPos: example.go:230:8
  4175  .  .  .  .  .  .  .  .  .  Tok: :=
  4176  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4177  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  4178  .  .  .  .  .  .  .  .  .  .  .  OpPos: -
  4179  .  .  .  .  .  .  .  .  .  .  .  Op: range
  4180  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4181  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:230:17
  4182  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4183  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4035)
  4184  .  .  .  .  .  .  .  .  .  .  .  }
  4185  .  .  .  .  .  .  .  .  .  .  }
  4186  .  .  .  .  .  .  .  .  .  }
  4187  .  .  .  .  .  .  .  .  }
  4188  .  .  .  .  .  .  .  .  Data: nil
  4189  .  .  .  .  .  .  .  .  Type: nil
  4190  .  .  .  .  .  .  .  }
  4191  .  .  .  .  .  .  }
  4192  .  .  .  .  .  .  Value: nil
  4193  .  .  .  .  .  .  TokPos: example.go:230:8
  4194  .  .  .  .  .  .  Tok: :=
  4195  .  .  .  .  .  .  Range: example.go:230:11
  4196  .  .  .  .  .  .  X: *(obj @ 4180)
  4197  .  .  .  .  .  .  Body: *ast.BlockStmt {
  4198  .  .  .  .  .  .  .  Lbrace: example.go:230:20
  4199  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  4200  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
  4201  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4202  .  .  .  .  .  .  .  .  .  .  0: *ast.IndexExpr {
  4203  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4204  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:231:3
  4205  .  .  .  .  .  .  .  .  .  .  .  .  Name: "res"
  4206  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4103)
  4207  .  .  .  .  .  .  .  .  .  .  .  }
  4208  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:231:6
  4209  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  4210  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:231:7
  4211  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  4212  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4167)
  4213  .  .  .  .  .  .  .  .  .  .  .  }
  4214  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:231:8
  4215  .  .  .  .  .  .  .  .  .  .  }
  4216  .  .  .  .  .  .  .  .  .  }
  4217  .  .  .  .  .  .  .  .  .  TokPos: example.go:231:10
  4218  .  .  .  .  .  .  .  .  .  Tok: =
  4219  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4220  .  .  .  .  .  .  .  .  .  .  0: *ast.CompositeLit {
  4221  .  .  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  4222  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4223  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:231:12
  4224  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4225  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4226  .  .  .  .  .  .  .  .  .  .  .  .  }
  4227  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4228  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:231:18
  4229  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4230  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4231  .  .  .  .  .  .  .  .  .  .  .  .  }
  4232  .  .  .  .  .  .  .  .  .  .  .  }
  4233  .  .  .  .  .  .  .  .  .  .  .  Lbrace: example.go:231:22
  4234  .  .  .  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  4235  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  4236  .  .  .  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  4237  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:232:4
  4238  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  4239  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4240  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4241  .  .  .  .  .  .  .  .  .  .  .  .  .  Colon: example.go:232:6
  4242  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  4243  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.IndexExpr {
  4244  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4245  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:232:8
  4246  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4247  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4035)
  4248  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4249  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:232:10
  4250  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  4251  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:232:11
  4252  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  4253  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4167)
  4254  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4255  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:232:12
  4256  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4257  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4258  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:232:14
  4259  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  4260  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4261  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4262  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4263  .  .  .  .  .  .  .  .  .  .  .  .  }
  4264  .  .  .  .  .  .  .  .  .  .  .  }
  4265  .  .  .  .  .  .  .  .  .  .  .  Rbrace: example.go:233:3
  4266  .  .  .  .  .  .  .  .  .  .  .  Incomplete: false
  4267  .  .  .  .  .  .  .  .  .  .  }
  4268  .  .  .  .  .  .  .  .  .  }
  4269  .  .  .  .  .  .  .  .  }
  4270  .  .  .  .  .  .  .  }
  4271  .  .  .  .  .  .  .  Rbrace: example.go:234:2
  4272  .  .  .  .  .  .  }
  4273  .  .  .  .  .  }
  4274  .  .  .  .  .  2: *ast.ReturnStmt {
  4275  .  .  .  .  .  .  Return: example.go:236:2
  4276  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  4277  .  .  .  .  .  .  .  0: *ast.Ident {
  4278  .  .  .  .  .  .  .  .  NamePos: example.go:236:9
  4279  .  .  .  .  .  .  .  .  Name: "res"
  4280  .  .  .  .  .  .  .  .  Obj: *(obj @ 4103)
  4281  .  .  .  .  .  .  .  }
  4282  .  .  .  .  .  .  }
  4283  .  .  .  .  .  }
  4284  .  .  .  .  }
  4285  .  .  .  .  Rbrace: example.go:237:1
  4286  .  .  .  }
  4287  .  .  }
  4288  .  .  34: *ast.FuncDecl {
  4289  .  .  .  Doc: nil
  4290  .  .  .  Recv: nil
  4291  .  .  .  Name: *ast.Ident {
  4292  .  .  .  .  NamePos: example.go:239:6
  4293  .  .  .  .  Name: "ToUserSlice2"
  4294  .  .  .  .  Obj: *ast.Object {
  4295  .  .  .  .  .  Kind: func
  4296  .  .  .  .  .  Name: "ToUserSlice2"
  4297  .  .  .  .  .  Decl: *(obj @ 4288)
  4298  .  .  .  .  .  Data: nil
  4299  .  .  .  .  .  Type: nil
  4300  .  .  .  .  }
  4301  .  .  .  }
  4302  .  .  .  Type: *ast.FuncType {
  4303  .  .  .  .  Func: example.go:239:1
  4304  .  .  .  .  TypeParams: nil
  4305  .  .  .  .  Params: *ast.FieldList {
  4306  .  .  .  .  .  Opening: example.go:239:18
  4307  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4308  .  .  .  .  .  .  0: *ast.Field {
  4309  .  .  .  .  .  .  .  Doc: nil
  4310  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  4311  .  .  .  .  .  .  .  .  0: *ast.Ident {
  4312  .  .  .  .  .  .  .  .  .  NamePos: example.go:239:19
  4313  .  .  .  .  .  .  .  .  .  Name: "us"
  4314  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4315  .  .  .  .  .  .  .  .  .  .  Kind: var
  4316  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4317  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4308)
  4318  .  .  .  .  .  .  .  .  .  .  Data: nil
  4319  .  .  .  .  .  .  .  .  .  .  Type: nil
  4320  .  .  .  .  .  .  .  .  .  }
  4321  .  .  .  .  .  .  .  .  }
  4322  .  .  .  .  .  .  .  }
  4323  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4324  .  .  .  .  .  .  .  .  Lbrack: example.go:239:22
  4325  .  .  .  .  .  .  .  .  Len: nil
  4326  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  4327  .  .  .  .  .  .  .  .  .  Star: example.go:239:24
  4328  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  4329  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4330  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:239:25
  4331  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4332  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4333  .  .  .  .  .  .  .  .  .  .  }
  4334  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4335  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:239:31
  4336  .  .  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  4337  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4338  .  .  .  .  .  .  .  .  .  .  }
  4339  .  .  .  .  .  .  .  .  .  }
  4340  .  .  .  .  .  .  .  .  }
  4341  .  .  .  .  .  .  .  }
  4342  .  .  .  .  .  .  .  Tag: nil
  4343  .  .  .  .  .  .  .  Comment: nil
  4344  .  .  .  .  .  .  }
  4345  .  .  .  .  .  }
  4346  .  .  .  .  .  Closing: example.go:239:40
  4347  .  .  .  .  }
  4348  .  .  .  .  Results: *ast.FieldList {
  4349  .  .  .  .  .  Opening: -
  4350  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4351  .  .  .  .  .  .  0: *ast.Field {
  4352  .  .  .  .  .  .  .  Doc: nil
  4353  .  .  .  .  .  .  .  Names: nil
  4354  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4355  .  .  .  .  .  .  .  .  Lbrack: example.go:239:42
  4356  .  .  .  .  .  .  .  .  Len: nil
  4357  .  .  .  .  .  .  .  .  Elt: *ast.SelectorExpr {
  4358  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4359  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:239:44
  4360  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4361  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4362  .  .  .  .  .  .  .  .  .  }
  4363  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4364  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:239:50
  4365  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4366  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4367  .  .  .  .  .  .  .  .  .  }
  4368  .  .  .  .  .  .  .  .  }
  4369  .  .  .  .  .  .  .  }
  4370  .  .  .  .  .  .  .  Tag: nil
  4371  .  .  .  .  .  .  .  Comment: nil
  4372  .  .  .  .  .  .  }
  4373  .  .  .  .  .  }
  4374  .  .  .  .  .  Closing: -
  4375  .  .  .  .  }
  4376  .  .  .  }
  4377  .  .  .  Body: *ast.BlockStmt {
  4378  .  .  .  .  Lbrace: example.go:239:55
  4379  .  .  .  .  List: []ast.Stmt (len = 3) {
  4380  .  .  .  .  .  0: *ast.AssignStmt {
  4381  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4382  .  .  .  .  .  .  .  0: *ast.Ident {
  4383  .  .  .  .  .  .  .  .  NamePos: example.go:240:2
  4384  .  .  .  .  .  .  .  .  Name: "res"
  4385  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4386  .  .  .  .  .  .  .  .  .  Kind: var
  4387  .  .  .  .  .  .  .  .  .  Name: "res"
  4388  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4380)
  4389  .  .  .  .  .  .  .  .  .  Data: nil
  4390  .  .  .  .  .  .  .  .  .  Type: nil
  4391  .  .  .  .  .  .  .  .  }
  4392  .  .  .  .  .  .  .  }
  4393  .  .  .  .  .  .  }
  4394  .  .  .  .  .  .  TokPos: example.go:240:6
  4395  .  .  .  .  .  .  Tok: :=
  4396  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4397  .  .  .  .  .  .  .  0: *ast.CallExpr {
  4398  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  4399  .  .  .  .  .  .  .  .  .  NamePos: example.go:240:9
  4400  .  .  .  .  .  .  .  .  .  Name: "make"
  4401  .  .  .  .  .  .  .  .  .  Obj: nil
  4402  .  .  .  .  .  .  .  .  }
  4403  .  .  .  .  .  .  .  .  Lparen: example.go:240:13
  4404  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  4405  .  .  .  .  .  .  .  .  .  0: *ast.ArrayType {
  4406  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:240:14
  4407  .  .  .  .  .  .  .  .  .  .  Len: nil
  4408  .  .  .  .  .  .  .  .  .  .  Elt: *ast.SelectorExpr {
  4409  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4410  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:240:16
  4411  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4412  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4413  .  .  .  .  .  .  .  .  .  .  .  }
  4414  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4415  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:240:22
  4416  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4417  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4418  .  .  .  .  .  .  .  .  .  .  .  }
  4419  .  .  .  .  .  .  .  .  .  .  }
  4420  .  .  .  .  .  .  .  .  .  }
  4421  .  .  .  .  .  .  .  .  .  1: *ast.CallExpr {
  4422  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  4423  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:240:28
  4424  .  .  .  .  .  .  .  .  .  .  .  Name: "len"
  4425  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4426  .  .  .  .  .  .  .  .  .  .  }
  4427  .  .  .  .  .  .  .  .  .  .  Lparen: example.go:240:31
  4428  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  4429  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  4430  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:240:32
  4431  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4432  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4314)
  4433  .  .  .  .  .  .  .  .  .  .  .  }
  4434  .  .  .  .  .  .  .  .  .  .  }
  4435  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
  4436  .  .  .  .  .  .  .  .  .  .  Rparen: example.go:240:34
  4437  .  .  .  .  .  .  .  .  .  }
  4438  .  .  .  .  .  .  .  .  }
  4439  .  .  .  .  .  .  .  .  Ellipsis: -
  4440  .  .  .  .  .  .  .  .  Rparen: example.go:240:35
  4441  .  .  .  .  .  .  .  }
  4442  .  .  .  .  .  .  }
  4443  .  .  .  .  .  }
  4444  .  .  .  .  .  1: *ast.RangeStmt {
  4445  .  .  .  .  .  .  For: example.go:241:2
  4446  .  .  .  .  .  .  Key: *ast.Ident {
  4447  .  .  .  .  .  .  .  NamePos: example.go:241:6
  4448  .  .  .  .  .  .  .  Name: "i"
  4449  .  .  .  .  .  .  .  Obj: *ast.Object {
  4450  .  .  .  .  .  .  .  .  Kind: var
  4451  .  .  .  .  .  .  .  .  Name: "i"
  4452  .  .  .  .  .  .  .  .  Decl: *ast.AssignStmt {
  4453  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4454  .  .  .  .  .  .  .  .  .  .  0: *(obj @ 4446)
  4455  .  .  .  .  .  .  .  .  .  }
  4456  .  .  .  .  .  .  .  .  .  TokPos: example.go:241:8
  4457  .  .  .  .  .  .  .  .  .  Tok: :=
  4458  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4459  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  4460  .  .  .  .  .  .  .  .  .  .  .  OpPos: -
  4461  .  .  .  .  .  .  .  .  .  .  .  Op: range
  4462  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4463  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:241:17
  4464  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4465  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4314)
  4466  .  .  .  .  .  .  .  .  .  .  .  }
  4467  .  .  .  .  .  .  .  .  .  .  }
  4468  .  .  .  .  .  .  .  .  .  }
  4469  .  .  .  .  .  .  .  .  }
  4470  .  .  .  .  .  .  .  .  Data: nil
  4471  .  .  .  .  .  .  .  .  Type: nil
  4472  .  .  .  .  .  .  .  }
  4473  .  .  .  .  .  .  }
  4474  .  .  .  .  .  .  Value: nil
  4475  .  .  .  .  .  .  TokPos: example.go:241:8
  4476  .  .  .  .  .  .  Tok: :=
  4477  .  .  .  .  .  .  Range: example.go:241:11
  4478  .  .  .  .  .  .  X: *(obj @ 4462)
  4479  .  .  .  .  .  .  Body: *ast.BlockStmt {
  4480  .  .  .  .  .  .  .  Lbrace: example.go:241:20
  4481  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  4482  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
  4483  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4484  .  .  .  .  .  .  .  .  .  .  0: *ast.IndexExpr {
  4485  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4486  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:242:3
  4487  .  .  .  .  .  .  .  .  .  .  .  .  Name: "res"
  4488  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4385)
  4489  .  .  .  .  .  .  .  .  .  .  .  }
  4490  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:242:6
  4491  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  4492  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:242:7
  4493  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  4494  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4449)
  4495  .  .  .  .  .  .  .  .  .  .  .  }
  4496  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:242:8
  4497  .  .  .  .  .  .  .  .  .  .  }
  4498  .  .  .  .  .  .  .  .  .  }
  4499  .  .  .  .  .  .  .  .  .  TokPos: example.go:242:10
  4500  .  .  .  .  .  .  .  .  .  Tok: =
  4501  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4502  .  .  .  .  .  .  .  .  .  .  0: *ast.CompositeLit {
  4503  .  .  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  4504  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4505  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:242:12
  4506  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4507  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4508  .  .  .  .  .  .  .  .  .  .  .  .  }
  4509  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4510  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:242:18
  4511  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4512  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4513  .  .  .  .  .  .  .  .  .  .  .  .  }
  4514  .  .  .  .  .  .  .  .  .  .  .  }
  4515  .  .  .  .  .  .  .  .  .  .  .  Lbrace: example.go:242:22
  4516  .  .  .  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  4517  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  4518  .  .  .  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  4519  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:243:4
  4520  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  4521  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4522  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4523  .  .  .  .  .  .  .  .  .  .  .  .  .  Colon: example.go:243:6
  4524  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  4525  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.IndexExpr {
  4526  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4527  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:243:8
  4528  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4529  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4314)
  4530  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4531  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:243:10
  4532  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  4533  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:243:11
  4534  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  4535  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4449)
  4536  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4537  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:243:12
  4538  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4539  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4540  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:243:14
  4541  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  4542  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4543  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4544  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4545  .  .  .  .  .  .  .  .  .  .  .  .  }
  4546  .  .  .  .  .  .  .  .  .  .  .  }
  4547  .  .  .  .  .  .  .  .  .  .  .  Rbrace: example.go:244:3
  4548  .  .  .  .  .  .  .  .  .  .  .  Incomplete: false
  4549  .  .  .  .  .  .  .  .  .  .  }
  4550  .  .  .  .  .  .  .  .  .  }
  4551  .  .  .  .  .  .  .  .  }
  4552  .  .  .  .  .  .  .  }
  4553  .  .  .  .  .  .  .  Rbrace: example.go:245:2
  4554  .  .  .  .  .  .  }
  4555  .  .  .  .  .  }
  4556  .  .  .  .  .  2: *ast.ReturnStmt {
  4557  .  .  .  .  .  .  Return: example.go:247:2
  4558  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  4559  .  .  .  .  .  .  .  0: *ast.Ident {
  4560  .  .  .  .  .  .  .  .  NamePos: example.go:247:9
  4561  .  .  .  .  .  .  .  .  Name: "res"
  4562  .  .  .  .  .  .  .  .  Obj: *(obj @ 4385)
  4563  .  .  .  .  .  .  .  }
  4564  .  .  .  .  .  .  }
  4565  .  .  .  .  .  }
  4566  .  .  .  .  }
  4567  .  .  .  .  Rbrace: example.go:248:1
  4568  .  .  .  }
  4569  .  .  }
  4570  .  .  35: *ast.FuncDecl {
  4571  .  .  .  Doc: nil
  4572  .  .  .  Recv: nil
  4573  .  .  .  Name: *ast.Ident {
  4574  .  .  .  .  NamePos: example.go:250:6
  4575  .  .  .  .  Name: "ToUserSlice3"
  4576  .  .  .  .  Obj: *ast.Object {
  4577  .  .  .  .  .  Kind: func
  4578  .  .  .  .  .  Name: "ToUserSlice3"
  4579  .  .  .  .  .  Decl: *(obj @ 4570)
  4580  .  .  .  .  .  Data: nil
  4581  .  .  .  .  .  Type: nil
  4582  .  .  .  .  }
  4583  .  .  .  }
  4584  .  .  .  Type: *ast.FuncType {
  4585  .  .  .  .  Func: example.go:250:1
  4586  .  .  .  .  TypeParams: nil
  4587  .  .  .  .  Params: *ast.FieldList {
  4588  .  .  .  .  .  Opening: example.go:250:18
  4589  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4590  .  .  .  .  .  .  0: *ast.Field {
  4591  .  .  .  .  .  .  .  Doc: nil
  4592  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  4593  .  .  .  .  .  .  .  .  0: *ast.Ident {
  4594  .  .  .  .  .  .  .  .  .  NamePos: example.go:250:19
  4595  .  .  .  .  .  .  .  .  .  Name: "us"
  4596  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4597  .  .  .  .  .  .  .  .  .  .  Kind: var
  4598  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4599  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4590)
  4600  .  .  .  .  .  .  .  .  .  .  Data: nil
  4601  .  .  .  .  .  .  .  .  .  .  Type: nil
  4602  .  .  .  .  .  .  .  .  .  }
  4603  .  .  .  .  .  .  .  .  }
  4604  .  .  .  .  .  .  .  }
  4605  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4606  .  .  .  .  .  .  .  .  Lbrack: example.go:250:22
  4607  .  .  .  .  .  .  .  .  Len: nil
  4608  .  .  .  .  .  .  .  .  Elt: *ast.SelectorExpr {
  4609  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4610  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:250:24
  4611  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4612  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4613  .  .  .  .  .  .  .  .  .  }
  4614  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4615  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:250:30
  4616  .  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  4617  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4618  .  .  .  .  .  .  .  .  .  }
  4619  .  .  .  .  .  .  .  .  }
  4620  .  .  .  .  .  .  .  }
  4621  .  .  .  .  .  .  .  Tag: nil
  4622  .  .  .  .  .  .  .  Comment: nil
  4623  .  .  .  .  .  .  }
  4624  .  .  .  .  .  }
  4625  .  .  .  .  .  Closing: example.go:250:39
  4626  .  .  .  .  }
  4627  .  .  .  .  Results: *ast.FieldList {
  4628  .  .  .  .  .  Opening: -
  4629  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4630  .  .  .  .  .  .  0: *ast.Field {
  4631  .  .  .  .  .  .  .  Doc: nil
  4632  .  .  .  .  .  .  .  Names: nil
  4633  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4634  .  .  .  .  .  .  .  .  Lbrack: example.go:250:41
  4635  .  .  .  .  .  .  .  .  Len: nil
  4636  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  4637  .  .  .  .  .  .  .  .  .  Star: example.go:250:43
  4638  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  4639  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4640  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:250:44
  4641  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4642  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4643  .  .  .  .  .  .  .  .  .  .  }
  4644  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4645  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:250:50
  4646  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4647  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4648  .  .  .  .  .  .  .  .  .  .  }
  4649  .  .  .  .  .  .  .  .  .  }
  4650  .  .  .  .  .  .  .  .  }
  4651  .  .  .  .  .  .  .  }
  4652  .  .  .  .  .  .  .  Tag: nil
  4653  .  .  .  .  .  .  .  Comment: nil
  4654  .  .  .  .  .  .  }
  4655  .  .  .  .  .  }
  4656  .  .  .  .  .  Closing: -
  4657  .  .  .  .  }
  4658  .  .  .  }
  4659  .  .  .  Body: *ast.BlockStmt {
  4660  .  .  .  .  Lbrace: example.go:250:55
  4661  .  .  .  .  List: []ast.Stmt (len = 3) {
  4662  .  .  .  .  .  0: *ast.AssignStmt {
  4663  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4664  .  .  .  .  .  .  .  0: *ast.Ident {
  4665  .  .  .  .  .  .  .  .  NamePos: example.go:251:2
  4666  .  .  .  .  .  .  .  .  Name: "res"
  4667  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4668  .  .  .  .  .  .  .  .  .  Kind: var
  4669  .  .  .  .  .  .  .  .  .  Name: "res"
  4670  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4662)
  4671  .  .  .  .  .  .  .  .  .  Data: nil
  4672  .  .  .  .  .  .  .  .  .  Type: nil
  4673  .  .  .  .  .  .  .  .  }
  4674  .  .  .  .  .  .  .  }
  4675  .  .  .  .  .  .  }
  4676  .  .  .  .  .  .  TokPos: example.go:251:6
  4677  .  .  .  .  .  .  Tok: :=
  4678  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4679  .  .  .  .  .  .  .  0: *ast.CallExpr {
  4680  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  4681  .  .  .  .  .  .  .  .  .  NamePos: example.go:251:9
  4682  .  .  .  .  .  .  .  .  .  Name: "make"
  4683  .  .  .  .  .  .  .  .  .  Obj: nil
  4684  .  .  .  .  .  .  .  .  }
  4685  .  .  .  .  .  .  .  .  Lparen: example.go:251:13
  4686  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  4687  .  .  .  .  .  .  .  .  .  0: *ast.ArrayType {
  4688  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:251:14
  4689  .  .  .  .  .  .  .  .  .  .  Len: nil
  4690  .  .  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  4691  .  .  .  .  .  .  .  .  .  .  .  Star: example.go:251:16
  4692  .  .  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  4693  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4694  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:251:17
  4695  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4696  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4697  .  .  .  .  .  .  .  .  .  .  .  .  }
  4698  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4699  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:251:23
  4700  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4701  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4702  .  .  .  .  .  .  .  .  .  .  .  .  }
  4703  .  .  .  .  .  .  .  .  .  .  .  }
  4704  .  .  .  .  .  .  .  .  .  .  }
  4705  .  .  .  .  .  .  .  .  .  }
  4706  .  .  .  .  .  .  .  .  .  1: *ast.CallExpr {
  4707  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  4708  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:251:29
  4709  .  .  .  .  .  .  .  .  .  .  .  Name: "len"
  4710  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4711  .  .  .  .  .  .  .  .  .  .  }
  4712  .  .  .  .  .  .  .  .  .  .  Lparen: example.go:251:32
  4713  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  4714  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  4715  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:251:33
  4716  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4717  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4596)
  4718  .  .  .  .  .  .  .  .  .  .  .  }
  4719  .  .  .  .  .  .  .  .  .  .  }
  4720  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
  4721  .  .  .  .  .  .  .  .  .  .  Rparen: example.go:251:35
  4722  .  .  .  .  .  .  .  .  .  }
  4723  .  .  .  .  .  .  .  .  }
  4724  .  .  .  .  .  .  .  .  Ellipsis: -
  4725  .  .  .  .  .  .  .  .  Rparen: example.go:251:36
  4726  .  .  .  .  .  .  .  }
  4727  .  .  .  .  .  .  }
  4728  .  .  .  .  .  }
  4729  .  .  .  .  .  1: *ast.RangeStmt {
  4730  .  .  .  .  .  .  For: example.go:252:2
  4731  .  .  .  .  .  .  Key: *ast.Ident {
  4732  .  .  .  .  .  .  .  NamePos: example.go:252:6
  4733  .  .  .  .  .  .  .  Name: "i"
  4734  .  .  .  .  .  .  .  Obj: *ast.Object {
  4735  .  .  .  .  .  .  .  .  Kind: var
  4736  .  .  .  .  .  .  .  .  Name: "i"
  4737  .  .  .  .  .  .  .  .  Decl: *ast.AssignStmt {
  4738  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4739  .  .  .  .  .  .  .  .  .  .  0: *(obj @ 4731)
  4740  .  .  .  .  .  .  .  .  .  }
  4741  .  .  .  .  .  .  .  .  .  TokPos: example.go:252:8
  4742  .  .  .  .  .  .  .  .  .  Tok: :=
  4743  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4744  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  4745  .  .  .  .  .  .  .  .  .  .  .  OpPos: -
  4746  .  .  .  .  .  .  .  .  .  .  .  Op: range
  4747  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4748  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:252:17
  4749  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4750  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4596)
  4751  .  .  .  .  .  .  .  .  .  .  .  }
  4752  .  .  .  .  .  .  .  .  .  .  }
  4753  .  .  .  .  .  .  .  .  .  }
  4754  .  .  .  .  .  .  .  .  }
  4755  .  .  .  .  .  .  .  .  Data: nil
  4756  .  .  .  .  .  .  .  .  Type: nil
  4757  .  .  .  .  .  .  .  }
  4758  .  .  .  .  .  .  }
  4759  .  .  .  .  .  .  Value: nil
  4760  .  .  .  .  .  .  TokPos: example.go:252:8
  4761  .  .  .  .  .  .  Tok: :=
  4762  .  .  .  .  .  .  Range: example.go:252:11
  4763  .  .  .  .  .  .  X: *(obj @ 4747)
  4764  .  .  .  .  .  .  Body: *ast.BlockStmt {
  4765  .  .  .  .  .  .  .  Lbrace: example.go:252:20
  4766  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  4767  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
  4768  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4769  .  .  .  .  .  .  .  .  .  .  0: *ast.IndexExpr {
  4770  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4771  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:253:3
  4772  .  .  .  .  .  .  .  .  .  .  .  .  Name: "res"
  4773  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4667)
  4774  .  .  .  .  .  .  .  .  .  .  .  }
  4775  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:253:6
  4776  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  4777  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:253:7
  4778  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  4779  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4734)
  4780  .  .  .  .  .  .  .  .  .  .  .  }
  4781  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:253:8
  4782  .  .  .  .  .  .  .  .  .  .  }
  4783  .  .  .  .  .  .  .  .  .  }
  4784  .  .  .  .  .  .  .  .  .  TokPos: example.go:253:10
  4785  .  .  .  .  .  .  .  .  .  Tok: =
  4786  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4787  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  4788  .  .  .  .  .  .  .  .  .  .  .  OpPos: example.go:253:12
  4789  .  .  .  .  .  .  .  .  .  .  .  Op: &
  4790  .  .  .  .  .  .  .  .  .  .  .  X: *ast.CompositeLit {
  4791  .  .  .  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  4792  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4793  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:253:13
  4794  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4795  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4796  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4797  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4798  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:253:19
  4799  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4800  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4801  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4802  .  .  .  .  .  .  .  .  .  .  .  .  }
  4803  .  .  .  .  .  .  .  .  .  .  .  .  Lbrace: example.go:253:23
  4804  .  .  .  .  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  4805  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  4806  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  4807  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:254:4
  4808  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  4809  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4810  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4811  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Colon: example.go:254:6
  4812  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  4813  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.IndexExpr {
  4814  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4815  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:254:8
  4816  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4817  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4596)
  4818  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4819  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:254:10
  4820  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  4821  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:254:11
  4822  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  4823  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4734)
  4824  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4825  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:254:12
  4826  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4827  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4828  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:254:14
  4829  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  4830  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4831  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4832  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4833  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  4834  .  .  .  .  .  .  .  .  .  .  .  .  }
  4835  .  .  .  .  .  .  .  .  .  .  .  .  Rbrace: example.go:255:3
  4836  .  .  .  .  .  .  .  .  .  .  .  .  Incomplete: false
  4837  .  .  .  .  .  .  .  .  .  .  .  }
  4838  .  .  .  .  .  .  .  .  .  .  }
  4839  .  .  .  .  .  .  .  .  .  }
  4840  .  .  .  .  .  .  .  .  }
  4841  .  .  .  .  .  .  .  }
  4842  .  .  .  .  .  .  .  Rbrace: example.go:256:2
  4843  .  .  .  .  .  .  }
  4844  .  .  .  .  .  }
  4845  .  .  .  .  .  2: *ast.ReturnStmt {
  4846  .  .  .  .  .  .  Return: example.go:258:2
  4847  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  4848  .  .  .  .  .  .  .  0: *ast.Ident {
  4849  .  .  .  .  .  .  .  .  NamePos: example.go:258:9
  4850  .  .  .  .  .  .  .  .  Name: "res"
  4851  .  .  .  .  .  .  .  .  Obj: *(obj @ 4667)
  4852  .  .  .  .  .  .  .  }
  4853  .  .  .  .  .  .  }
  4854  .  .  .  .  .  }
  4855  .  .  .  .  }
  4856  .  .  .  .  Rbrace: example.go:259:1
  4857  .  .  .  }
  4858  .  .  }
  4859  .  .  36: *ast.FuncDecl {
  4860  .  .  .  Doc: nil
  4861  .  .  .  Recv: nil
  4862  .  .  .  Name: *ast.Ident {
  4863  .  .  .  .  NamePos: example.go:261:6
  4864  .  .  .  .  Name: "ToUserSlice4"
  4865  .  .  .  .  Obj: *ast.Object {
  4866  .  .  .  .  .  Kind: func
  4867  .  .  .  .  .  Name: "ToUserSlice4"
  4868  .  .  .  .  .  Decl: *(obj @ 4859)
  4869  .  .  .  .  .  Data: nil
  4870  .  .  .  .  .  Type: nil
  4871  .  .  .  .  }
  4872  .  .  .  }
  4873  .  .  .  Type: *ast.FuncType {
  4874  .  .  .  .  Func: example.go:261:1
  4875  .  .  .  .  TypeParams: nil
  4876  .  .  .  .  Params: *ast.FieldList {
  4877  .  .  .  .  .  Opening: example.go:261:18
  4878  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4879  .  .  .  .  .  .  0: *ast.Field {
  4880  .  .  .  .  .  .  .  Doc: nil
  4881  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  4882  .  .  .  .  .  .  .  .  0: *ast.Ident {
  4883  .  .  .  .  .  .  .  .  .  NamePos: example.go:261:19
  4884  .  .  .  .  .  .  .  .  .  Name: "us"
  4885  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4886  .  .  .  .  .  .  .  .  .  .  Kind: var
  4887  .  .  .  .  .  .  .  .  .  .  Name: "us"
  4888  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4879)
  4889  .  .  .  .  .  .  .  .  .  .  Data: nil
  4890  .  .  .  .  .  .  .  .  .  .  Type: nil
  4891  .  .  .  .  .  .  .  .  .  }
  4892  .  .  .  .  .  .  .  .  }
  4893  .  .  .  .  .  .  .  }
  4894  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4895  .  .  .  .  .  .  .  .  Lbrack: example.go:261:22
  4896  .  .  .  .  .  .  .  .  Len: nil
  4897  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  4898  .  .  .  .  .  .  .  .  .  Star: example.go:261:24
  4899  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  4900  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4901  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:261:25
  4902  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4903  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4904  .  .  .  .  .  .  .  .  .  .  }
  4905  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4906  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:261:31
  4907  .  .  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  4908  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4909  .  .  .  .  .  .  .  .  .  .  }
  4910  .  .  .  .  .  .  .  .  .  }
  4911  .  .  .  .  .  .  .  .  }
  4912  .  .  .  .  .  .  .  }
  4913  .  .  .  .  .  .  .  Tag: nil
  4914  .  .  .  .  .  .  .  Comment: nil
  4915  .  .  .  .  .  .  }
  4916  .  .  .  .  .  }
  4917  .  .  .  .  .  Closing: example.go:261:40
  4918  .  .  .  .  }
  4919  .  .  .  .  Results: *ast.FieldList {
  4920  .  .  .  .  .  Opening: -
  4921  .  .  .  .  .  List: []*ast.Field (len = 1) {
  4922  .  .  .  .  .  .  0: *ast.Field {
  4923  .  .  .  .  .  .  .  Doc: nil
  4924  .  .  .  .  .  .  .  Names: nil
  4925  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  4926  .  .  .  .  .  .  .  .  Lbrack: example.go:261:42
  4927  .  .  .  .  .  .  .  .  Len: nil
  4928  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  4929  .  .  .  .  .  .  .  .  .  Star: example.go:261:44
  4930  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  4931  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4932  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:261:45
  4933  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4934  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4935  .  .  .  .  .  .  .  .  .  .  }
  4936  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4937  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:261:51
  4938  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4939  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4940  .  .  .  .  .  .  .  .  .  .  }
  4941  .  .  .  .  .  .  .  .  .  }
  4942  .  .  .  .  .  .  .  .  }
  4943  .  .  .  .  .  .  .  }
  4944  .  .  .  .  .  .  .  Tag: nil
  4945  .  .  .  .  .  .  .  Comment: nil
  4946  .  .  .  .  .  .  }
  4947  .  .  .  .  .  }
  4948  .  .  .  .  .  Closing: -
  4949  .  .  .  .  }
  4950  .  .  .  }
  4951  .  .  .  Body: *ast.BlockStmt {
  4952  .  .  .  .  Lbrace: example.go:261:56
  4953  .  .  .  .  List: []ast.Stmt (len = 3) {
  4954  .  .  .  .  .  0: *ast.AssignStmt {
  4955  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  4956  .  .  .  .  .  .  .  0: *ast.Ident {
  4957  .  .  .  .  .  .  .  .  NamePos: example.go:262:2
  4958  .  .  .  .  .  .  .  .  Name: "res"
  4959  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  4960  .  .  .  .  .  .  .  .  .  Kind: var
  4961  .  .  .  .  .  .  .  .  .  Name: "res"
  4962  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 4954)
  4963  .  .  .  .  .  .  .  .  .  Data: nil
  4964  .  .  .  .  .  .  .  .  .  Type: nil
  4965  .  .  .  .  .  .  .  .  }
  4966  .  .  .  .  .  .  .  }
  4967  .  .  .  .  .  .  }
  4968  .  .  .  .  .  .  TokPos: example.go:262:6
  4969  .  .  .  .  .  .  Tok: :=
  4970  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  4971  .  .  .  .  .  .  .  0: *ast.CallExpr {
  4972  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  4973  .  .  .  .  .  .  .  .  .  NamePos: example.go:262:9
  4974  .  .  .  .  .  .  .  .  .  Name: "make"
  4975  .  .  .  .  .  .  .  .  .  Obj: nil
  4976  .  .  .  .  .  .  .  .  }
  4977  .  .  .  .  .  .  .  .  Lparen: example.go:262:13
  4978  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  4979  .  .  .  .  .  .  .  .  .  0: *ast.ArrayType {
  4980  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:262:14
  4981  .  .  .  .  .  .  .  .  .  .  Len: nil
  4982  .  .  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  4983  .  .  .  .  .  .  .  .  .  .  .  Star: example.go:262:16
  4984  .  .  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  4985  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  4986  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:262:17
  4987  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  4988  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4989  .  .  .  .  .  .  .  .  .  .  .  .  }
  4990  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  4991  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:262:23
  4992  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  4993  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  4994  .  .  .  .  .  .  .  .  .  .  .  .  }
  4995  .  .  .  .  .  .  .  .  .  .  .  }
  4996  .  .  .  .  .  .  .  .  .  .  }
  4997  .  .  .  .  .  .  .  .  .  }
  4998  .  .  .  .  .  .  .  .  .  1: *ast.CallExpr {
  4999  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  5000  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:262:29
  5001  .  .  .  .  .  .  .  .  .  .  .  Name: "len"
  5002  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5003  .  .  .  .  .  .  .  .  .  .  }
  5004  .  .  .  .  .  .  .  .  .  .  Lparen: example.go:262:32
  5005  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  5006  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  5007  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:262:33
  5008  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  5009  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4885)
  5010  .  .  .  .  .  .  .  .  .  .  .  }
  5011  .  .  .  .  .  .  .  .  .  .  }
  5012  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
  5013  .  .  .  .  .  .  .  .  .  .  Rparen: example.go:262:35
  5014  .  .  .  .  .  .  .  .  .  }
  5015  .  .  .  .  .  .  .  .  }
  5016  .  .  .  .  .  .  .  .  Ellipsis: -
  5017  .  .  .  .  .  .  .  .  Rparen: example.go:262:36
  5018  .  .  .  .  .  .  .  }
  5019  .  .  .  .  .  .  }
  5020  .  .  .  .  .  }
  5021  .  .  .  .  .  1: *ast.RangeStmt {
  5022  .  .  .  .  .  .  For: example.go:263:2
  5023  .  .  .  .  .  .  Key: *ast.Ident {
  5024  .  .  .  .  .  .  .  NamePos: example.go:263:6
  5025  .  .  .  .  .  .  .  Name: "i"
  5026  .  .  .  .  .  .  .  Obj: *ast.Object {
  5027  .  .  .  .  .  .  .  .  Kind: var
  5028  .  .  .  .  .  .  .  .  Name: "i"
  5029  .  .  .  .  .  .  .  .  Decl: *ast.AssignStmt {
  5030  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  5031  .  .  .  .  .  .  .  .  .  .  0: *(obj @ 5023)
  5032  .  .  .  .  .  .  .  .  .  }
  5033  .  .  .  .  .  .  .  .  .  TokPos: example.go:263:8
  5034  .  .  .  .  .  .  .  .  .  Tok: :=
  5035  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  5036  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  5037  .  .  .  .  .  .  .  .  .  .  .  OpPos: -
  5038  .  .  .  .  .  .  .  .  .  .  .  Op: range
  5039  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5040  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:263:17
  5041  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  5042  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4885)
  5043  .  .  .  .  .  .  .  .  .  .  .  }
  5044  .  .  .  .  .  .  .  .  .  .  }
  5045  .  .  .  .  .  .  .  .  .  }
  5046  .  .  .  .  .  .  .  .  }
  5047  .  .  .  .  .  .  .  .  Data: nil
  5048  .  .  .  .  .  .  .  .  Type: nil
  5049  .  .  .  .  .  .  .  }
  5050  .  .  .  .  .  .  }
  5051  .  .  .  .  .  .  Value: nil
  5052  .  .  .  .  .  .  TokPos: example.go:263:8
  5053  .  .  .  .  .  .  Tok: :=
  5054  .  .  .  .  .  .  Range: example.go:263:11
  5055  .  .  .  .  .  .  X: *(obj @ 5039)
  5056  .  .  .  .  .  .  Body: *ast.BlockStmt {
  5057  .  .  .  .  .  .  .  Lbrace: example.go:263:20
  5058  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  5059  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
  5060  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  5061  .  .  .  .  .  .  .  .  .  .  0: *ast.IndexExpr {
  5062  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5063  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:264:3
  5064  .  .  .  .  .  .  .  .  .  .  .  .  Name: "res"
  5065  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4959)
  5066  .  .  .  .  .  .  .  .  .  .  .  }
  5067  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:264:6
  5068  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  5069  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:264:7
  5070  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  5071  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5026)
  5072  .  .  .  .  .  .  .  .  .  .  .  }
  5073  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:264:8
  5074  .  .  .  .  .  .  .  .  .  .  }
  5075  .  .  .  .  .  .  .  .  .  }
  5076  .  .  .  .  .  .  .  .  .  TokPos: example.go:264:10
  5077  .  .  .  .  .  .  .  .  .  Tok: =
  5078  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  5079  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  5080  .  .  .  .  .  .  .  .  .  .  .  OpPos: example.go:264:12
  5081  .  .  .  .  .  .  .  .  .  .  .  Op: &
  5082  .  .  .  .  .  .  .  .  .  .  .  X: *ast.CompositeLit {
  5083  .  .  .  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  5084  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5085  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:264:13
  5086  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  5087  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5088  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5089  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  5090  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:264:19
  5091  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  5092  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5093  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5094  .  .  .  .  .  .  .  .  .  .  .  .  }
  5095  .  .  .  .  .  .  .  .  .  .  .  .  Lbrace: example.go:264:23
  5096  .  .  .  .  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  5097  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  5098  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  5099  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:265:4
  5100  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  5101  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5102  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5103  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Colon: example.go:265:6
  5104  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  5105  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.IndexExpr {
  5106  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5107  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:265:8
  5108  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  5109  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 4885)
  5110  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5111  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:265:10
  5112  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  5113  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:265:11
  5114  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  5115  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5026)
  5116  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5117  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:265:12
  5118  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5119  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  5120  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:265:14
  5121  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  5122  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5123  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5124  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5125  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5126  .  .  .  .  .  .  .  .  .  .  .  .  }
  5127  .  .  .  .  .  .  .  .  .  .  .  .  Rbrace: example.go:266:3
  5128  .  .  .  .  .  .  .  .  .  .  .  .  Incomplete: false
  5129  .  .  .  .  .  .  .  .  .  .  .  }
  5130  .  .  .  .  .  .  .  .  .  .  }
  5131  .  .  .  .  .  .  .  .  .  }
  5132  .  .  .  .  .  .  .  .  }
  5133  .  .  .  .  .  .  .  }
  5134  .  .  .  .  .  .  .  Rbrace: example.go:267:2
  5135  .  .  .  .  .  .  }
  5136  .  .  .  .  .  }
  5137  .  .  .  .  .  2: *ast.ReturnStmt {
  5138  .  .  .  .  .  .  Return: example.go:269:2
  5139  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  5140  .  .  .  .  .  .  .  0: *ast.Ident {
  5141  .  .  .  .  .  .  .  .  NamePos: example.go:269:9
  5142  .  .  .  .  .  .  .  .  Name: "res"
  5143  .  .  .  .  .  .  .  .  Obj: *(obj @ 4959)
  5144  .  .  .  .  .  .  .  }
  5145  .  .  .  .  .  .  }
  5146  .  .  .  .  .  }
  5147  .  .  .  .  }
  5148  .  .  .  .  Rbrace: example.go:270:1
  5149  .  .  .  }
  5150  .  .  }
  5151  .  .  37: *ast.FuncDecl {
  5152  .  .  .  Doc: nil
  5153  .  .  .  Recv: nil
  5154  .  .  .  Name: *ast.Ident {
  5155  .  .  .  .  NamePos: example.go:272:6
  5156  .  .  .  .  Name: "ToUserSlice5"
  5157  .  .  .  .  Obj: *ast.Object {
  5158  .  .  .  .  .  Kind: func
  5159  .  .  .  .  .  Name: "ToUserSlice5"
  5160  .  .  .  .  .  Decl: *(obj @ 5151)
  5161  .  .  .  .  .  Data: nil
  5162  .  .  .  .  .  Type: nil
  5163  .  .  .  .  }
  5164  .  .  .  }
  5165  .  .  .  Type: *ast.FuncType {
  5166  .  .  .  .  Func: example.go:272:1
  5167  .  .  .  .  TypeParams: nil
  5168  .  .  .  .  Params: *ast.FieldList {
  5169  .  .  .  .  .  Opening: example.go:272:18
  5170  .  .  .  .  .  List: []*ast.Field (len = 1) {
  5171  .  .  .  .  .  .  0: *ast.Field {
  5172  .  .  .  .  .  .  .  Doc: nil
  5173  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  5174  .  .  .  .  .  .  .  .  0: *ast.Ident {
  5175  .  .  .  .  .  .  .  .  .  NamePos: example.go:272:19
  5176  .  .  .  .  .  .  .  .  .  Name: "us"
  5177  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  5178  .  .  .  .  .  .  .  .  .  .  Kind: var
  5179  .  .  .  .  .  .  .  .  .  .  Name: "us"
  5180  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 5171)
  5181  .  .  .  .  .  .  .  .  .  .  Data: nil
  5182  .  .  .  .  .  .  .  .  .  .  Type: nil
  5183  .  .  .  .  .  .  .  .  .  }
  5184  .  .  .  .  .  .  .  .  }
  5185  .  .  .  .  .  .  .  }
  5186  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  5187  .  .  .  .  .  .  .  .  Lbrack: example.go:272:22
  5188  .  .  .  .  .  .  .  .  Len: nil
  5189  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  5190  .  .  .  .  .  .  .  .  .  Star: example.go:272:24
  5191  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  5192  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5193  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:272:25
  5194  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  5195  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5196  .  .  .  .  .  .  .  .  .  .  }
  5197  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  5198  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:272:31
  5199  .  .  .  .  .  .  .  .  .  .  .  Name: "UserProto"
  5200  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5201  .  .  .  .  .  .  .  .  .  .  }
  5202  .  .  .  .  .  .  .  .  .  }
  5203  .  .  .  .  .  .  .  .  }
  5204  .  .  .  .  .  .  .  }
  5205  .  .  .  .  .  .  .  Tag: nil
  5206  .  .  .  .  .  .  .  Comment: nil
  5207  .  .  .  .  .  .  }
  5208  .  .  .  .  .  }
  5209  .  .  .  .  .  Closing: example.go:272:40
  5210  .  .  .  .  }
  5211  .  .  .  .  Results: *ast.FieldList {
  5212  .  .  .  .  .  Opening: example.go:272:42
  5213  .  .  .  .  .  List: []*ast.Field (len = 1) {
  5214  .  .  .  .  .  .  0: *ast.Field {
  5215  .  .  .  .  .  .  .  Doc: nil
  5216  .  .  .  .  .  .  .  Names: []*ast.Ident (len = 1) {
  5217  .  .  .  .  .  .  .  .  0: *ast.Ident {
  5218  .  .  .  .  .  .  .  .  .  NamePos: example.go:272:43
  5219  .  .  .  .  .  .  .  .  .  Name: "u"
  5220  .  .  .  .  .  .  .  .  .  Obj: *ast.Object {
  5221  .  .  .  .  .  .  .  .  .  .  Kind: var
  5222  .  .  .  .  .  .  .  .  .  .  Name: "u"
  5223  .  .  .  .  .  .  .  .  .  .  Decl: *(obj @ 5214)
  5224  .  .  .  .  .  .  .  .  .  .  Data: nil
  5225  .  .  .  .  .  .  .  .  .  .  Type: nil
  5226  .  .  .  .  .  .  .  .  .  }
  5227  .  .  .  .  .  .  .  .  }
  5228  .  .  .  .  .  .  .  }
  5229  .  .  .  .  .  .  .  Type: *ast.ArrayType {
  5230  .  .  .  .  .  .  .  .  Lbrack: example.go:272:45
  5231  .  .  .  .  .  .  .  .  Len: nil
  5232  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  5233  .  .  .  .  .  .  .  .  .  Star: example.go:272:47
  5234  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  5235  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5236  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:272:48
  5237  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  5238  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5239  .  .  .  .  .  .  .  .  .  .  }
  5240  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  5241  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:272:54
  5242  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  5243  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5244  .  .  .  .  .  .  .  .  .  .  }
  5245  .  .  .  .  .  .  .  .  .  }
  5246  .  .  .  .  .  .  .  .  }
  5247  .  .  .  .  .  .  .  }
  5248  .  .  .  .  .  .  .  Tag: nil
  5249  .  .  .  .  .  .  .  Comment: nil
  5250  .  .  .  .  .  .  }
  5251  .  .  .  .  .  }
  5252  .  .  .  .  .  Closing: example.go:272:58
  5253  .  .  .  .  }
  5254  .  .  .  }
  5255  .  .  .  Body: *ast.BlockStmt {
  5256  .  .  .  .  Lbrace: example.go:272:60
  5257  .  .  .  .  List: []ast.Stmt (len = 3) {
  5258  .  .  .  .  .  0: *ast.AssignStmt {
  5259  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  5260  .  .  .  .  .  .  .  0: *ast.Ident {
  5261  .  .  .  .  .  .  .  .  NamePos: example.go:273:2
  5262  .  .  .  .  .  .  .  .  Name: "u"
  5263  .  .  .  .  .  .  .  .  Obj: *(obj @ 5220)
  5264  .  .  .  .  .  .  .  }
  5265  .  .  .  .  .  .  }
  5266  .  .  .  .  .  .  TokPos: example.go:273:4
  5267  .  .  .  .  .  .  Tok: =
  5268  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  5269  .  .  .  .  .  .  .  0: *ast.CallExpr {
  5270  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  5271  .  .  .  .  .  .  .  .  .  NamePos: example.go:273:6
  5272  .  .  .  .  .  .  .  .  .  Name: "make"
  5273  .  .  .  .  .  .  .  .  .  Obj: nil
  5274  .  .  .  .  .  .  .  .  }
  5275  .  .  .  .  .  .  .  .  Lparen: example.go:273:10
  5276  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
  5277  .  .  .  .  .  .  .  .  .  0: *ast.ArrayType {
  5278  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:273:11
  5279  .  .  .  .  .  .  .  .  .  .  Len: nil
  5280  .  .  .  .  .  .  .  .  .  .  Elt: *ast.StarExpr {
  5281  .  .  .  .  .  .  .  .  .  .  .  Star: example.go:273:13
  5282  .  .  .  .  .  .  .  .  .  .  .  X: *ast.SelectorExpr {
  5283  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5284  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:273:14
  5285  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  5286  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5287  .  .  .  .  .  .  .  .  .  .  .  .  }
  5288  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  5289  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:273:20
  5290  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  5291  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5292  .  .  .  .  .  .  .  .  .  .  .  .  }
  5293  .  .  .  .  .  .  .  .  .  .  .  }
  5294  .  .  .  .  .  .  .  .  .  .  }
  5295  .  .  .  .  .  .  .  .  .  }
  5296  .  .  .  .  .  .  .  .  .  1: *ast.CallExpr {
  5297  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
  5298  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:273:26
  5299  .  .  .  .  .  .  .  .  .  .  .  Name: "len"
  5300  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5301  .  .  .  .  .  .  .  .  .  .  }
  5302  .  .  .  .  .  .  .  .  .  .  Lparen: example.go:273:29
  5303  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
  5304  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
  5305  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:273:30
  5306  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  5307  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5177)
  5308  .  .  .  .  .  .  .  .  .  .  .  }
  5309  .  .  .  .  .  .  .  .  .  .  }
  5310  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
  5311  .  .  .  .  .  .  .  .  .  .  Rparen: example.go:273:32
  5312  .  .  .  .  .  .  .  .  .  }
  5313  .  .  .  .  .  .  .  .  }
  5314  .  .  .  .  .  .  .  .  Ellipsis: -
  5315  .  .  .  .  .  .  .  .  Rparen: example.go:273:33
  5316  .  .  .  .  .  .  .  }
  5317  .  .  .  .  .  .  }
  5318  .  .  .  .  .  }
  5319  .  .  .  .  .  1: *ast.RangeStmt {
  5320  .  .  .  .  .  .  For: example.go:274:2
  5321  .  .  .  .  .  .  Key: *ast.Ident {
  5322  .  .  .  .  .  .  .  NamePos: example.go:274:6
  5323  .  .  .  .  .  .  .  Name: "i"
  5324  .  .  .  .  .  .  .  Obj: *ast.Object {
  5325  .  .  .  .  .  .  .  .  Kind: var
  5326  .  .  .  .  .  .  .  .  Name: "i"
  5327  .  .  .  .  .  .  .  .  Decl: *ast.AssignStmt {
  5328  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  5329  .  .  .  .  .  .  .  .  .  .  0: *(obj @ 5321)
  5330  .  .  .  .  .  .  .  .  .  }
  5331  .  .  .  .  .  .  .  .  .  TokPos: example.go:274:8
  5332  .  .  .  .  .  .  .  .  .  Tok: :=
  5333  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  5334  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  5335  .  .  .  .  .  .  .  .  .  .  .  OpPos: -
  5336  .  .  .  .  .  .  .  .  .  .  .  Op: range
  5337  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5338  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:274:17
  5339  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  5340  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5177)
  5341  .  .  .  .  .  .  .  .  .  .  .  }
  5342  .  .  .  .  .  .  .  .  .  .  }
  5343  .  .  .  .  .  .  .  .  .  }
  5344  .  .  .  .  .  .  .  .  }
  5345  .  .  .  .  .  .  .  .  Data: nil
  5346  .  .  .  .  .  .  .  .  Type: nil
  5347  .  .  .  .  .  .  .  }
  5348  .  .  .  .  .  .  }
  5349  .  .  .  .  .  .  Value: nil
  5350  .  .  .  .  .  .  TokPos: example.go:274:8
  5351  .  .  .  .  .  .  Tok: :=
  5352  .  .  .  .  .  .  Range: example.go:274:11
  5353  .  .  .  .  .  .  X: *(obj @ 5337)
  5354  .  .  .  .  .  .  Body: *ast.BlockStmt {
  5355  .  .  .  .  .  .  .  Lbrace: example.go:274:20
  5356  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
  5357  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
  5358  .  .  .  .  .  .  .  .  .  Lhs: []ast.Expr (len = 1) {
  5359  .  .  .  .  .  .  .  .  .  .  0: *ast.IndexExpr {
  5360  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5361  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:275:3
  5362  .  .  .  .  .  .  .  .  .  .  .  .  Name: "u"
  5363  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5220)
  5364  .  .  .  .  .  .  .  .  .  .  .  }
  5365  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:275:4
  5366  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  5367  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:275:5
  5368  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  5369  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5324)
  5370  .  .  .  .  .  .  .  .  .  .  .  }
  5371  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:275:6
  5372  .  .  .  .  .  .  .  .  .  .  }
  5373  .  .  .  .  .  .  .  .  .  }
  5374  .  .  .  .  .  .  .  .  .  TokPos: example.go:275:8
  5375  .  .  .  .  .  .  .  .  .  Tok: =
  5376  .  .  .  .  .  .  .  .  .  Rhs: []ast.Expr (len = 1) {
  5377  .  .  .  .  .  .  .  .  .  .  0: *ast.UnaryExpr {
  5378  .  .  .  .  .  .  .  .  .  .  .  OpPos: example.go:275:10
  5379  .  .  .  .  .  .  .  .  .  .  .  Op: &
  5380  .  .  .  .  .  .  .  .  .  .  .  X: *ast.CompositeLit {
  5381  .  .  .  .  .  .  .  .  .  .  .  .  Type: *ast.SelectorExpr {
  5382  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5383  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:275:11
  5384  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "model"
  5385  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5386  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5387  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  5388  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:275:17
  5389  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "User"
  5390  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5391  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5392  .  .  .  .  .  .  .  .  .  .  .  .  }
  5393  .  .  .  .  .  .  .  .  .  .  .  .  Lbrace: example.go:275:21
  5394  .  .  .  .  .  .  .  .  .  .  .  .  Elts: []ast.Expr (len = 1) {
  5395  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.KeyValueExpr {
  5396  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Key: *ast.Ident {
  5397  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:276:4
  5398  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  5399  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5400  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5401  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Colon: example.go:276:6
  5402  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: *ast.SelectorExpr {
  5403  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.IndexExpr {
  5404  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  X: *ast.Ident {
  5405  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:276:8
  5406  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "us"
  5407  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5177)
  5408  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5409  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Lbrack: example.go:276:10
  5410  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Index: *ast.Ident {
  5411  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:276:11
  5412  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
  5413  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: *(obj @ 5324)
  5414  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5415  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Rbrack: example.go:276:12
  5416  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5417  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
  5418  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: example.go:276:14
  5419  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "Id"
  5420  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Obj: nil
  5421  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5422  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5423  .  .  .  .  .  .  .  .  .  .  .  .  .  }
  5424  .  .  .  .  .  .  .  .  .  .  .  .  }
  5425  .  .  .  .  .  .  .  .  .  .  .  .  Rbrace: example.go:277:3
  5426  .  .  .  .  .  .  .  .  .  .  .  .  Incomplete: false
  5427  .  .  .  .  .  .  .  .  .  .  .  }
  5428  .  .  .  .  .  .  .  .  .  .  }
  5429  .  .  .  .  .  .  .  .  .  }
  5430  .  .  .  .  .  .  .  .  }
  5431  .  .  .  .  .  .  .  }
  5432  .  .  .  .  .  .  .  Rbrace: example.go:278:2
  5433  .  .  .  .  .  .  }
  5434  .  .  .  .  .  }
  5435  .  .  .  .  .  2: *ast.ReturnStmt {
  5436  .  .  .  .  .  .  Return: example.go:280:2
  5437  .  .  .  .  .  .  Results: []ast.Expr (len = 1) {
  5438  .  .  .  .  .  .  .  0: *ast.Ident {
  5439  .  .  .  .  .  .  .  .  NamePos: example.go:280:9
  5440  .  .  .  .  .  .  .  .  Name: "u"
  5441  .  .  .  .  .  .  .  .  Obj: *(obj @ 5220)
  5442  .  .  .  .  .  .  .  }
  5443  .  .  .  .  .  .  }
  5444  .  .  .  .  .  }
  5445  .  .  .  .  }
  5446  .  .  .  .  Rbrace: example.go:281:1
  5447  .  .  .  }
  5448  .  .  }
  5449  .  }
  5450  .  FileStart: example.go:1:1
  5451  .  FileEnd: example.go:281:3
  5452  .  Scope: *ast.Scope {
  5453  .  .  Outer: nil
  5454  .  .  Objects: map[string]*ast.Object (len = 36) {
  5455  .  .  .  "Conv4": *(obj @ 1578)
  5456  .  .  .  "UserProtoToUser2": *(obj @ 3095)
  5457  .  .  .  "ToUserSlice3": *(obj @ 4576)
  5458  .  .  .  "Conv": *(obj @ 1751)
  5459  .  .  .  "Conv1": *(obj @ 1885)
  5460  .  .  .  "NumToNum": *(obj @ 2394)
  5461  .  .  .  "ToUser1": *(obj @ 3479)
  5462  .  .  .  "ToUser2": *(obj @ 3608)
  5463  .  .  .  "UserProto": *(obj @ 427)
  5464  .  .  .  "User": *(obj @ 813)
  5465  .  .  .  "User1": *(obj @ 876)
  5466  .  .  .  "ToUserSlice4": *(obj @ 4865)
  5467  .  .  .  "ToUserSlice5": *(obj @ 5157)
  5468  .  .  .  "UserProtoToUser1": *(obj @ 2957)
  5469  .  .  .  "ToUser3": *(obj @ 3740)
  5470  .  .  .  "UserInfo": *(obj @ 1005)
  5471  .  .  .  "Conv3": *(obj @ 1242)
  5472  .  .  .  "NumToString": *(obj @ 2153)
  5473  .  .  .  "MyInteger": *(obj @ 146)
  5474  .  .  .  "Conv2": *(obj @ 2030)
  5475  .  .  .  "ConvUser": *(obj @ 2603)
  5476  .  .  .  "ToUser4": *(obj @ 3876)
  5477  .  .  .  "TypeTestType": *(obj @ 115)
  5478  .  .  .  "Interface": *(obj @ 363)
  5479  .  .  .  "ConvUserInterface": *(obj @ 2758)
  5480  .  .  .  "User2": *(obj @ 942)
  5481  .  .  .  "BuildParseInt": *(obj @ 1090)
  5482  .  .  .  "UserProtoToUser3": *(obj @ 3222)
  5483  .  .  .  "TestType": *(obj @ 84)
  5484  .  .  .  "OuterStruct": *(obj @ 225)
  5485  .  .  .  "St": *(obj @ 304)
  5486  .  .  .  "ToUserSlice2": *(obj @ 4294)
  5487  .  .  .  "ToUserSlice1": *(obj @ 4015)
  5488  .  .  .  "MyIntegerPointer": *(obj @ 184)
  5489  .  .  .  "OuterStructPointer": *(obj @ 263)
  5490  .  .  .  "UserProtoToUser4": *(obj @ 3349)
  5491  .  .  }
  5492  .  }
  5493  .  Imports: []*ast.ImportSpec (len = 5) {
  5494  .  .  0: *(obj @ 15)
  5495  .  .  1: *(obj @ 26)
  5496  .  .  2: *(obj @ 37)
  5497  .  .  3: *(obj @ 48)
  5498  .  .  4: *(obj @ 59)
  5499  .  }
  5500  .  Unresolved: []*ast.Ident (len = 100) {
  5501  .  .  0: *(obj @ 94)
  5502  .  .  1: *(obj @ 157)
  5503  .  .  2: *(obj @ 197)
  5504  .  .  3: *(obj @ 236)
  5505  .  .  4: *(obj @ 276)
  5506  .  .  5: *(obj @ 334)
  5507  .  .  6: *(obj @ 745)
  5508  .  .  7: *(obj @ 777)
  5509  .  .  8: *(obj @ 843)
  5510  .  .  9: *(obj @ 908)
  5511  .  .  10: *(obj @ 1035)
  5512  .  .  11: *(obj @ 1062)
  5513  .  .  12: *(obj @ 1165)
  5514  .  .  13: *(obj @ 1202)
  5515  .  .  14: *(obj @ 1272)
  5516  .  .  15: *(obj @ 1302)
  5517  .  .  16: *(obj @ 1338)
  5518  .  .  17: *(obj @ 1362)
  5519  .  .  18: *(obj @ 1381)
  5520  .  .  19: *(obj @ 1390)
  5521  .  .  20: *(obj @ 1500)
  5522  .  .  21: *(obj @ 1525)
  5523  .  .  22: *(obj @ 1534)
  5524  .  .  23: *(obj @ 1608)
  5525  .  .  24: *(obj @ 1638)
  5526  .  .  25: *(obj @ 1676)
  5527  .  .  26: *(obj @ 1700)
  5528  .  .  27: *(obj @ 1709)
  5529  .  .  28: *(obj @ 1827)
  5530  .  .  29: *(obj @ 1836)
  5531  .  .  30: *(obj @ 1915)
  5532  .  .  31: *(obj @ 1947)
  5533  .  .  32: *(obj @ 1972)
  5534  .  .  33: *(obj @ 1981)
  5535  .  .  34: *(obj @ 2060)
  5536  .  .  35: *(obj @ 2084)
  5537  .  .  36: *(obj @ 2107)
  5538  .  .  37: *(obj @ 2116)
  5539  .  .  38: *(obj @ 2217)
  5540  .  .  39: *(obj @ 2231)
  5541  .  .  40: *(obj @ 2261)
  5542  .  .  41: *(obj @ 2275)
  5543  .  .  42: *(obj @ 2304)
  5544  .  .  43: *(obj @ 2318)
  5545  .  .  44: *(obj @ 2361)
  5546  .  .  45: *(obj @ 2501)
  5547  .  .  46: *(obj @ 2537)
  5548  .  .  47: *(obj @ 2565)
  5549  .  .  48: *(obj @ 2887)
  5550  .  .  49: *(obj @ 2930)
  5551  .  .  50: *(obj @ 2987)
  5552  .  .  51: *(obj @ 3017)
  5553  .  .  52: *(obj @ 3127)
  5554  .  .  53: *(obj @ 3158)
  5555  .  .  54: *(obj @ 3252)
  5556  .  .  55: *(obj @ 3284)
  5557  .  .  56: *(obj @ 3381)
  5558  .  .  57: *(obj @ 3414)
  5559  .  .  58: *(obj @ 3509)
  5560  .  .  59: *(obj @ 3533)
  5561  .  .  60: *(obj @ 3559)
  5562  .  .  61: *(obj @ 3640)
  5563  .  .  62: *(obj @ 3665)
  5564  .  .  63: *(obj @ 3691)
  5565  .  .  64: *(obj @ 3770)
  5566  .  .  65: *(obj @ 3796)
  5567  .  .  66: *(obj @ 3826)
  5568  .  .  67: *(obj @ 3908)
  5569  .  .  68: *(obj @ 3935)
  5570  .  .  69: *(obj @ 3965)
  5571  .  .  70: *(obj @ 4048)
  5572  .  .  71: *(obj @ 4076)
  5573  .  .  72: *(obj @ 4116)
  5574  .  .  73: *(obj @ 4127)
  5575  .  .  74: *(obj @ 4140)
  5576  .  .  75: *(obj @ 4222)
  5577  .  .  76: *(obj @ 4329)
  5578  .  .  77: *(obj @ 4358)
  5579  .  .  78: *(obj @ 4398)
  5580  .  .  79: *(obj @ 4409)
  5581  .  .  80: *(obj @ 4422)
  5582  .  .  81: *(obj @ 4504)
  5583  .  .  82: *(obj @ 4609)
  5584  .  .  83: *(obj @ 4639)
  5585  .  .  84: *(obj @ 4680)
  5586  .  .  85: *(obj @ 4693)
  5587  .  .  86: *(obj @ 4707)
  5588  .  .  87: *(obj @ 4792)
  5589  .  .  88: *(obj @ 4900)
  5590  .  .  89: *(obj @ 4931)
  5591  .  .  90: *(obj @ 4972)
  5592  .  .  91: *(obj @ 4985)
  5593  .  .  92: *(obj @ 4999)
  5594  .  .  93: *(obj @ 5084)
  5595  .  .  94: *(obj @ 5192)
  5596  .  .  95: *(obj @ 5235)
  5597  .  .  96: *(obj @ 5270)
  5598  .  .  97: *(obj @ 5283)
  5599  .  .  98: *(obj @ 5297)
  5600  .  .  99: *(obj @ 5382)
  5601  .  }
  5602  .  Comments: []*ast.CommentGroup (len = 7) {
  5603  .  .  0: *(obj @ 443)
  5604  .  .  1: *(obj @ 1230)
  5605  .  .  2: *(obj @ 1566)
  5606  .  .  3: *(obj @ 1873)
  5607  .  .  4: *(obj @ 2018)
  5608  .  .  5: *(obj @ 2945)
  5609  .  .  6: *(obj @ 3083)
  5610  .  }
  5611  .  GoVersion: ""
  5612  }
