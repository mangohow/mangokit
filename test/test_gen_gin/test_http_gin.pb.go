// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.0
// - protoc             v5.26.1
// source: test_gen_gin/test.proto

package test

import (
	"context"

	"github.com/mangohow/mangokit/transport/http"
)

type HelloHTTPService interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayHelloEmptyRequest(context.Context) (*HelloResponse, error)
	SayHelloEmptyResponse(context.Context, *HelloRequest) error
	SayHelloEmpty(context.Context) error
	PostApi(context.Context, *PostRequest) error
	GetApi(context.Context, *GetRequest) error
}

func RegisterHelloHTTPService(server *http.Server, svc HelloHTTPService) {
	server.RegisterService(_HelloHTTPService_serviceDesc, svc)
}

func _Hello_SayHello_HTTP_Handler(svc interface{}, ctx context.Context, dec func(interface{}) error, middleware http.Middleware) (interface{}, error) {
	in := new(HelloRequest)
	err := dec(in)
	if err != nil {
		return nil, err
	}

	if middleware == nil {
		return svc.(HelloHTTPService).SayHello(ctx, in)
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return svc.(HelloHTTPService).SayHello(ctx, in)
	}

	return middleware(ctx, in, handler)

}

func _Hello_SayHelloEmptyRequest_HTTP_Handler(svc interface{}, ctx context.Context, dec func(interface{}) error, middleware http.Middleware) (interface{}, error) {
	if middleware == nil {
		return svc.(HelloHTTPService).SayHelloEmptyRequest(ctx)
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return svc.(HelloHTTPService).SayHelloEmptyRequest(ctx)
	}

	return middleware(ctx, nil, handler)

}

func _Hello_SayHelloEmptyResponse_HTTP_Handler(svc interface{}, ctx context.Context, dec func(interface{}) error, middleware http.Middleware) (interface{}, error) {
	in := new(HelloRequest)
	err := dec(in)
	if err != nil {
		return nil, err
	}

	if middleware == nil {
		return nil, svc.(HelloHTTPService).SayHelloEmptyResponse(ctx, in)
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, svc.(HelloHTTPService).SayHelloEmptyResponse(ctx, in)
	}

	return middleware(ctx, in, handler)

}

func _Hello_SayHelloEmpty_HTTP_Handler(svc interface{}, ctx context.Context, dec func(interface{}) error, middleware http.Middleware) (interface{}, error) {
	if middleware == nil {
		return nil, svc.(HelloHTTPService).SayHelloEmpty(ctx)
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, svc.(HelloHTTPService).SayHelloEmpty(ctx)
	}

	return middleware(ctx, nil, handler)

}

func _Hello_PostApi_HTTP_Handler(svc interface{}, ctx context.Context, dec func(interface{}) error, middleware http.Middleware) (interface{}, error) {
	in := new(PostRequest)
	err := dec(in)
	if err != nil {
		return nil, err
	}

	if middleware == nil {
		return nil, svc.(HelloHTTPService).PostApi(ctx, in)
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, svc.(HelloHTTPService).PostApi(ctx, in)
	}

	return middleware(ctx, in, handler)

}

func _Hello_GetApi_HTTP_Handler(svc interface{}, ctx context.Context, dec func(interface{}) error, middleware http.Middleware) (interface{}, error) {
	in := new(GetRequest)
	err := dec(in)
	if err != nil {
		return nil, err
	}

	if middleware == nil {
		return nil, svc.(HelloHTTPService).GetApi(ctx, in)
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, svc.(HelloHTTPService).GetApi(ctx, in)
	}

	return middleware(ctx, in, handler)

}

type HelloHTTPClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (*HelloResponse, error)
	SayHelloEmptyRequest(ctx context.Context, opts ...http.CallOption) (*HelloResponse, error)
	SayHelloEmptyResponse(ctx context.Context, req *HelloRequest, opts ...http.CallOption) error
	SayHelloEmpty(ctx context.Context, opts ...http.CallOption) error
	PostApi(ctx context.Context, req *PostRequest, opts ...http.CallOption) error
	GetApi(ctx context.Context, req *GetRequest, opts ...http.CallOption) error
}

type helloHTTPClient struct {
	cc *http.Client
}

func NewHelloHTTPClient(client *http.Client) HelloHTTPClient {
	return &helloHTTPClient{cc: client}
}

func (c *helloHTTPClient) SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (*HelloResponse, error) {
	reply := new(HelloResponse)
	pattern := "/hello/:name"
	path := http.EncodeURL(pattern, req, false)
	_, err := c.cc.Invoke(ctx, "GET", path, req, reply, opts...)

	return reply, err
}
func (c *helloHTTPClient) SayHelloEmptyRequest(ctx context.Context, opts ...http.CallOption) (*HelloResponse, error) {
	reply := new(HelloResponse)
	path := "/hello1"
	_, err := c.cc.Invoke(ctx, "GET", path, nil, reply, opts...)

	return reply, err
}
func (c *helloHTTPClient) SayHelloEmptyResponse(ctx context.Context, req *HelloRequest, opts ...http.CallOption) error {
	pattern := "/hello2/:name"
	path := http.EncodeURL(pattern, req, false)
	_, err := c.cc.Invoke(ctx, "GET", path, req, nil, opts...)

	return err
}
func (c *helloHTTPClient) SayHelloEmpty(ctx context.Context, opts ...http.CallOption) error {
	path := "/hello3"
	_, err := c.cc.Invoke(ctx, "GET", path, nil, nil, opts...)

	return err
}
func (c *helloHTTPClient) PostApi(ctx context.Context, req *PostRequest, opts ...http.CallOption) error {
	pattern := "/post/:name"
	path := http.EncodeURL(pattern, req, false)
	_, err := c.cc.Invoke(ctx, "POST", path, req, nil, opts...)

	return err
}
func (c *helloHTTPClient) GetApi(ctx context.Context, req *GetRequest, opts ...http.CallOption) error {
	pattern := "/get/:name"
	path := http.EncodeURL(pattern, req, true)
	_, err := c.cc.Invoke(ctx, "GET", path, req, nil, opts...)

	return err
}

var _HelloHTTPService_serviceDesc = &http.ServiceDesc{
	HandlerType: (*HelloHTTPService)(nil),
	Methods: []http.MethodDesc{
		{
			Method:  "GET",
			Path:    "/hello/:name",
			Handler: _Hello_SayHello_HTTP_Handler,
		},
		{
			Method:  "GET",
			Path:    "/hello1",
			Handler: _Hello_SayHelloEmptyRequest_HTTP_Handler,
		},
		{
			Method:  "GET",
			Path:    "/hello2/:name",
			Handler: _Hello_SayHelloEmptyResponse_HTTP_Handler,
		},
		{
			Method:  "GET",
			Path:    "/hello3",
			Handler: _Hello_SayHelloEmpty_HTTP_Handler,
		},
		{
			Method:  "POST",
			Path:    "/post/:name",
			Handler: _Hello_PostApi_HTTP_Handler,
		},
		{
			Method:  "GET",
			Path:    "/get/:name",
			Handler: _Hello_GetApi_HTTP_Handler,
		},
	},
}
